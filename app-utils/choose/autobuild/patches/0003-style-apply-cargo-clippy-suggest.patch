From 9188132532d323cdbf504fa124aabb5719f4c205 Mon Sep 17 00:00:00 2001
From: eatradish <sakiiily@aosc.io>
Date: Sat, 30 Mar 2024 11:57:44 +0800
Subject: [PATCH 3/3] style: apply `cargo clippy` suggest

---
 src/choice/mod.rs | 10 +++-------
 src/main.rs       |  6 +++---
 2 files changed, 6 insertions(+), 10 deletions(-)

diff --git a/src/choice/mod.rs b/src/choice/mod.rs
index b835eb8..571c787 100644
--- a/src/choice/mod.rs
+++ b/src/choice/mod.rs
@@ -190,7 +190,7 @@ impl Choice {
     ///
     /// Returns Ok(None) if the resulting choice range would not include any item in the slice.
     fn get_negative_start_end<T>(&self, slice: &[T]) -> Result<Option<(usize, usize)>> {
-        if slice.len() == 0 {
+        if slice.is_empty() {
             return Ok(None);
         }
 
@@ -222,9 +222,7 @@ impl Choice {
                 // then we assume self.end is negative
                 let start = self.start.try_into()?;
 
-                if end_abs <= slice_len_as_isize
-                    || start <= slice.len()
-                    || (end_abs > slice_len_as_isize && start > slice.len())
+                if !(end_abs > slice_len_as_isize && start > slice.len() && start <= slice.len())
                 {
                     let end = slice.len().saturating_sub(end_abs.try_into()?);
                     Ok(Some((
@@ -238,9 +236,7 @@ impl Choice {
                 // then we assume self.start is negative
                 let end = self.end.try_into()?;
 
-                if start_abs <= slice_len_as_isize
-                    || end <= slice.len()
-                    || (start_abs > slice_len_as_isize && end > slice.len())
+                if !(start_abs > slice_len_as_isize && end > slice.len() && end <= slice.len())
                 {
                     let start = slice.len().saturating_sub(start_abs.try_into()?);
                     Ok(Some((
diff --git a/src/main.rs b/src/main.rs
index e0fdc1e..e8eb319 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -42,7 +42,7 @@ fn main() {
                         eprintln!("Failed to write to output: {}", e)
                     }
                 }
-                e @ _ => eprintln!("Error: {}", e),
+                e => eprintln!("Error: {}", e),
             }
         }
     }
@@ -70,11 +70,11 @@ fn main_generic<W: WriteReceiver>(opt: Opt, handle: &mut W) -> Result<()> {
         match line {
             Ok(l) => {
                 let l = if (config.opt.character_wise || config.opt.field_separator.is_some())
-                    && l.ends_with("\n")
+                    && l.ends_with('\n')
                 {
                     &l[0..l.len().saturating_sub(1)]
                 } else {
-                    &l
+                    l
                 };
 
                 let choice_iter = &mut config.opt.choices.iter().peekable();
-- 
2.44.0


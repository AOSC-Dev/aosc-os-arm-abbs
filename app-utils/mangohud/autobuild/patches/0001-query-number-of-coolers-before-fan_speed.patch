From 6e39d1644dd7279eb0c7bd3fd016c8455ac5ac6d Mon Sep 17 00:00:00 2001
From: Self Denial <selfdenial@pm.me>
Date: Sat, 30 Sep 2023 16:58:47 -0600
Subject: [PATCH 1/2] Attempt to query number of coolers before fan_speed.
 Inspiration:
 https://github.com/NVIDIA/nvidia-settings/blob/main/samples/nv-control-targets.c

---
 src/loaders/loader_nvctrl.cpp |  8 ++++++++
 src/loaders/loader_nvctrl.h   |  1 +
 src/nvctrl.cpp                | 13 +++++++++++++
 3 files changed, 22 insertions(+)

diff --git a/src/loaders/loader_nvctrl.cpp b/src/loaders/loader_nvctrl.cpp
index 5e14a12c30..4c6fb28689 100644
--- a/src/loaders/loader_nvctrl.cpp
+++ b/src/loaders/loader_nvctrl.cpp
@@ -80,6 +80,14 @@ bool libnvctrl_loader::Load(const std::string& library_name) {
     return false;
   }
 
+  XNVCTRLQueryTargetCount =
+      reinterpret_cast<decltype(this->XNVCTRLQueryTargetCount)>(
+          dlsym(library_, "XNVCTRLQueryTargetCount"));
+  if (!XNVCTRLQueryTargetCount) {
+    CleanUp(true);
+    return false;
+  }
+
 #endif
 
 #if defined(LIBRARY_LOADER_NVCTRL_H_DT_NEEDED)
diff --git a/src/loaders/loader_nvctrl.h b/src/loaders/loader_nvctrl.h
index 8ddb532ac0..81bc4359cd 100644
--- a/src/loaders/loader_nvctrl.h
+++ b/src/loaders/loader_nvctrl.h
@@ -24,6 +24,7 @@ class libnvctrl_loader {
   decltype(&::XNVCTRLQueryAttribute) XNVCTRLQueryAttribute;
   decltype(&::XNVCTRLQueryTargetStringAttribute) XNVCTRLQueryTargetStringAttribute;
   decltype(&::XNVCTRLQueryTargetAttribute64) XNVCTRLQueryTargetAttribute64;
+  decltype(&::XNVCTRLQueryTargetCount) XNVCTRLQueryTargetCount;
 
  private:
   void CleanUp(bool unload);
diff --git a/src/nvctrl.cpp b/src/nvctrl.cpp
index 7389b4f7d0..0203cf087e 100644
--- a/src/nvctrl.cpp
+++ b/src/nvctrl.cpp
@@ -164,6 +164,19 @@ void getNvctrlInfo(){
 int64_t getNvctrlFanSpeed(){
     auto& nvctrl = get_libnvctrl_loader();
     int64_t fan_speed = 0;
+    /* Get the number of Cooler devices in the system */
+    int num_coolers;
+    bool ret = nvctrl.XNVCTRLQueryTargetCount(display.get(),
+                        NV_CTRL_TARGET_TYPE_COOLER,
+                        &num_coolers);
+    if (!ret) {
+        SPDLOG_ERROR("XNVCtrl Failed to query number of Coolers");
+    } else {
+        SPDLOG_DEBUG("XNVCtrl number of Cooler Devices: {}", num_coolers);
+        if (num_coolers <= 0) {
+            return fan_speed;
+        }
+    }
     nvctrl.XNVCTRLQueryTargetAttribute64(display.get(),
                         NV_CTRL_TARGET_TYPE_COOLER,
                         0,

From 0c70e7b1d8271668fabf27310c767c0101b396c9 Mon Sep 17 00:00:00 2001
From: Self Denial <selfdenial@pm.me>
Date: Mon, 2 Oct 2023 01:52:17 -0600
Subject: [PATCH 2/2] Move num_coolers to global var & update at init within
 checkXNVCtrl().

---
 src/nvctrl.cpp | 33 ++++++++++++++-------------------
 1 file changed, 14 insertions(+), 19 deletions(-)

diff --git a/src/nvctrl.cpp b/src/nvctrl.cpp
index 0203cf087e..6ceba3af3e 100644
--- a/src/nvctrl.cpp
+++ b/src/nvctrl.cpp
@@ -16,6 +16,7 @@ static std::unique_ptr<Display, std::function<void(Display*)>> display;
 
 struct nvctrlInfo nvctrl_info;
 bool nvctrlSuccess = false;
+int num_coolers = 0;
 
 static bool find_nv_x11(libnvctrl_loader& nvctrl, Display*& dpy)
 {
@@ -71,6 +72,11 @@ bool checkXNVCtrl()
                     &pci_id);
     deviceID = (pci_id & 0xFFFF);
 
+    // get number of coolers at init
+    nvctrl.XNVCTRLQueryTargetCount(display.get(),
+                    NV_CTRL_TARGET_TYPE_COOLER,
+                    &num_coolers);
+
     return true;
 }
 
@@ -162,26 +168,15 @@ void getNvctrlInfo(){
 }
 
 int64_t getNvctrlFanSpeed(){
-    auto& nvctrl = get_libnvctrl_loader();
     int64_t fan_speed = 0;
-    /* Get the number of Cooler devices in the system */
-    int num_coolers;
-    bool ret = nvctrl.XNVCTRLQueryTargetCount(display.get(),
-                        NV_CTRL_TARGET_TYPE_COOLER,
-                        &num_coolers);
-    if (!ret) {
-        SPDLOG_ERROR("XNVCtrl Failed to query number of Coolers");
-    } else {
-        SPDLOG_DEBUG("XNVCtrl number of Cooler Devices: {}", num_coolers);
-        if (num_coolers <= 0) {
-            return fan_speed;
-        }
+    if (num_coolers >= 1) {
+        auto& nvctrl = get_libnvctrl_loader();
+        nvctrl.XNVCTRLQueryTargetAttribute64(display.get(),
+                            NV_CTRL_TARGET_TYPE_COOLER,
+                            0,
+                            0,
+                            NV_CTRL_THERMAL_COOLER_SPEED,
+                            &fan_speed);
     }
-    nvctrl.XNVCTRLQueryTargetAttribute64(display.get(),
-                        NV_CTRL_TARGET_TYPE_COOLER,
-                        0,
-                        0,
-                        NV_CTRL_THERMAL_COOLER_SPEED,
-                        &fan_speed);
     return fan_speed;
 }

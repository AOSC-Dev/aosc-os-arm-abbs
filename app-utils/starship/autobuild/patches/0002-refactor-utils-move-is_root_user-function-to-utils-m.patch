From dd25fe463af9365096cdd259a43e560eacd84abd Mon Sep 17 00:00:00 2001
From: eatradish <sakiiily@aosc.io>
Date: Thu, 21 Sep 2023 18:11:16 +0800
Subject: [PATCH 2/2] refactor(utils): move `is_root_user` function to `utils`
 mod

---
 src/modules/status.rs             | 33 +------------------------------
 src/modules/username.rs           | 33 +------------------------------
 src/modules/utils/is_root_user.rs | 31 +++++++++++++++++++++++++++++
 src/modules/utils/mod.rs          |  2 ++
 4 files changed, 35 insertions(+), 64 deletions(-)
 create mode 100644 src/modules/utils/is_root_user.rs

diff --git a/src/modules/status.rs b/src/modules/status.rs
index 0f9e03d6..6821a483 100644
--- a/src/modules/status.rs
+++ b/src/modules/status.rs
@@ -1,5 +1,6 @@
 use std::string::ToString;
 
+use super::utils::is_root_user::is_root_user;
 use super::{Context, Module, ModuleConfig};
 
 use crate::configs::status::StatusConfig;
@@ -262,38 +263,6 @@ fn status_signal_name(signal: SignalNumber) -> Option<&'static str> {
     }
 }
 
-#[cfg(all(target_os = "windows", not(test)))]
-fn is_root_user() -> bool {
-    use deelevate::{PrivilegeLevel, Token};
-    let token = match Token::with_current_process() {
-        Ok(token) => token,
-        Err(e) => {
-            log::warn!("Failed to get process token: {e:?}");
-            return false;
-        }
-    };
-    matches!(
-        match token.privilege_level() {
-            Ok(level) => level,
-            Err(e) => {
-                log::warn!("Failed to get privilege level: {e:?}");
-                return false;
-            }
-        },
-        PrivilegeLevel::Elevated | PrivilegeLevel::HighIntegrityAdmin
-    )
-}
-
-#[cfg(all(target_os = "windows", test))]
-fn is_root_user() -> bool {
-    false
-}
-
-#[cfg(not(target_os = "windows"))]
-fn is_root_user() -> bool {
-    nix::unistd::geteuid() == nix::unistd::ROOT
-}
-
 #[cfg(test)]
 mod tests {
     use nu_ansi_term::{Color, Style};
diff --git a/src/modules/username.rs b/src/modules/username.rs
index c25a5bd2..97ef9824 100644
--- a/src/modules/username.rs
+++ b/src/modules/username.rs
@@ -1,3 +1,4 @@
+use super::utils::is_root_user::is_root_user;
 use super::{Context, Module, ModuleConfig};
 
 use crate::configs::username::UsernameConfig;
@@ -87,38 +88,6 @@ fn is_login_user(context: &Context, username: &str) -> bool {
         .map_or(true, |logname| logname == username)
 }
 
-#[cfg(all(target_os = "windows", not(test)))]
-fn is_root_user() -> bool {
-    use deelevate::{PrivilegeLevel, Token};
-    let token = match Token::with_current_process() {
-        Ok(token) => token,
-        Err(e) => {
-            log::warn!("Failed to get process token: {e:?}");
-            return false;
-        }
-    };
-    matches!(
-        match token.privilege_level() {
-            Ok(level) => level,
-            Err(e) => {
-                log::warn!("Failed to get privilege level: {e:?}");
-                return false;
-            }
-        },
-        PrivilegeLevel::Elevated | PrivilegeLevel::HighIntegrityAdmin
-    )
-}
-
-#[cfg(test)]
-fn is_root_user() -> bool {
-    false
-}
-
-#[cfg(all(not(target_os = "windows"), not(test)))]
-fn is_root_user() -> bool {
-    nix::unistd::geteuid() == nix::unistd::ROOT
-}
-
 fn is_ssh_session(context: &Context) -> bool {
     let ssh_env = ["SSH_CONNECTION", "SSH_CLIENT", "SSH_TTY"];
     ssh_env.iter().any(|env| context.get_env_os(env).is_some())
diff --git a/src/modules/utils/is_root_user.rs b/src/modules/utils/is_root_user.rs
new file mode 100644
index 00000000..968a2d86
--- /dev/null
+++ b/src/modules/utils/is_root_user.rs
@@ -0,0 +1,31 @@
+#[cfg(all(target_os = "windows", not(test)))]
+pub fn is_root_user() -> bool {
+    use deelevate::{PrivilegeLevel, Token};
+    let token = match Token::with_current_process() {
+        Ok(token) => token,
+        Err(e) => {
+            log::warn!("Failed to get process token: {e:?}");
+            return false;
+        }
+    };
+    matches!(
+        match token.privilege_level() {
+            Ok(level) => level,
+            Err(e) => {
+                log::warn!("Failed to get privilege level: {e:?}");
+                return false;
+            }
+        },
+        PrivilegeLevel::Elevated | PrivilegeLevel::HighIntegrityAdmin
+    )
+}
+
+#[cfg(test)]
+pub fn is_root_user() -> bool {
+    false
+}
+
+#[cfg(all(not(target_os = "windows"), not(test)))]
+pub fn is_root_user() -> bool {
+    nix::unistd::geteuid() == nix::unistd::ROOT
+}
diff --git a/src/modules/utils/mod.rs b/src/modules/utils/mod.rs
index 209da8ed..445898b0 100644
--- a/src/modules/utils/mod.rs
+++ b/src/modules/utils/mod.rs
@@ -9,3 +9,5 @@ pub mod directory_nix;
 pub mod path;
 
 pub mod truncate;
+
+pub mod is_root_user;
-- 
2.47.1


From b9e5c236f42ea3dcc93a096de0c4dcd3177637b4 Mon Sep 17 00:00:00 2001
From: eatradish <sakiiily@aosc.io>
Date: Sun, 17 Sep 2023 18:30:43 +0800
Subject: [PATCH 1/2] feat(status): add `success_symbol_rootuser` option

This commit will allow user to set a different success symbol for root users than for non-root users in some command-line topics (typically `#` for the former and `$` for the latter).
---
 .github/config-schema.json |  5 +++++
 docs/config/README.md      |  2 ++
 src/configs/status.rs      |  2 ++
 src/modules/status.rs      | 34 ++++++++++++++++++++++++++++++++++
 4 files changed, 43 insertions(+)

diff --git a/.github/config-schema.json b/.github/config-schema.json
index 3dc390b6..989a53cf 100644
--- a/.github/config-schema.json
+++ b/.github/config-schema.json
@@ -1722,6 +1722,7 @@
         "signal_symbol": "‚ö°",
         "style": "bold red",
         "success_symbol": "",
+        "success_symbol_rootuser": "",
         "symbol": "‚ùå"
       },
       "allOf": [
@@ -5969,6 +5970,10 @@
           "default": "",
           "type": "string"
         },
+        "success_symbol_rootuser": {
+          "default": "",
+          "type": "string"
+        },
         "not_executable_symbol": {
           "default": "üö´",
           "type": "string"
diff --git a/docs/config/README.md b/docs/config/README.md
index 83ae1332..d00f4218 100644
--- a/docs/config/README.md
+++ b/docs/config/README.md
@@ -4277,6 +4277,7 @@ To enable it, set `disabled` to `false` in your configuration file.
 | `format`                    | `'[$symbol$status]($style) '`                                                 | The format of the module                                              |
 | `symbol`                    | `'‚ùå'`                                                                        | The symbol displayed on program error                                 |
 | `success_symbol`            | `''`                                                                          | The symbol displayed on program success                               |
+| `success_symbol_rootuser`   | `''`                                                                          | The symbol displayed on program success (root user only)              |
 | `not_executable_symbol`     | `'üö´'`                                                                        | The symbol displayed when file isn't executable                       |
 | `not_found_symbol`          | `'üîç'`                                                                        | The symbol displayed when the command can't be found                  |
 | `sigint_symbol`             | `'üß±'`                                                                        | The symbol displayed on SIGINT (Ctrl + c)                             |
@@ -4316,6 +4317,7 @@ To enable it, set `disabled` to `false` in your configuration file.
 style = 'bg:blue'
 symbol = 'üî¥ '
 success_symbol = 'üü¢ SUCCESS'
+success_symbol_rootuser = 'üü¢ SUCCESS'
 format = '[\[$symbol$common_meaning$signal_name$maybe_int\]]($style) '
 map_symbol = true
 disabled = false
diff --git a/src/configs/status.rs b/src/configs/status.rs
index a27f2ed2..c21cb856 100644
--- a/src/configs/status.rs
+++ b/src/configs/status.rs
@@ -11,6 +11,7 @@ pub struct StatusConfig<'a> {
     pub format: &'a str,
     pub symbol: &'a str,
     pub success_symbol: &'a str,
+    pub success_symbol_rootuser: &'a str,
     pub not_executable_symbol: &'a str,
     pub not_found_symbol: &'a str,
     pub sigint_symbol: &'a str,
@@ -32,6 +33,7 @@ impl<'a> Default for StatusConfig<'a> {
             format: "[$symbol$status]($style) ",
             symbol: "‚ùå",
             success_symbol: "",
+            success_symbol_rootuser: "",
             not_executable_symbol: "üö´",
             not_found_symbol: "üîç",
             sigint_symbol: "üß±",
diff --git a/src/modules/status.rs b/src/modules/status.rs
index 6dfa168b..a6d56318 100644
--- a/src/modules/status.rs
+++ b/src/modules/status.rs
@@ -46,6 +46,7 @@ pub fn module<'a>(context: &'a Context) -> Option<Module<'a>> {
     // Exit code is zero while success_symbol and pipestatus are all zero or disabled/missing
     if exit_code == "0"
         && config.success_symbol.is_empty()
+        && config.success_symbol_rootuser.is_empty()
         && (match pipestatus_status {
             PipeStatusStatus::Pipe(ps) => ps.iter().all(|s| s == "0"),
             _ => true,
@@ -141,6 +142,7 @@ fn format_exit_code<'a>(
         formatter
             .map_meta(|var, _| match var {
                 "symbol" => match exit_code_int {
+                    0 if is_root_user() => Some(config.success_symbol_rootuser),
                     0 => Some(config.success_symbol),
                     126 if config.map_symbol => Some(config.not_executable_symbol),
                     127 if config.map_symbol => Some(config.not_found_symbol),
@@ -255,6 +257,38 @@ fn status_signal_name(signal: SignalNumber) -> Option<&'static str> {
     }
 }
 
+#[cfg(all(target_os = "windows", not(test)))]
+fn is_root_user() -> bool {
+    use deelevate::{PrivilegeLevel, Token};
+    let token = match Token::with_current_process() {
+        Ok(token) => token,
+        Err(e) => {
+            log::warn!("Failed to get process token: {e:?}");
+            return false;
+        }
+    };
+    matches!(
+        match token.privilege_level() {
+            Ok(level) => level,
+            Err(e) => {
+                log::warn!("Failed to get privilege level: {e:?}");
+                return false;
+            }
+        },
+        PrivilegeLevel::Elevated | PrivilegeLevel::HighIntegrityAdmin
+    )
+}
+
+#[cfg(all(target_os = "windows", test))]
+fn is_root_user() -> bool {
+    false
+}
+
+#[cfg(not(target_os = "windows"))]
+fn is_root_user() -> bool {
+    nix::unistd::geteuid() == nix::unistd::ROOT
+}
+
 #[cfg(test)]
 mod tests {
     use nu_ansi_term::{Color, Style};
-- 
2.47.0


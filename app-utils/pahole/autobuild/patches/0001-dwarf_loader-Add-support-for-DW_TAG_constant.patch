From cb7eb753694be3e8aef45ec16ad27708c725eeca Mon Sep 17 00:00:00 2001
From: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Thu, 13 Apr 2023 14:39:52 -0300
Subject: [PATCH 1/5] dwarf_loader: Add support for DW_TAG_constant

First found in Go programs.

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 dwarf_loader.c | 25 +++++++++++++++++++++++++
 dwarves.h      | 39 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 64 insertions(+)

diff --git a/dwarf_loader.c b/dwarf_loader.c
index 4efa4e1..07a74a1 100644
--- a/dwarf_loader.c
+++ b/dwarf_loader.c
@@ -752,6 +752,19 @@ static struct variable *variable__new(Dwarf_Die *die, struct cu *cu, struct conf
 	return var;
 }
 
+static struct constant *constant__new(Dwarf_Die *die, struct cu *cu, struct conf_load *conf)
+{
+	struct constant *constant = tag__alloc(cu, sizeof(*constant));
+
+	if (constant != NULL) {
+		tag__init(&constant->tag, cu, die);
+		constant->name = attr_string(die, DW_AT_name, conf);
+		constant->value = attr_numeric(die, DW_AT_const_value);
+	}
+
+	return constant;
+}
+
 static int tag__recode_dwarf_bitfield(struct tag *tag, struct cu *cu, uint16_t bit_size)
 {
 	int id;
@@ -1657,6 +1670,16 @@ static struct tag *die__create_new_variable(Dwarf_Die *die, struct cu *cu, struc
 	return &var->ip.tag;
 }
 
+static struct tag *die__create_new_constant(Dwarf_Die *die, struct cu *cu, struct conf_load *conf)
+{
+	struct constant *constant = constant__new(die, cu, conf);
+
+	if (constant == NULL)
+		return NULL;
+
+	return &constant->tag;
+}
+
 static struct tag *die__create_new_subroutine_type(Dwarf_Die *die,
 						   struct cu *cu, struct conf_load *conf)
 {
@@ -2187,6 +2210,8 @@ static struct tag *__die__process_tag(Dwarf_Die *die, struct cu *cu,
 		tag = die__create_new_union(die, cu, conf);	break;
 	case DW_TAG_variable:
 		tag = die__create_new_variable(die, cu, conf);	break;
+	case DW_TAG_constant: // First seen in a Go CU
+		tag = die__create_new_constant(die, cu, conf);	break;
 	default:
 		__cu__tag_not_handled(die, fn);
 		/* fall thru */
diff --git a/dwarves.h b/dwarves.h
index 7a319d1..f305923 100644
--- a/dwarves.h
+++ b/dwarves.h
@@ -387,6 +387,19 @@ int lang__str2int(const char *lang);
 			continue;			\
 		else
 
+/**
+ * cu__for_each_constant - iterate thru all the global constant tags
+ * @cu: struct cu instance to iterate
+ * @pos: struct tag iterator
+ * @id: uint32_t tag id
+ */
+#define cu__for_each_constant(cu, id, pos)		\
+	for (id = 0; id < cu->tags_table.nr_entries; ++id) \
+		if (!(pos = cu->tags_table.entries[id]) || \
+		    !tag__is_constant(pos))		\
+			continue;			\
+		else
+
 int cu__add_tag(struct cu *cu, struct tag *tag, uint32_t *id);
 int cu__add_tag_with_id(struct cu *cu, struct tag *tag, uint32_t id);
 int cu__table_add_tag(struct cu *cu, struct tag *tag, uint32_t *id);
@@ -493,6 +506,11 @@ static inline bool tag__is_variable(const struct tag *tag)
 	return tag->tag == DW_TAG_variable;
 }
 
+static inline bool tag__is_constant(const struct tag *tag)
+{
+	return tag->tag == DW_TAG_constant;
+}
+
 static inline bool tag__is_volatile(const struct tag *tag)
 {
 	return tag->tag == DW_TAG_volatile_type;
@@ -775,6 +793,27 @@ const char *variable__name(const struct variable *var);
 const char *variable__type_name(const struct variable *var,
 				const struct cu *cu, char *bf, size_t len);
 
+struct constant {
+	struct tag tag;
+	const char *name;
+	uint64_t   value;
+};
+
+static inline struct constant *tag__constant(const struct tag *tag)
+{
+	return (struct constant *)tag;
+}
+
+static inline const char *constant__name(const struct constant *constant)
+{
+	return constant->name;
+}
+
+static inline uint64_t constant__value(const struct constant *constant)
+{
+	return constant->value;
+}
+
 struct lexblock {
 	struct ip_tag	 ip;
 	struct list_head tags;
-- 
2.39.1


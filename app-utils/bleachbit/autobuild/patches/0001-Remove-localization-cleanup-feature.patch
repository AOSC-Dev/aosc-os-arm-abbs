From 28b67ec3d47d716aa606a1ae1b6145565276f634 Mon Sep 17 00:00:00 2001
From: Student Main <studentmain@aosc.io>
Date: Tue, 8 Oct 2024 06:43:12 +0000
Subject: [PATCH 1/4] Remove localization cleanup feature

---
 bleachbit/Cleaner.py        | 14 ----------
 bleachbit/GuiPreferences.py | 53 -------------------------------------
 2 files changed, 67 deletions(-)

diff --git a/bleachbit/Cleaner.py b/bleachbit/Cleaner.py
index 585269f1..eb0f63db 100755
--- a/bleachbit/Cleaner.py
+++ b/bleachbit/Cleaner.py
@@ -274,12 +274,6 @@ class System(Cleaner):
             self.add_option('desktop_entry', _('Broken desktop files'), _(
                 'Delete broken application menu entries and file associations'))
             self.add_option('cache', _('Cache'), _('Delete the cache'))
-            # TRANSLATORS: Localizations are files supporting specific
-            # languages, so applications appear in Spanish, etc.
-            self.add_option('localizations', _('Localizations'), _(
-                'Delete files for unwanted languages'))
-            self.set_warning(
-                'localizations', _("Configure this option in the preferences."))
             # TRANSLATORS: 'Rotated logs' refers to old system log files.
             # Linux systems often have a scheduled job to rotate the logs
             # which means compress all except the newest log and then delete
@@ -384,14 +378,6 @@ class System(Cleaner):
                     if filename.endswith('.desktop') and Unix.is_broken_xdg_desktop(filename):
                         yield Command.Delete(filename)
 
-        # unwanted locales
-        if 'posix' == os.name and 'localizations' == option_id:
-            for path in Unix.locales.localization_paths(locales_to_keep=options.get_languages()):
-                if os.path.isdir(path):
-                    for f in FileUtilities.children_in_directory(path, True):
-                        yield Command.Delete(f)
-                yield Command.Delete(path)
-
         # Windows logs
         if 'nt' == os.name and 'logs' == option_id:
             paths = (
diff --git a/bleachbit/GuiPreferences.py b/bleachbit/GuiPreferences.py
index 4274ecf9..6db20f6a 100644
--- a/bleachbit/GuiPreferences.py
+++ b/bleachbit/GuiPreferences.py
@@ -63,9 +63,6 @@ class PreferencesDialog:
             LOCATIONS_CUSTOM), Gtk.Label(label=_("Custom")))
         notebook.append_page(self.__drives_page(),
                              Gtk.Label(label=_("Drives")))
-        if 'posix' == os.name:
-            notebook.append_page(self.__languages_page(),
-                                 Gtk.Label(label=_("Languages")))
         notebook.append_page(self.__locations_page(
             LOCATIONS_WHITELIST), Gtk.Label(label=_("Whitelist")))
 
@@ -285,56 +282,6 @@ class PreferencesDialog:
 
         return vbox
 
-    def __languages_page(self):
-        """Return widget containing the languages page"""
-
-        def preserve_toggled_cb(cell, path, liststore):
-            """Callback for toggling the 'preserve' column"""
-            __iter = liststore.get_iter_from_string(path)
-            value = not liststore.get_value(__iter, 0)
-            liststore.set(__iter, 0, value)
-            langid = liststore[path][1]
-            options.set_language(langid, value)
-
-        vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
-        notice = Gtk.Label(
-            label=_("All languages will be deleted except those checked."))
-        vbox.pack_start(notice, False, False, 0)
-
-        # populate data
-        liststore = Gtk.ListStore('gboolean', str, str)
-        for lang, native in sorted(Unix.Locales.native_locale_names.items()):
-            liststore.append([(options.get_language(lang)), lang, native])
-
-        # create treeview
-        treeview = Gtk.TreeView.new_with_model(liststore)
-
-        # create column views
-        self.renderer0 = Gtk.CellRendererToggle()
-        self.renderer0.set_property('activatable', True)
-        self.renderer0.connect('toggled', preserve_toggled_cb, liststore)
-        self.column0 = Gtk.TreeViewColumn(
-            _("Preserve"), self.renderer0, active=0)
-        treeview.append_column(self.column0)
-
-        self.renderer1 = Gtk.CellRendererText()
-        self.column1 = Gtk.TreeViewColumn(_("Code"), self.renderer1, text=1)
-        treeview.append_column(self.column1)
-
-        self.renderer2 = Gtk.CellRendererText()
-        self.column2 = Gtk.TreeViewColumn(_("Name"), self.renderer2, text=2)
-        treeview.append_column(self.column2)
-        treeview.set_search_column(2)
-
-        # finish
-        swindow = Gtk.ScrolledWindow()
-        swindow.set_overlay_scrolling(False)
-        swindow.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
-        swindow.set_size_request(300, 200)
-        swindow.add(treeview)
-        vbox.pack_start(swindow, False, True, 0)
-        return vbox
-
     def __locations_page(self, page_type):
         """Return a widget containing a list of files and folders"""
 
-- 
2.47.0


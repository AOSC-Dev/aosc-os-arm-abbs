From 426d273a90d6291a6adf70a81a5f7d8220ce0555 Mon Sep 17 00:00:00 2001
From: eatradish <sakiiily@aosc.io>
Date: Thu, 25 Jan 2024 20:18:59 +0800
Subject: [PATCH] Disable auto check update

---
 atuin-client/src/settings.rs                  | 64 -------------------
 .../src/command/client/search/interactive.rs  | 28 ++------
 2 files changed, 4 insertions(+), 88 deletions(-)

diff --git a/atuin-client/src/settings.rs b/atuin-client/src/settings.rs
index 7e251550..44c353fb 100644
--- a/atuin-client/src/settings.rs
+++ b/atuin-client/src/settings.rs
@@ -14,7 +14,6 @@ use eyre::{eyre, Context, Result};
 use fs_err::{create_dir_all, File};
 use parse_duration::parse;
 use regex::RegexSet;
-use semver::Version;
 use serde::Deserialize;
 use time::{format_description::well_known::Rfc3339, OffsetDateTime};
 use uuid::Uuid;
@@ -178,7 +177,6 @@ pub struct Settings {
     pub dialect: Dialect,
     pub style: Style,
     pub auto_sync: bool,
-    pub update_check: bool,
     pub sync_address: String,
     pub sync_frequency: String,
     pub db_path: String,
@@ -320,67 +318,6 @@ impl Settings {
         }
     }
 
-    fn needs_update_check(&self) -> Result<bool> {
-        let last_check = Settings::last_version_check()?;
-        let diff = OffsetDateTime::now_utc() - last_check;
-
-        // Check a max of once per hour
-        Ok(diff.whole_hours() >= 1)
-    }
-
-    async fn latest_version(&self) -> Result<Version> {
-        // Default to the current version, and if that doesn't parse, a version so high it's unlikely to ever
-        // suggest upgrading.
-        let current =
-            Version::parse(env!("CARGO_PKG_VERSION")).unwrap_or(Version::new(100000, 0, 0));
-
-        if !self.needs_update_check()? {
-            // Worst case, we don't want Atuin to fail to start because something funky is going on with
-            // version checking.
-            let version = match Settings::read_from_data_dir(LATEST_VERSION_FILENAME) {
-                Some(v) => Version::parse(&v).unwrap_or(current),
-                None => current,
-            };
-
-            return Ok(version);
-        }
-
-        #[cfg(feature = "sync")]
-        let latest = crate::api_client::latest_version().await.unwrap_or(current);
-
-        #[cfg(not(feature = "sync"))]
-        let latest = current;
-
-        Settings::save_version_check_time()?;
-        Settings::save_to_data_dir(LATEST_VERSION_FILENAME, latest.to_string().as_str())?;
-
-        Ok(latest)
-    }
-
-    // Return Some(latest version) if an update is needed. Otherwise, none.
-    pub async fn needs_update(&self) -> Option<Version> {
-        if !self.update_check {
-            return None;
-        }
-
-        let current =
-            Version::parse(env!("CARGO_PKG_VERSION")).unwrap_or(Version::new(100000, 0, 0));
-
-        let latest = self.latest_version().await;
-
-        if latest.is_err() {
-            return None;
-        }
-
-        let latest = latest.unwrap();
-
-        if latest > current {
-            return Some(latest);
-        }
-
-        None
-    }
-
     pub fn builder() -> Result<ConfigBuilder<DefaultState>> {
         let data_dir = atuin_common::utils::data_dir();
         let db_path = data_dir.join("history.db");
@@ -396,7 +333,6 @@ impl Settings {
             .set_default("session_path", session_path.to_str())?
             .set_default("dialect", "us")?
             .set_default("auto_sync", true)?
-            .set_default("update_check", true)?
             .set_default("sync_address", "https://api.atuin.sh")?
             .set_default("sync_frequency", "10m")?
             .set_default("search_mode", "fuzzy")?
diff --git a/atuin/src/command/client/search/interactive.rs b/atuin/src/command/client/search/interactive.rs
index 8ae03752..a17761d1 100644
--- a/atuin/src/command/client/search/interactive.rs
+++ b/atuin/src/command/client/search/interactive.rs
@@ -12,8 +12,6 @@ use crossterm::{
     execute, terminal,
 };
 use eyre::Result;
-use futures_util::FutureExt;
-use semver::Version;
 use unicode_width::UnicodeWidthStr;
 
 use atuin_client::{
@@ -44,7 +42,6 @@ const COPY_QUERY: usize = usize::MAX - 2;
 #[allow(clippy::struct_field_names)]
 struct State {
     history_count: i64,
-    update_needed: Option<Version>,
     results_state: ListState,
     switched_search_mode: bool,
     search_mode: SearchMode,
@@ -422,19 +419,11 @@ impl State {
     }
 
     fn build_title(&mut self) -> Paragraph {
-        let title = if self.update_needed.is_some() {
-            let version = self.update_needed.clone().unwrap();
+        let title = Paragraph::new(Text::from(Span::styled(
+            format!(" Atuin v{VERSION}"),
+            Style::default().add_modifier(Modifier::BOLD),
+        )));
 
-            Paragraph::new(Text::from(Span::styled(
-                format!(" Atuin v{VERSION} - UPDATE AVAILABLE {version}"),
-                Style::default().add_modifier(Modifier::BOLD).fg(Color::Red),
-            )))
-        } else {
-            Paragraph::new(Text::from(Span::styled(
-                format!(" Atuin v{VERSION}"),
-                Style::default().add_modifier(Modifier::BOLD),
-            )))
-        };
         title
     }
 
@@ -622,11 +611,6 @@ pub async fn history(
     let mut input = Cursor::from(query.join(" "));
     // Put the cursor at the end of the query by default
     input.end();
-
-    let settings2 = settings.clone();
-    let update_needed = tokio::spawn(async move { settings2.needs_update().await }).fuse();
-    tokio::pin!(update_needed);
-
     let context = current_context();
 
     let history_count = db.history_count(false).await?;
@@ -640,7 +624,6 @@ pub async fn history(
     let mut app = State {
         history_count,
         results_state: ListState::default(),
-        update_needed: None,
         switched_search_mode: false,
         search_mode,
         search: SearchState {
@@ -687,9 +670,6 @@ pub async fn history(
                     }
                 }
             }
-            update_needed = &mut update_needed => {
-                app.update_needed = update_needed?;
-            }
         }
 
         if initial_input != app.search.input.as_str()
-- 
2.43.0


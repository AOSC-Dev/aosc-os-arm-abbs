From 86f759380ea4990d4c05cb940cce82d7c433c541 Mon Sep 17 00:00:00 2001
From: Mingcong Bai <jeffbai@aosc.io>
Date: Thu, 21 Nov 2024 14:56:43 +0800
Subject: [PATCH 1/2] Revert "If no config option for accel profile is
 selected, use default from Xorg"

With libinput 1.26.2, a "Flat" acceleration profile was set by default for
all input devices. This is probably not correct as libinput still
indicates that "Adaptive" is the default.

Having a "Flat" default makes TrackPoints painfully unusable after login
(whereas in SDDM they work as expected).

This reverts commit fb8a655a73769351370abd2aa88ecf2d54583c42.
---
 .../backends/x11/x11_libinput_backend.cpp     |  2 -
 .../backends/x11/x11_libinput_dummydevice.cpp | 47 ++-----------------
 .../backends/x11/x11_libinput_dummydevice.h   |  2 -
 3 files changed, 4 insertions(+), 47 deletions(-)

diff --git a/kcms/mouse/backends/x11/x11_libinput_backend.cpp b/kcms/mouse/backends/x11/x11_libinput_backend.cpp
index a3dcce7d0..ec1ec5096 100644
--- a/kcms/mouse/backends/x11/x11_libinput_backend.cpp
+++ b/kcms/mouse/backends/x11/x11_libinput_backend.cpp
@@ -36,8 +36,6 @@ bool X11LibinputBackend::isChangedConfig() const
 
 void X11LibinputBackend::kcmInit()
 {
-    static_cast<X11LibinputDummyDevice *>(m_device)->getDefaultConfigFromX();
-
     getConfig();
     applyConfig();
     X11Backend::kcmInit();
diff --git a/kcms/mouse/backends/x11/x11_libinput_dummydevice.cpp b/kcms/mouse/backends/x11/x11_libinput_dummydevice.cpp
index e41731a2a..21dff2dc4 100644
--- a/kcms/mouse/backends/x11/x11_libinput_dummydevice.cpp
+++ b/kcms/mouse/backends/x11/x11_libinput_dummydevice.cpp
@@ -150,9 +150,8 @@ X11LibinputDummyDevice::X11LibinputDummyDevice(QObject *parent, Display *dpy)
     m_supportsPointerAccelerationProfileAdaptive.val = true;
     m_supportsPointerAccelerationProfileFlat.val = true;
 
-    auto x11DefaultFlat = m_settings->load(QStringLiteral("X11LibInputXAccelProfileFlat"), false);
-    m_defaultPointerAccelerationProfileFlat.val = x11DefaultFlat;
-    m_defaultPointerAccelerationProfileAdaptive.val = !x11DefaultFlat;
+    m_defaultPointerAccelerationProfileAdaptive.val = true;
+    m_defaultPointerAccelerationProfileFlat.val = false;
 
     m_supportsNaturalScroll.val = true;
     m_naturalScrollEnabledByDefault.val = false;
@@ -175,10 +174,9 @@ bool X11LibinputDummyDevice::getConfig()
 
     reset(m_middleEmulation, false);
     reset(m_naturalScroll, false);
-    auto flatDefault = m_defaultPointerAccelerationProfileFlat.val;
-    reset(m_pointerAccelerationProfileFlat, flatDefault);
+    reset(m_pointerAccelerationProfileFlat, false);
 
-    m_pointerAccelerationProfileAdaptive.reset(!m_settings->load(m_pointerAccelerationProfileFlat.cfgName, flatDefault));
+    m_pointerAccelerationProfileAdaptive.reset(!m_settings->load(m_pointerAccelerationProfileFlat.cfgName, false));
     m_pointerAcceleration.reset(m_settings->load(m_pointerAcceleration.cfgName, 0.));
 
     return true;
@@ -209,43 +207,6 @@ bool X11LibinputDummyDevice::applyConfig()
     return true;
 }
 
-void X11LibinputDummyDevice::getDefaultConfigFromX()
-{
-    // The user can override certain values in their X configuration. We want to
-    // account for those in our default values, but if we just read this when
-    // loading the KCM, we end up reading the current settings which may already
-    // have been modified by us. So instead, read these defaults during startup
-    // and write them to config, so we can later on read them again to know the
-    // system-wide defaults.
-    bool flatProfile = true;
-    XIForallPointerDevices(m_dpy, [&](XDeviceInfo *info) {
-        Atom property = m_pointerAccelerationProfileFlat.atom;
-        Atom type_return;
-        int format_return;
-        unsigned long num_items_return;
-        unsigned long bytes_after_return;
-        unsigned char *_data = nullptr;
-
-        auto status =
-            XIGetProperty(m_dpy, info->id, property, 0, 1, False, XA_INTEGER, &type_return, &format_return, &num_items_return, &bytes_after_return, &_data);
-        if (status != Success) {
-            return;
-        }
-
-        QScopedArrayPointer<unsigned char, ScopedXDeleter> data(_data);
-        _data = nullptr;
-
-        if (type_return != XA_INTEGER || !data || format_return != 8 || num_items_return != 2) {
-            return;
-        }
-
-        if (data[0] == 1 && data[1] == 0) {
-            flatProfile = false;
-        }
-    });
-    m_settings->save(QStringLiteral("X11LibInputXAccelProfileFlat"), flatProfile);
-}
-
 template<typename T>
 bool X11LibinputDummyDevice::valueWriter(Prop<T> &prop)
 {
diff --git a/kcms/mouse/backends/x11/x11_libinput_dummydevice.h b/kcms/mouse/backends/x11/x11_libinput_dummydevice.h
index ad5bc46b8..5084d80f5 100644
--- a/kcms/mouse/backends/x11/x11_libinput_dummydevice.h
+++ b/kcms/mouse/backends/x11/x11_libinput_dummydevice.h
@@ -70,8 +70,6 @@ public:
     bool applyConfig();
     bool isChangedConfig() const;
 
-    void getDefaultConfigFromX();
-
     //
     // general
     QString name() const
-- 
2.47.0


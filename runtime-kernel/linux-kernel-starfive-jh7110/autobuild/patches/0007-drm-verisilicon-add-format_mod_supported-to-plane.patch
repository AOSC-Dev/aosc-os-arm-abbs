From c31549b962302e8170f955605e48ed1b2de9d0b1 Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <uwu@icenowy.me>
Date: Thu, 28 Mar 2024 17:09:59 +0800
Subject: [PATCH] drm/verisilicon: add format_mod_supported to plane

Otherwise IN_FORMATS blob is corrupted.

Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
---
 drivers/gpu/drm/verisilicon/vs_plane.c | 46 ++++++++++++--------------
 drivers/gpu/drm/verisilicon/vs_plane.h |  1 +
 2 files changed, 22 insertions(+), 25 deletions(-)

diff --git a/drivers/gpu/drm/verisilicon/vs_plane.c b/drivers/gpu/drm/verisilicon/vs_plane.c
index 24d70fe86..11171907f 100644
--- a/drivers/gpu/drm/verisilicon/vs_plane.c
+++ b/drivers/gpu/drm/verisilicon/vs_plane.c
@@ -198,32 +198,26 @@ static int vs_plane_atomic_get_property(struct drm_plane *plane,
 	return 0;
 }
 
-static bool vs_format_mod_supported(struct drm_plane *plane,
-					uint32_t format,
-					uint64_t modifier)
+static bool vs_plane_format_mod_supported(struct drm_plane *plane,
+					  uint32_t format,
+					  uint64_t modifier)
 {
-   int i;
-
-   /*
-	* We always have to allow these modifiers:
-	* 1. Core DRM checks for LINEAR support if userspace does not provide modifiers.
-	* 2. Not passing any modifiers is the same as explicitly passing INVALID.
-	*/
-   if (modifier == DRM_FORMAT_MOD_LINEAR) {
-	   return true;
-   }
-
-   /* Check that the modifier is on the list of the plane's supported modifiers. */
-   for (i = 0; i < plane->modifier_count; i++) {
-	   if (modifier == plane->modifiers[i])
-		   break;
-   }
-   if (i == plane->modifier_count)
-	   return false;
-
-   return true;
-}
+	struct vs_plane *vs_plane = to_vs_plane(plane);
+	int i;
 
+	for(i = 0; i < vs_plane->info->num_modifiers; i++) {
+		if (vs_plane->info->modifiers[i] == modifier)
+			break;
+	}
+	if (i && i == vs_plane->info->num_modifiers)
+		return false;
+
+	for(i = 0; i < vs_plane->info->num_formats; i++) {
+		if (vs_plane->info->formats[i] == format)
+			return true;
+	}
+	return false;
+}
 
 const struct drm_plane_funcs vs_plane_funcs = {
 	.update_plane		= drm_atomic_helper_update_plane,
@@ -234,7 +228,7 @@ const struct drm_plane_funcs vs_plane_funcs = {
 	.atomic_destroy_state	= vs_plane_atomic_destroy_state,
 	.atomic_set_property	= vs_plane_atomic_set_property,
 	.atomic_get_property	= vs_plane_atomic_get_property,
-	.format_mod_supported	= vs_format_mod_supported,
+	.format_mod_supported   = vs_plane_format_mod_supported,
 };
 
 static unsigned char vs_get_plane_number(struct drm_framebuffer *fb)
@@ -430,6 +424,8 @@ struct vs_plane *vs_plane_create(struct drm_device *drm_dev,
 	if (!plane)
 		return NULL;
 
+	plane->info = info;
+
 	ret = drm_universal_plane_init(drm_dev, &plane->base, possible_crtcs,
 				&vs_plane_funcs, info->formats,
 				info->num_formats, info->modifiers, info->type,
diff --git a/drivers/gpu/drm/verisilicon/vs_plane.h b/drivers/gpu/drm/verisilicon/vs_plane.h
index 38873d2cf..e2a71dfde 100644
--- a/drivers/gpu/drm/verisilicon/vs_plane.h
+++ b/drivers/gpu/drm/verisilicon/vs_plane.h
@@ -50,6 +50,7 @@ struct vs_plane {
 	struct drm_plane base;
 	u8 id;
 	dma_addr_t dma_addr[MAX_NUM_PLANES];
+	struct vs_plane_info *info;
 
 	struct drm_property *degamma_mode;
 	struct drm_property *watermark_prop;
-- 
2.46.0


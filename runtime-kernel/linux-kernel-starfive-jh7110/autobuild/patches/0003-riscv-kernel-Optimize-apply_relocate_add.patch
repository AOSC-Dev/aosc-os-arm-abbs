From c4ca9efb03b3769b1ff907d6df20c134d9330958 Mon Sep 17 00:00:00 2001
From: "xiaoguang.xing" <xiaoguang.xing@sophgo.com>
Date: Thu, 16 Feb 2023 11:16:00 +0800
Subject: [PATCH] riscv: kernel: Optimize apply_relocate_add()

---
 arch/riscv/kernel/module.c | 83 ++++++++++++++++++++++++--------------
 1 file changed, 53 insertions(+), 30 deletions(-)

diff --git a/arch/riscv/kernel/module.c b/arch/riscv/kernel/module.c
index df4f6fec5..ced5a09ab 100644
--- a/arch/riscv/kernel/module.c
+++ b/arch/riscv/kernel/module.c
@@ -337,6 +337,45 @@ static int (*reloc_handlers_rela[]) (struct module *me, u32 *location,
 	[R_RISCV_SUB64]			= apply_r_riscv_sub64_rela,
 };
 
+static inline unsigned int apply_calc_pcrel_lo12(Elf_Shdr *sechdrs,
+			Elf_Rela *rel, Elf_Sym *sym, unsigned int idx,
+			unsigned int symindex, unsigned int relsec,
+			struct module *me, Elf_Addr *v)
+{
+	unsigned long hi20_loc =
+		sechdrs[sechdrs[relsec].sh_info].sh_addr
+		+ rel[idx].r_offset;
+	u32 hi20_type = ELF_RISCV_R_TYPE(rel[idx].r_info);
+	unsigned int found = 0;
+
+	/* Find the corresponding HI20 relocation entry */
+	if (hi20_loc == sym->st_value
+	    && (hi20_type == R_RISCV_PCREL_HI20
+		|| hi20_type == R_RISCV_GOT_HI20)) {
+		s32 hi20, lo12;
+		Elf_Sym *hi20_sym =
+			(Elf_Sym *)sechdrs[symindex].sh_addr
+			+ ELF_RISCV_R_SYM(rel[idx].r_info);
+		unsigned long hi20_sym_val =
+			hi20_sym->st_value + rel[idx].r_addend;
+
+		/* Calculate lo12 */
+		size_t offset = hi20_sym_val - hi20_loc;
+		if (IS_ENABLED(CONFIG_MODULE_SECTIONS)
+		    && hi20_type == R_RISCV_GOT_HI20) {
+			offset = module_emit_got_entry(me, hi20_sym_val);
+			offset = offset - hi20_loc;
+		}
+		hi20 = (offset + 0x800) & 0xfffff000;
+		lo12 = offset - hi20;
+		*v = (Elf_Addr)lo12;
+
+		found = 1;
+	}
+
+	return found;
+}
+
 int apply_relocate_add(Elf_Shdr *sechdrs, const char *strtab,
 		       unsigned int symindex, unsigned int relsec,
 		       struct module *me)
@@ -385,40 +424,24 @@ int apply_relocate_add(Elf_Shdr *sechdrs, const char *strtab,
 
 		if (type == R_RISCV_PCREL_LO12_I || type == R_RISCV_PCREL_LO12_S) {
 			unsigned int j;
+			unsigned int found = 0;
 
-			for (j = 0; j < sechdrs[relsec].sh_size / sizeof(*rel); j++) {
-				unsigned long hi20_loc =
-					sechdrs[sechdrs[relsec].sh_info].sh_addr
-					+ rel[j].r_offset;
-				u32 hi20_type = ELF_RISCV_R_TYPE(rel[j].r_info);
-
-				/* Find the corresponding HI20 relocation entry */
-				if (hi20_loc == sym->st_value
-				    && (hi20_type == R_RISCV_PCREL_HI20
-					|| hi20_type == R_RISCV_GOT_HI20)) {
-					s32 hi20, lo12;
-					Elf_Sym *hi20_sym =
-						(Elf_Sym *)sechdrs[symindex].sh_addr
-						+ ELF_RISCV_R_SYM(rel[j].r_info);
-					unsigned long hi20_sym_val =
-						hi20_sym->st_value
-						+ rel[j].r_addend;
-
-					/* Calculate lo12 */
-					size_t offset = hi20_sym_val - hi20_loc;
-					if (IS_ENABLED(CONFIG_MODULE_SECTIONS)
-					    && hi20_type == R_RISCV_GOT_HI20) {
-						offset = module_emit_got_entry(
-							 me, hi20_sym_val);
-						offset = offset - hi20_loc;
-					}
-					hi20 = (offset + 0x800) & 0xfffff000;
-					lo12 = offset - hi20;
-					v = lo12;
+			if (i > 0) {
+				j  = i - 1;
+				found = apply_calc_pcrel_lo12(sechdrs, rel, sym, j,
+							symindex, relsec, me, &v);
+			}
 
-					break;
+			if (found == 0) {
+				for (j = 0; j < sechdrs[relsec].sh_size/sizeof(*rel); j++) {
+					found = apply_calc_pcrel_lo12(sechdrs, rel, sym,
+							j, symindex, relsec, me, &v);
+					if (found) {
+						break;
+					}
 				}
 			}
+
 			if (j == sechdrs[relsec].sh_size / sizeof(*rel)) {
 				pr_err(
 				  "%s: Can not find HI20 relocation information\n",
-- 
2.46.0


From 1a4d98380c3d677c58ea9766d2dc61c870712ab9 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Thu, 28 Sep 2023 12:13:43 +0800
Subject: [PATCH] gsgpu: Adapt to dma_resv API changes

---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c         |  4 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     | 42 +++++++-------------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c       |  8 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c         |  4 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h |  2 -
 5 files changed, 23 insertions(+), 37 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
index 4d9bb87efa02..ef2bb83aec07 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
@@ -22,7 +22,7 @@ static int gsgpu_cs_user_fence_chunk(struct gsgpu_cs_parser *p,
 	p->uf_entry.robj = gsgpu_bo_ref(gem_to_gsgpu_bo(gobj));
 	p->uf_entry.priority = 0;
 	p->uf_entry.tv.bo = &p->uf_entry.robj->tbo;
-	p->uf_entry.tv.shared = true;
+	p->uf_entry.tv.num_shared = 3;
 
 	drm_gem_object_put_unlocked(gobj);
 
@@ -797,7 +797,7 @@ static int gsgpu_cs_ib_vm_chunk(struct gsgpu_device *adev,
 		if (r)
 			return r;
 
-		r = dma_resv_reserve_shared(vm->root.base.bo->tbo.base.resv);
+		r = dma_resv_reserve_fences(vm->root.base.bo->tbo.base.resv, 1);
 		if (r)
 			return r;
 	}
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index 6e28bb2352e2..8333e2a35289 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -592,7 +592,7 @@ int gsgpu_bo_restore_from_shadow(struct gsgpu_device *adev,
 	bo_addr = gsgpu_bo_gpu_offset(bo);
 	shadow_addr = gsgpu_bo_gpu_offset(bo->shadow);
 
-	r = dma_resv_reserve_shared(bo->tbo.base.resv);
+	r = dma_resv_reserve_fences(bo->tbo.base.resv, 1);
 	if (r)
 		goto err;
 
@@ -625,6 +625,11 @@ int gsgpu_bo_kmap(struct gsgpu_bo *bo, void **ptr)
 	if (bo->flags & GSGPU_GEM_CREATE_NO_CPU_ACCESS)
 		return -EPERM;
 
+	r = dma_resv_wait_timeout(bo->tbo.base.resv, DMA_RESV_USAGE_KERNEL,
+				  false, MAX_SCHEDULE_TIMEOUT);
+	if (r < 0)
+		return r;
+
 	kptr = gsgpu_bo_kptr(bo);
 	if (kptr) {
 		if (ptr)
@@ -632,11 +637,6 @@ int gsgpu_bo_kmap(struct gsgpu_bo *bo, void **ptr)
 		return 0;
 	}
 
-	r = dma_resv_wait_timeout_rcu(bo->tbo.base.resv, false, false,
-						MAX_SCHEDULE_TIMEOUT);
-	if (r < 0)
-		return r;
-
 	r = ttm_bo_kmap(&bo->tbo, 0, bo->tbo.ttm->num_pages, &bo->kmap);
 	if (r)
 		return r;
@@ -932,22 +932,6 @@ void gsgpu_bo_fini(struct gsgpu_device *adev)
 	arch_io_free_memtype_wc(adev->gmc.aper_base, adev->gmc.aper_size);
 }
 
-/**
- * gsgpu_bo_fbdev_mmap - mmap fbdev memory
- * @bo: &gsgpu_bo buffer object
- * @vma: vma as input from the fbdev mmap method
- *
- * Calls ttm_fbdev_mmap() to mmap fbdev memory if it is backed by a bo.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
- */
-int gsgpu_bo_fbdev_mmap(struct gsgpu_bo *bo,
-			     struct vm_area_struct *vma)
-{
-	return ttm_fbdev_mmap(vma, &bo->tbo);
-}
-
 /**
  * gsgpu_bo_set_tiling_flags - set tiling flags
  * @bo: &gsgpu_bo buffer object
@@ -1173,14 +1157,18 @@ vm_fault_t gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
  *
  */
 void gsgpu_bo_fence(struct gsgpu_bo *bo, struct dma_fence *fence,
-		     bool shared)
+		    bool shared)
 {
 	struct dma_resv *resv = bo->tbo.base.resv;
+	int r = dma_resv_reserve_fences(resv, 1);
+	if (r) {
+		/* As last resort on OOM we block for the fence */
+		dma_fence_wait(fence, false);
+		return;
+	}
 
-	if (shared)
-		dma_resv_add_shared_fence(resv, fence);
-	else
-		dma_resv_add_excl_fence(resv, fence);
+	dma_resv_add_fence(resv, fence, shared ? DMA_RESV_USAGE_READ :
+			   DMA_RESV_USAGE_WRITE);
 }
 
 /**
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c
index 21b66d2bd6da..88939b45acc4 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c
@@ -153,9 +153,9 @@ int gsgpu_sync_fence(struct gsgpu_device *adev, struct gsgpu_sync *sync,
  * Sync to the fence
  */
 int gsgpu_sync_resv(struct gsgpu_device *adev,
-		     struct gsgpu_sync *sync,
-		     struct dma_resv *resv,
-		     void *owner, bool explicit_sync)
+		    struct gsgpu_sync *sync,
+		    struct dma_resv *resv,
+		    void *owner, bool explicit_sync)
 {
 	struct dma_resv_list *flist;
 	struct dma_fence *f;
@@ -167,7 +167,7 @@ int gsgpu_sync_resv(struct gsgpu_device *adev,
 		return -EINVAL;
 
 	/* always sync to the exclusive fence */
-	f = dma_resv_get_excl(resv);
+	f = dma_resv_get_(resv);
 	r = gsgpu_sync_fence(adev, sync, f, false);
 
 	flist = dma_resv_get_list(resv);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
index 8e73c9aa162c..5346e13fb1c8 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
@@ -348,7 +348,7 @@ static int gsgpu_vm_clear_bo(struct gsgpu_device *ldev,
 
 	ring = container_of(vm->entity.rq->sched, struct gsgpu_ring, sched);
 
-	r = dma_resv_reserve_shared(bo->tbo.base.resv);
+	r = dma_resv_reserve_fences(bo->tbo.base.resv, 1);
 	if (r)
 		return r;
 
@@ -1299,7 +1299,7 @@ static int gsgpu_vm_bo_update_mapping(struct gsgpu_device *ldev,
 	if (r)
 		goto error_free;
 
-	r = dma_resv_reserve_shared(vm->root.base.bo->tbo.base.resv);
+	r = dma_resv_reserve_fences(vm->root.base.bo->tbo.base.resv, 1);
 	if (r)
 		goto error_free;
 
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index e2a138b0ec10..313aed3e8bb5 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -221,8 +221,6 @@ int gsgpu_bo_evict_vram(struct gsgpu_device *adev);
 int gsgpu_bo_init(struct gsgpu_device *adev);
 int gsgpu_bo_late_init(struct gsgpu_device *adev);
 void gsgpu_bo_fini(struct gsgpu_device *adev);
-int gsgpu_bo_fbdev_mmap(struct gsgpu_bo *bo,
-				struct vm_area_struct *vma);
 int gsgpu_bo_set_tiling_flags(struct gsgpu_bo *bo, u64 tiling_flags);
 void gsgpu_bo_get_tiling_flags(struct gsgpu_bo *bo, u64 *tiling_flags);
 int gsgpu_bo_set_metadata (struct gsgpu_bo *bo, void *metadata,
-- 
2.39.1


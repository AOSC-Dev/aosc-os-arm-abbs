From d9f7f62b5290d84b1698aae785e2b2b4aa61354f Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Wed, 1 Nov 2023 17:00:16 +0800
Subject: [PATCH] gsgpu: remove gsgpu_bo::prime_shared_count

This member was added to distinguish internal vs dma-buf-imported
shared fences. Now that the dma_resv rework is done (see commit
8c505bdc9c8b, 644704740b and 047a1b877ed4), we do not need this
any more. Simply remove the member and its related fence conversion
logic.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c    |  1 -
 drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c         |  5 ++
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c        |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c      | 84 --------------------
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h |  1 -
 6 files changed, 7 insertions(+), 88 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c
index c21278be9320..f95973dfb44c 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c
@@ -82,7 +82,6 @@ int gsgpu_bo_list_create(struct gsgpu_device *adev, struct drm_file *filp,
 		entry->priority = min(info[i].bo_priority,
 				      GSGPU_BO_LIST_MAX_PRIORITY);
 		entry->tv.bo = &entry->robj->tbo;
-		entry->tv.num_shared = !entry->robj->prime_shared_count;
 
 		total_size += gsgpu_bo_size(entry->robj);
 		trace_gsgpu_bo_list_set(list, entry->robj);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
index 1c9e20c5eeca..8c237d947c18 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
@@ -1073,6 +1073,11 @@ static int gsgpu_cs_submit(struct gsgpu_cs_parser *p,
 	ring = to_gsgpu_ring(entity->rq->sched);
 	gsgpu_ring_priority_get(ring, priority);
 
+	/* Make sure all BOs are remembered as writers */
+	gsgpu_bo_list_for_each_entry(e, p->bo_list) {
+		e->tv.num_shared = 0;
+	}
+
 	ttm_eu_fence_buffer_objects(&p->ticket, &p->validated, p->fence);
 	mutex_unlock(&p->adev->notifier_lock);
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
index 8758bc949f2f..490ed5c87afc 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
@@ -757,7 +757,7 @@ int gsgpu_gem_op_ioctl(struct drm_device *dev, void *data,
 		break;
 	}
 	case GSGPU_GEM_OP_SET_PLACEMENT:
-		if (robj->prime_shared_count && (args->value & GSGPU_GEM_DOMAIN_VRAM)) {
+		if (robj->tbo.base.import_attach && (args->value & GSGPU_GEM_DOMAIN_VRAM)) {
 			r = -EINVAL;
 			gsgpu_bo_unreserve(robj);
 			break;
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index 1b7743bd60c6..81db60dbd53c 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -751,7 +751,7 @@ int gsgpu_bo_pin_restricted(struct gsgpu_bo *bo, u32 domain,
 		return -EINVAL;
 
 	/* A shared bo cannot be migrated to VRAM */
-	if (bo->prime_shared_count) {
+	if (bo->tbo.base.import_attach) {
 		if (domain & GSGPU_GEM_DOMAIN_GTT)
 			domain = GSGPU_GEM_DOMAIN_GTT;
 		else
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
index 88469ebef257..04a9372bb272 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
@@ -62,8 +62,6 @@ gsgpu_gem_prime_import_sg_table(struct drm_device *dev,
 	bo->tbo.ttm->sg = sg;
 	bo->allowed_domains = GSGPU_GEM_DOMAIN_GTT;
 	bo->preferred_domains = GSGPU_GEM_DOMAIN_GTT;
-	if (attach->dmabuf->ops != &gsgpu_dmabuf_ops)
-		bo->prime_shared_count = 1;
 
 	ww_mutex_unlock(&resv->lock);
 	bo->tbo.base.funcs = &gsgpu_gem_object_funcs;
@@ -74,55 +72,6 @@ gsgpu_gem_prime_import_sg_table(struct drm_device *dev,
 	return ERR_PTR(ret);
 }
 
-/* TODO: For AMDGPU this was removed in
- * commit 8c505bdc9c8b955223b054e34a0be9c3d841cd20
- * Author: Christian KÃ¶nig <christian.koenig@amd.com>
- * Date:   Wed Jun 9 13:51:36 2021 +0200
- *
- *    drm/amdgpu: rework dma_resv handling v3
- *
- * I don't think the Loongson graphics chip is even capable of sharing
- * memory with other GPUs through DMA-BUF so we will just do enough work
- * to make this compile. I don't think this code path is being hit at all.
- */
-static int __dma_resv_make_exclusive(struct dma_resv *obj)
-{
-	struct dma_fence **fences;
-	unsigned int count;
-	int r;
-
-	r = dma_resv_get_fences(obj, DMA_RESV_USAGE_READ, &count, &fences);
-	if (r)
-		return r;
-
-	if (count == 0) {
-		/* Now that was unexpected. */
-	} else if (count == 1) {
-		dma_resv_add_fence(obj, fences[0], DMA_RESV_USAGE_WRITE);
-		dma_fence_put(fences[0]);
-		kfree(fences);
-	} else {
-		struct dma_fence_array *array;
-
-		array = dma_fence_array_create(count, fences,
-					       dma_fence_context_alloc(1), 0,
-					       false);
-		if (!array)
-			goto err_fences_put;
-
-		dma_resv_add_fence(obj, &array->base, DMA_RESV_USAGE_WRITE);
-		dma_fence_put(&array->base);
-	}
-
-	return 0;
-
-err_fences_put:
-	while (count--)
-		dma_fence_put(fences[count]);
-	kfree(fences);
-	return -ENOMEM;
-}
-
 /**
  * gsgpu_gem_map_attach - &dma_buf_ops.attach implementation
  * @dma_buf: shared DMA buffer
@@ -140,44 +89,14 @@ static int gsgpu_gem_map_attach(struct dma_buf *dma_buf,
 {
 	struct drm_gem_object *obj = dma_buf->priv;
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
-	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
 	long r;
 
 	r = drm_gem_map_attach(dma_buf, attach);
 	if (r)
 		return r;
 
-	r = gsgpu_bo_reserve(bo, false);
-	if (unlikely(r != 0))
-		goto error_detach;
-
-
-	if (attach->dev->driver != adev->dev->driver) {
-		/*
-		 * We only create shared fences for internal use, but importers
-		 * of the dmabuf rely on exclusive fences for implicitly
-		 * tracking write hazards. As any of the current fences may
-		 * correspond to a write, we need to convert all existing
-		 * fences on the reservation object into a single exclusive
-		 * fence.
-		 */
-		r = __dma_resv_make_exclusive(bo->tbo.base.resv);
-		if (r)
-			goto error_unreserve;
-	}
-
 	/* pin buffer into GTT */
 	r = gsgpu_bo_pin(bo, GSGPU_GEM_DOMAIN_GTT);
-	if (r)
-		goto error_unreserve;
-
-	if (attach->dev->driver != adev->dev->driver)
-		bo->prime_shared_count++;
-
-error_unreserve:
-	gsgpu_bo_unreserve(bo);
-
-error_detach:
 	if (r)
 		drm_gem_map_detach(dma_buf, attach);
 	return r;
@@ -196,7 +115,6 @@ static void gsgpu_gem_map_detach(struct dma_buf *dma_buf,
 {
 	struct drm_gem_object *obj = dma_buf->priv;
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
-	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
 	int ret = 0;
 
 	ret = gsgpu_bo_reserve(bo, true);
@@ -204,8 +122,6 @@ static void gsgpu_gem_map_detach(struct dma_buf *dma_buf,
 		goto error;
 
 	gsgpu_bo_unpin(bo);
-	if (attach->dev->driver != adev->dev->driver && bo->prime_shared_count)
-		bo->prime_shared_count--;
 	gsgpu_bo_unreserve(bo);
 
 error:
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index b2999e0eaf48..635cda9bb2ae 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -50,7 +50,6 @@ struct gsgpu_bo {
 	u64				metadata_flags;
 	void				*metadata;
 	u32				metadata_size;
-	unsigned			prime_shared_count;
 	/* list of all virtual address to which this bo is associated to */
 	struct list_head		va;
 	/* Constant after initialization */
-- 
2.43.0


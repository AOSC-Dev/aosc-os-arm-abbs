From 1bb065c9beff809deaf504b0db93cceb237969a4 Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhuacai@loongson.cn>
Date: Mon, 12 Apr 2021 11:30:39 +0800
Subject: [PATCH 16/43] LoongArch: Add HIGHMEM and FDT support for future

Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
---
 arch/loongarch/Kconfig                        |  18 ++
 arch/loongarch/Makefile                       |   8 +-
 arch/loongarch/boot/dts/Makefile              |   4 +-
 arch/loongarch/boot/dts/loongson/Makefile     |   4 +
 .../boot/dts/loongson/loongson3.dtsi          | 235 ++++++++++++++++++
 .../boot/dts/loongson/loongson3_ls7a.dts      | 159 ++++++++++++
 arch/loongarch/include/asm/fixmap.h           |  52 ++++
 arch/loongarch/include/asm/highmem.h          |  53 ++++
 arch/loongarch/mm/pgtable.c                   |   7 +
 9 files changed, 537 insertions(+), 3 deletions(-)
 create mode 100644 arch/loongarch/boot/dts/loongson/Makefile
 create mode 100644 arch/loongarch/boot/dts/loongson/loongson3.dtsi
 create mode 100644 arch/loongarch/boot/dts/loongson/loongson3_ls7a.dts
 create mode 100644 arch/loongarch/include/asm/highmem.h

diff --git a/arch/loongarch/Kconfig b/arch/loongarch/Kconfig
index 22c930d1e1..f0f21f1132 100644
--- a/arch/loongarch/Kconfig
+++ b/arch/loongarch/Kconfig
@@ -143,10 +143,12 @@ config LOONGARCH
 	select RTC_LIB
 	select SMP
 	select SPARSE_IRQ
+	select SYS_SUPPORTS_HIGHMEM
 	select SYSCTL_ARCH_UNALIGN_ALLOW
 	select SYSCTL_ARCH_UNALIGN_NO_WARN
 	select SYSCTL_EXCEPTION_TRACE
 	select SWIOTLB
+	select BUILTIN_DTB
 	select TRACE_IRQFLAGS_SUPPORT
 	select USE_PERCPU_NUMA_NODE_ID
 	select USER_STACKTRACE_SUPPORT
@@ -192,6 +194,19 @@ config LOONGARCH_CRC32_SUPPORT
 	bool
 	default y
 
+#
+# - Highmem only makes sense for the 32-bit kernel.
+# - We use SYS_SUPPORTS_HIGHMEM to offer highmem only for systems where we
+#   know they might have memory configurations that could make use of highmem
+#   support.
+#
+config HIGHMEM
+	bool "High Memory Support"
+	depends on 32BIT && CPU_SUPPORTS_HIGHMEM && SYS_SUPPORTS_HIGHMEM
+
+config SYS_SUPPORTS_HIGHMEM
+	bool
+
 # MACH_LOONGSON32 and MACH_LOONGSON64 are deliberately carried over from the
 # MIPS Loongson code, to preserve Loongson-specific code paths in drivers that
 # are shared between architectures, and specifically expecting the symbols.
@@ -599,6 +614,9 @@ config SECCOMP
 
 endmenu
 
+config BUILTIN_DTB
+	bool
+
 config ARCH_SELECT_MEMORY_MODEL
 	def_bool y
 
diff --git a/arch/loongarch/Makefile b/arch/loongarch/Makefile
index 7e745550ae..6ccaf98927 100644
--- a/arch/loongarch/Makefile
+++ b/arch/loongarch/Makefile
@@ -6,6 +6,7 @@
 boot	:= arch/loongarch/boot
 
 KBUILD_DEFCONFIG := loongson3_defconfig
+KBUILD_DTBS      := dtbs
 
 image-name-y			:= vmlinux
 image-name-$(CONFIG_EFI_ZBOOT)	:= vmlinuz
@@ -130,11 +131,14 @@ PHONY += vdso_install
 vdso_install:
 	$(Q)$(MAKE) $(build)=arch/loongarch/vdso $@
 
-all:	$(notdir $(KBUILD_IMAGE))
+all:	$(notdir $(KBUILD_IMAGE)) $(KBUILD_DTBS)
 
 vmlinux.elf vmlinux.efi vmlinuz.efi: vmlinux
 	$(Q)$(MAKE) $(build)=$(boot) $(bootvars-y) $(boot)/$@
 
+# device-trees
+core-y += arch/loongarch/boot/dts/
+
 install:
 	$(Q)install -D -m 755 $(KBUILD_IMAGE) $(INSTALL_PATH)/$(image-name-y)-$(KERNELRELEASE)
 	$(Q)install -D -m 644 .config $(INSTALL_PATH)/config-$(KERNELRELEASE)
@@ -142,5 +146,7 @@ install:
 
 define archhelp
 	echo '  install              - install kernel into $(INSTALL_PATH)'
+	echo '  dtbs                 - Device-tree blobs for enabled boards'
+	echo '  dtbs_install         - Install dtbs to $(INSTALL_DTBS_PATH)'
 	echo
 endef
diff --git a/arch/loongarch/boot/dts/Makefile b/arch/loongarch/boot/dts/Makefile
index 5f1f55e911..8bfbba1746 100644
--- a/arch/loongarch/boot/dts/Makefile
+++ b/arch/loongarch/boot/dts/Makefile
@@ -1,4 +1,4 @@
 # SPDX-License-Identifier: GPL-2.0-only
-dtstree	:= $(srctree)/$(src)
+subdir-y	+= loongson
 
-dtb-y := $(patsubst $(dtstree)/%.dts,%.dtb, $(wildcard $(dtstree)/*.dts))
+obj-$(CONFIG_BUILTIN_DTB)	:= $(addsuffix /, $(subdir-y))
diff --git a/arch/loongarch/boot/dts/loongson/Makefile b/arch/loongarch/boot/dts/loongson/Makefile
new file mode 100644
index 0000000000..9def5f6ee9
--- /dev/null
+++ b/arch/loongarch/boot/dts/loongson/Makefile
@@ -0,0 +1,4 @@
+# SPDX-License-Identifier: GPL-2.0
+dtb-$(CONFIG_CPU_LOONGSON64)	+= loongson3_ls7a.dtb
+
+obj-y				+= $(patsubst %.dtb, %.dtb.o, $(dtb-y))
diff --git a/arch/loongarch/boot/dts/loongson/loongson3.dtsi b/arch/loongarch/boot/dts/loongson/loongson3.dtsi
new file mode 100644
index 0000000000..2f985a7dda
--- /dev/null
+++ b/arch/loongarch/boot/dts/loongson/loongson3.dtsi
@@ -0,0 +1,235 @@
+// SPDX-License-Identifier: GPL-2.0
+/ {
+	/*
+	 * Loongson-3 may have as many as 4 nodes, each node has 4 cores.
+	 * Each core has its own pcache and cores in the same node share scache.
+	 */
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		cpu@0 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x0>;
+			l2-cache = <&vcache0>;
+			next-level-cache = <&scache0>;
+		};
+
+		cpu@1 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x1>;
+			l2-cache = <&vcache1>;
+			next-level-cache = <&scache0>;
+		};
+
+		cpu@2 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x2>;
+			l2-cache = <&vcache2>;
+			next-level-cache = <&scache0>;
+		};
+
+		cpu@3 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x3>;
+			l2-cache = <&vcache3>;
+			next-level-cache = <&scache0>;
+		};
+
+		cpu@4 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x4>;
+			l2-cache = <&vcache4>;
+			next-level-cache = <&scache1>;
+		};
+
+		cpu@5 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x5>;
+			l2-cache = <&vcache5>;
+			next-level-cache = <&scache1>;
+		};
+
+		cpu@6 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x6>;
+			l2-cache = <&vcache6>;
+			next-level-cache = <&scache1>;
+		};
+
+		cpu@7 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x7>;
+			l2-cache = <&vcache7>;
+			next-level-cache = <&scache1>;
+		};
+
+		cpu@8 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x8>;
+			l2-cache = <&vcache8>;
+			next-level-cache = <&scache2>;
+		};
+
+		cpu@9 {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0x9>;
+			l2-cache = <&vcache9>;
+			next-level-cache = <&scache2>;
+		};
+
+		cpu@a {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0xa>;
+			l2-cache = <&vcachea>;
+			next-level-cache = <&scache2>;
+		};
+
+		cpu@b {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0xb>;
+			l2-cache = <&vcacheb>;
+			next-level-cache = <&scache2>;
+		};
+
+		cpu@c {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0xc>;
+			l2-cache = <&vcachec>;
+			next-level-cache = <&scache3>;
+		};
+
+		cpu@d {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0xd>;
+			l2-cache = <&vcached>;
+			next-level-cache = <&scache3>;
+		};
+
+		cpu@e {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0xe>;
+			l2-cache = <&vcachee>;
+			next-level-cache = <&scache3>;
+		};
+
+		cpu@f {
+			compatible = "loongson,loongson3";
+			device_type = "cpu";
+			reg = <0xf>;
+			l2-cache = <&vcachef>;
+			next-level-cache = <&scache3>;
+		};
+
+		vcache0: l2-cache0 {
+			compatible = "cache";
+			next-level-cache = <&scache0>;
+		};
+
+		vcache1: l2-cache1 {
+			compatible = "cache";
+			next-level-cache = <&scache0>;
+		};
+
+		vcache2: l2-cache2 {
+			compatible = "cache";
+			next-level-cache = <&scache0>;
+		};
+
+		vcache3: l2-cache3 {
+			compatible = "cache";
+			next-level-cache = <&scache0>;
+		};
+
+		vcache4: l2-cache4 {
+			compatible = "cache";
+			next-level-cache = <&scache1>;
+		};
+
+		vcache5: l2-cache5 {
+			compatible = "cache";
+			next-level-cache = <&scache1>;
+		};
+
+		vcache6: l2-cache6 {
+			compatible = "cahce";
+			next-level-cache = <&scache1>;
+		};
+
+		vcache7: l2-cache7 {
+			compatible = "cache";
+			next-level-cache = <&scache1>;
+		};
+
+		vcache8: l2-cache8 {
+			compatible = "cache";
+			next-level-cache = <&scache2>;
+		};
+
+		vcache9: l2-cache9 {
+			compatible = "cache";
+			next-level-cache = <&scache2>;
+		};
+
+		vcachea: l2-cachea {
+			compatible = "cache";
+			next-level-cache = <&scache2>;
+		};
+
+		vcacheb: l2-cacheb {
+			compatible = "cache";
+			next-level-cache = <&scache2>;
+		};
+
+		vcachec: l2-cachec {
+			compatible = "cache";
+			next-level-cache = <&scache3>;
+		};
+
+		vcached: l2-cached {
+			compatible = "cache";
+			next-level-cache = <&scache3>;
+		};
+
+		vcachee: l2-cachee {
+			compatible = "cache";
+			next-level-cache = <&scache3>;
+		};
+
+		vcachef: l2-cachef {
+			compatible = "cache";
+			next-level-cache = <&scache3>;
+		};
+
+		scache0: l3-cache0 {
+			compatible = "cache";
+		};
+
+		scache1: l3-cache1 {
+			compatible = "cache";
+		};
+
+		scache2: l3-cache2 {
+			compatible = "cache";
+		};
+
+		scache3: l3-cache3 {
+			compatible = "cache";
+		};
+	};
+};
diff --git a/arch/loongarch/boot/dts/loongson/loongson3_ls7a.dts b/arch/loongarch/boot/dts/loongson/loongson3_ls7a.dts
new file mode 100644
index 0000000000..f9fa2d5d20
--- /dev/null
+++ b/arch/loongarch/boot/dts/loongson/loongson3_ls7a.dts
@@ -0,0 +1,159 @@
+/dts-v1/;
+#include "loongson3.dtsi"
+/ {
+	model = "loongson,generic";
+	compatible = "loongson,loongson3";
+	#address-cells = <2>;
+	#size-cells = <2>;
+
+	memory {
+		name = "memory";
+		device_type = "memory";
+	};
+
+	cpuic: interrupt-controller {
+		compatible = "loongson,cpu-interrupt-controller";
+		interrupt-controller;
+		#interrupt-cells = <1>;
+	};
+
+	platic: interrupt-controller@1bd00040 {
+		compatible = "loongson,ls7a-interrupt-controller";
+		interrupt-controller;
+		#interrupt-cells = <1>;
+		interrupts = <3>;
+		interrupt-parent = <&cpuic>;
+	};
+
+	aliases {
+		i2c0 = &i2c0;
+		i2c1 = &i2c1;
+		i2c2 = &i2c2;
+		i2c3 = &i2c3;
+		i2c4 = &i2c4;
+		i2c5 = &i2c5;
+	};
+
+	platform {
+		compatible = "loongson,nbus", "simple-bus";
+		#address-cells = <2>;
+		#size-cells = <1>;
+		enable-lpc-irq;
+		ranges = <0x000 0x00000000 0x000 0x00000000 0x20000000
+			  0x000 0x40000000 0x000 0x40000000 0x40000000
+			  0xe00 0x00000000 0xe00 0x00000000 0x80000000>;
+
+		uart0: serial@10080000 {
+			device_type = "serial";
+			compatible = "ns16550,loongson";
+			reg = <0 0x10080000 0x100>;
+			clock-frequency = <50000000>;
+			interrupts = <72>;
+			interrupt-parent = <&platic>;
+			no-loopback-test;
+		};
+
+		gpio: gpio@100e0000 {
+			compatible = "loongson,ls7a-gpio";
+			reg = <0 0x100e0000 0xc00>;
+			gpio-controller;
+			#gpio-cells = <2>;
+			ngpios = <57>;
+			conf_offset = <0x800>;
+			out_offset = <0x900>;
+			in_offset = <0xa00>;
+			gpio_base = <16>;
+			interrupts = <124>;
+			interrupt-parent = <&platic>;
+		};
+
+		i2c0: i2c@10090000 {
+			compatible = "loongson,ls7a-i2c";
+			reg = <0 0x10090000 0x8>;
+			interrupts = <73>;
+			interrupt-parent = <&platic>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
+		i2c1: i2c@10090100 {
+			compatible = "loongson,ls7a-i2c";
+			reg = <0 0x10090100 0x8>;
+			interrupts = <73>;
+			interrupt-parent = <&platic>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
+		i2c2: i2c@10090200 {
+			compatible = "loongson,ls7a-i2c";
+			reg = <0 0x10090200 0x8>;
+			interrupts = <73>;
+			interrupt-parent = <&platic>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
+		i2c3: i2c@10090300 {
+			compatible = "loongson,ls7a-i2c";
+			reg = <0 0x10090300 0x8>;
+			interrupts = <73>;
+			interrupt-parent = <&platic>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
+		i2c4: i2c@10090400 {
+			compatible = "loongson,ls7a-i2c";
+			reg = <0 0x10090400 0x8>;
+			interrupts = <73>;
+			interrupt-parent = <&platic>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
+		i2c5: i2c@10090500 {
+			compatible = "loongson,ls7a-i2c";
+			reg = <0 0x10090500 0x8>;
+			interrupts = <73>;
+			interrupt-parent = <&platic>;
+			#address-cells = <1>;
+			#size-cells = <0>;
+		};
+
+		rtc0: rtc@100d0100 {
+			compatible = "loongson,ls7a-rtc";
+			reg = <0 0x100d0100 0x100>;
+			interrupts = <116>;
+			interrupt-parent = <&platic>;
+		};
+
+                pwm0: pwm@100a0000 {
+                        compatible = "loongson,ls7a-pwm";
+                        reg = <0 0x100a0000 0x10>;
+                        interrupts = <88>;
+                        interrupt-parent = <&platic>;
+                };
+
+                pwm1: pwm@100a0100 {
+                        compatible = "loongson,ls7a-pwm";
+                        reg = <0 0x100a0100 0x10>;
+                        interrupts = <89>;
+                        interrupt-parent = <&platic>;
+                };
+
+                pwm2: pwm@100a0200 {
+                        compatible = "loongson,ls7a-pwm";
+                        reg = <0 0x100a0200 0x10>;
+                        interrupts = <90>;
+                        interrupt-parent = <&platic>;
+                };
+
+                pwm3: pwm@100a0300 {
+                        compatible = "loongson,ls7a-pwm";
+                        reg = <0 0x100a0300 0x10>;
+                        interrupts = <91>;
+                        interrupt-parent = <&platic>;
+                };
+	};
+};
diff --git a/arch/loongarch/include/asm/fixmap.h b/arch/loongarch/include/asm/fixmap.h
index d2e55ae55b..9771d0712e 100644
--- a/arch/loongarch/include/asm/fixmap.h
+++ b/arch/loongarch/include/asm/fixmap.h
@@ -8,14 +8,59 @@
 #ifndef _ASM_FIXMAP_H
 #define _ASM_FIXMAP_H
 
+#ifdef CONFIG_HIGHMEM
+#include <linux/threads.h>
+#include <asm/kmap_types.h>
+#endif
+
+/*
+ * Here we define all the compile-time 'special' virtual
+ * addresses. The point is to have a constant address at
+ * compile time, but to set the physical address only
+ * in the boot process. We allocate these special  addresses
+ * from the end of virtual memory (0xfffff000) backwards.
+ * Also this lets us do fail-safe vmalloc(), we
+ * can guarantee that these special addresses and
+ * vmalloc()-ed addresses never overlap.
+ *
+ * these 'compile-time allocated' memory buffers are
+ * fixed-size 4k pages. (or larger if used with an increment
+ * highger than 1) use fixmap_set(idx,phys) to associate
+ * physical memory with fixmap indices.
+ *
+ * TLB entries of such buffers will not be flushed across
+ * task switches.
+ */
+
 #define NR_FIX_BTMAPS 64
 
+/*
+ * on UP currently we will have no trace of the fixmap mechanizm,
+ * no page table allocations, etc. This might change in the
+ * future, say framebuffers for the console driver(s) could be
+ * fix-mapped?
+ */
 enum fixed_addresses {
 	FIX_HOLE,
+#define FIX_N_COLOURS 8
+	FIX_CMAP_BEGIN,
+	FIX_CMAP_END = FIX_CMAP_BEGIN + (FIX_N_COLOURS * 2),
+#ifdef CONFIG_HIGHMEM
+	/* reserved pte's for temporary kernel mappings */
+	FIX_KMAP_BEGIN = FIX_CMAP_END + 1,
+	FIX_KMAP_END = FIX_KMAP_BEGIN+(KM_TYPE_NR*NR_CPUS)-1,
+#endif
 	FIX_EARLYCON_MEM_BASE,
 	__end_of_fixed_addresses
 };
 
+/*
+ * used by vmalloc.c.
+ *
+ * Leave one empty page between vmalloc'ed areas and
+ * the start of the fixmap, and leave one page empty
+ * at the top of mem..
+ */
 #define FIXADDR_SIZE	(__end_of_fixed_addresses << PAGE_SHIFT)
 #define FIXADDR_START	(FIXADDR_TOP - FIXADDR_SIZE)
 #define FIXMAP_PAGE_IO	PAGE_KERNEL_SUC
@@ -25,4 +70,11 @@ extern void __set_fixmap(enum fixed_addresses idx,
 
 #include <asm-generic/fixmap.h>
 
+/*
+ * Called from pgtable_init()
+ */
+extern void fixrange_init(unsigned long start, unsigned long end,
+	pgd_t *pgd_base);
+
+
 #endif
diff --git a/arch/loongarch/include/asm/highmem.h b/arch/loongarch/include/asm/highmem.h
new file mode 100644
index 0000000000..c555be1008
--- /dev/null
+++ b/arch/loongarch/include/asm/highmem.h
@@ -0,0 +1,53 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * highmem.h: virtual kernel memory mappings for high memory
+ *
+ * Used in CONFIG_HIGHMEM systems for memory pages which
+ * are not addressable by direct kernel virtual addresses.
+ *
+ * Copyright (C) 2020 Loongson Technology Co., Ltd.
+ */
+#ifndef _ASM_HIGHMEM_H
+#define _ASM_HIGHMEM_H
+
+#ifdef __KERNEL__
+
+#include <linux/bug.h>
+#include <linux/interrupt.h>
+#include <linux/uaccess.h>
+#include <asm/cpu-features.h>
+#include <asm/kmap_types.h>
+
+/* declarations for highmem.c */
+extern unsigned long highstart_pfn, highend_pfn;
+
+extern pte_t *pkmap_page_table;
+
+/*
+ * Right now we initialize only a single pte table. It can be extended
+ * easily, subsequent pte tables have to be allocated in one physical
+ * chunk of RAM.
+ */
+#define LAST_PKMAP 1024
+
+#define LAST_PKMAP_MASK (LAST_PKMAP-1)
+#define PKMAP_NR(virt)	((virt-PKMAP_BASE) >> PAGE_SHIFT)
+#define PKMAP_ADDR(nr)	(PKMAP_BASE + ((nr) << PAGE_SHIFT))
+
+extern void *kmap_high(struct page *page);
+extern void kunmap_high(struct page *page);
+
+extern void *kmap(struct page *page);
+extern void kunmap(struct page *page);
+extern void *kmap_atomic(struct page *page);
+extern void *kmap_atomic_pfn(unsigned long pfn);
+
+#define flush_cache_kmaps()	BUG_ON(cpu_has_dc_aliases)
+
+extern void kmap_init(void);
+
+#define kmap_prot PAGE_KERNEL
+
+#endif /* __KERNEL__ */
+
+#endif /* _ASM_HIGHMEM_H */
diff --git a/arch/loongarch/mm/pgtable.c b/arch/loongarch/mm/pgtable.c
index 36a6dc0148..c63dceb423 100644
--- a/arch/loongarch/mm/pgtable.c
+++ b/arch/loongarch/mm/pgtable.c
@@ -5,6 +5,7 @@
 #include <linux/init.h>
 #include <linux/export.h>
 #include <linux/mm.h>
+#include <asm/fixmap.h>
 #include <asm/pgalloc.h>
 #include <asm/pgtable.h>
 #include <asm/tlbflush.h>
@@ -121,6 +122,8 @@ void set_pmd_at(struct mm_struct *mm, unsigned long addr,
 
 void __init pagetable_init(void)
 {
+	unsigned long vaddr;
+
 	/* Initialize the entire pgd.  */
 	pgd_init(swapper_pg_dir);
 	pgd_init(invalid_pg_dir);
@@ -130,4 +133,8 @@ void __init pagetable_init(void)
 #ifndef __PAGETABLE_PMD_FOLDED
 	pmd_init(invalid_pmd_table);
 #endif
+	/*
+	 * Fixed mappings:
+	 */
+	vaddr = __fix_to_virt(__end_of_fixed_addresses - 1) & PMD_MASK;
 }
-- 
2.39.1


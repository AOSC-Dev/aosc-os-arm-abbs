From 7bf2f9f14c5a0a576482500121a1090df3315632 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Sat, 23 Sep 2023 15:36:17 +0800
Subject: [PATCH] gsgpu: Use ttm_resource_manager in lieu of
 ttm_mem_type_manager

Commit 9de59bc201496f28bb8835c2bcbae3ddb186b548 renames struct
ttm_mem_type_manager to ttm_resource_manager.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c  | 18 +++++++++---------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c   |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c      |  8 ++++----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c | 16 ++++++++--------
 drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h  | 12 ++++++------
 5 files changed, 28 insertions(+), 28 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c
index 7fa4d9653575..4af125f09766 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c
@@ -20,7 +20,7 @@ struct gsgpu_gtt_node {
  *
  * Allocate and initialize the GTT manager.
  */
-static int gsgpu_gtt_mgr_init(struct ttm_mem_type_manager *man,
+static int gsgpu_gtt_mgr_init(struct ttm_resource_manager *man,
 			       unsigned long p_size)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(man->bdev);
@@ -48,7 +48,7 @@ static int gsgpu_gtt_mgr_init(struct ttm_mem_type_manager *man,
  * Destroy and free the GTT manager, returns -EBUSY if ranges are still
  * allocated inside it.
  */
-static int gsgpu_gtt_mgr_fini(struct ttm_mem_type_manager *man)
+static int gsgpu_gtt_mgr_fini(struct ttm_resource_manager *man)
 {
 	struct gsgpu_gtt_mgr *mgr = man->priv;
 	spin_lock(&mgr->lock);
@@ -83,7 +83,7 @@ bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_mem_reg *mem)
  *
  * Allocate the address space for a node.
  */
-static int gsgpu_gtt_mgr_alloc(struct ttm_mem_type_manager *man,
+static int gsgpu_gtt_mgr_alloc(struct ttm_resource_manager *man,
 				struct ttm_buffer_object *tbo,
 				const struct ttm_place *place,
 				struct ttm_mem_reg *mem)
@@ -134,7 +134,7 @@ static int gsgpu_gtt_mgr_alloc(struct ttm_mem_type_manager *man,
  *
  * Dummy, allocate the node but no space for it yet.
  */
-static int gsgpu_gtt_mgr_new(struct ttm_mem_type_manager *man,
+static int gsgpu_gtt_mgr_new(struct ttm_resource_manager *man,
 			      struct ttm_buffer_object *tbo,
 			      const struct ttm_place *place,
 			      struct ttm_mem_reg *mem)
@@ -192,7 +192,7 @@ static int gsgpu_gtt_mgr_new(struct ttm_mem_type_manager *man,
  *
  * Free the allocated GTT again.
  */
-static void gsgpu_gtt_mgr_del(struct ttm_mem_type_manager *man,
+static void gsgpu_gtt_mgr_del(struct ttm_resource_manager *man,
 			       struct ttm_mem_reg *mem)
 {
 	struct gsgpu_gtt_mgr *mgr = man->priv;
@@ -218,7 +218,7 @@ static void gsgpu_gtt_mgr_del(struct ttm_mem_type_manager *man,
  *
  * Return how many bytes are used in the GTT domain
  */
-uint64_t gsgpu_gtt_mgr_usage(struct ttm_mem_type_manager *man)
+uint64_t gsgpu_gtt_mgr_usage(struct ttm_resource_manager *man)
 {
 	struct gsgpu_gtt_mgr *mgr = man->priv;
 	s64 result = man->size - atomic64_read(&mgr->available);
@@ -226,7 +226,7 @@ uint64_t gsgpu_gtt_mgr_usage(struct ttm_mem_type_manager *man)
 	return (result > 0 ? result : 0) * PAGE_SIZE;
 }
 
-int gsgpu_gtt_mgr_recover(struct ttm_mem_type_manager *man)
+int gsgpu_gtt_mgr_recover(struct ttm_resource_manager *man)
 {
 	struct gsgpu_gtt_mgr *mgr = man->priv;
 	struct gsgpu_gtt_node *node;
@@ -253,7 +253,7 @@ int gsgpu_gtt_mgr_recover(struct ttm_mem_type_manager *man)
  *
  * Dump the table content using printk.
  */
-static void gsgpu_gtt_mgr_debug(struct ttm_mem_type_manager *man,
+static void gsgpu_gtt_mgr_debug(struct ttm_resource_manager *man,
 				 struct drm_printer *printer)
 {
 	struct gsgpu_gtt_mgr *mgr = man->priv;
@@ -267,7 +267,7 @@ static void gsgpu_gtt_mgr_debug(struct ttm_mem_type_manager *man,
 		   gsgpu_gtt_mgr_usage(man) >> 20);
 }
 
-const struct ttm_mem_type_manager_func gsgpu_gtt_mgr_func = {
+const struct ttm_resource_manager_func gsgpu_gtt_mgr_func = {
 	.init = gsgpu_gtt_mgr_init,
 	.takedown = gsgpu_gtt_mgr_fini,
 	.get_node = gsgpu_gtt_mgr_new,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index f67d335bb0c2..9a395bc1027b 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -341,7 +341,7 @@ void gsgpu_bo_free_kernel(struct gsgpu_bo **bo, u64 *gpu_addr,
 static bool gsgpu_bo_validate_size(struct gsgpu_device *adev,
 					  unsigned long size, u32 domain)
 {
-	struct ttm_mem_type_manager *man = NULL;
+	struct ttm_resource_manager *man = NULL;
 
 	/*
 	 * If GTT is part of requested domains the check must succeed to
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
index 182058ab99ce..9431258b6273 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
@@ -50,7 +50,7 @@ static int gsgpu_invalidate_caches(struct ttm_device *bdev, uint32_t flags)
  * initialized.
  */
 static int gsgpu_init_mem_type(struct ttm_device *bdev, uint32_t type,
-				struct ttm_mem_type_manager *man)
+				struct ttm_resource_manager *man)
 {
 	struct gsgpu_device *adev;
 
@@ -582,7 +582,7 @@ static int gsgpu_bo_move(struct ttm_buffer_object *bo, bool evict,
  */
 static int gsgpu_ttm_io_mem_reserve(struct ttm_device *bdev, struct ttm_mem_reg *mem)
 {
-	struct ttm_mem_type_manager *man = &bdev->man[mem->mem_type];
+	struct ttm_resource_manager *man = &bdev->man[mem->mem_type];
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bdev);
 	struct drm_mm_node *mm_node = mem->mm_node;
 
@@ -1664,7 +1664,7 @@ void gsgpu_ttm_fini(struct gsgpu_device *adev)
  */
 void gsgpu_ttm_set_buffer_funcs_status(struct gsgpu_device *adev, bool enable)
 {
-	struct ttm_mem_type_manager *man = &adev->mman.bdev.man[TTM_PL_VRAM];
+	struct ttm_resource_manager *man = &adev->mman.bdev.man[TTM_PL_VRAM];
 	uint64_t size;
 	int r;
 
@@ -1951,7 +1951,7 @@ static int gsgpu_mm_dump_table(struct seq_file *m, void *data)
 	unsigned ttm_pl = *(int *)node->info_ent->data;
 	struct drm_device *dev = node->minor->dev;
 	struct gsgpu_device *adev = dev->dev_private;
-	struct ttm_mem_type_manager *man = &adev->mman.bdev.man[ttm_pl];
+	struct ttm_resource_manager *man = &adev->mman.bdev.man[ttm_pl];
 	struct drm_printer p = drm_seq_file_printer(m);
 
 	man->func->debug(man, &p);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
index 7261da8246a1..2469f86ef70e 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
@@ -16,7 +16,7 @@ struct gsgpu_vram_mgr {
  *
  * Allocate and initialize the VRAM manager.
  */
-static int gsgpu_vram_mgr_init(struct ttm_mem_type_manager *man,
+static int gsgpu_vram_mgr_init(struct ttm_resource_manager *man,
 				unsigned long p_size)
 {
 	struct gsgpu_vram_mgr *mgr;
@@ -39,7 +39,7 @@ static int gsgpu_vram_mgr_init(struct ttm_mem_type_manager *man,
  * Destroy and free the VRAM manager, returns -EBUSY if ranges are still
  * allocated inside it.
  */
-static int gsgpu_vram_mgr_fini(struct ttm_mem_type_manager *man)
+static int gsgpu_vram_mgr_fini(struct ttm_resource_manager *man)
 {
 	struct gsgpu_vram_mgr *mgr = man->priv;
 
@@ -110,7 +110,7 @@ u64 gsgpu_vram_mgr_bo_visible_size(struct gsgpu_bo *bo)
  *
  * Allocate VRAM for the given BO.
  */
-static int gsgpu_vram_mgr_new(struct ttm_mem_type_manager *man,
+static int gsgpu_vram_mgr_new(struct ttm_resource_manager *man,
 			       struct ttm_buffer_object *tbo,
 			       const struct ttm_place *place,
 			       struct ttm_mem_reg *mem)
@@ -209,7 +209,7 @@ static int gsgpu_vram_mgr_new(struct ttm_mem_type_manager *man,
  *
  * Free the allocated VRAM again.
  */
-static void gsgpu_vram_mgr_del(struct ttm_mem_type_manager *man,
+static void gsgpu_vram_mgr_del(struct ttm_resource_manager *man,
 				struct ttm_mem_reg *mem)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(man->bdev);
@@ -245,7 +245,7 @@ static void gsgpu_vram_mgr_del(struct ttm_mem_type_manager *man,
  *
  * Returns how many bytes are used in this domain.
  */
-uint64_t gsgpu_vram_mgr_usage(struct ttm_mem_type_manager *man)
+uint64_t gsgpu_vram_mgr_usage(struct ttm_resource_manager *man)
 {
 	struct gsgpu_vram_mgr *mgr = man->priv;
 
@@ -259,7 +259,7 @@ uint64_t gsgpu_vram_mgr_usage(struct ttm_mem_type_manager *man)
  *
  * Returns how many bytes are used in the visible part of VRAM
  */
-uint64_t gsgpu_vram_mgr_vis_usage(struct ttm_mem_type_manager *man)
+uint64_t gsgpu_vram_mgr_vis_usage(struct ttm_resource_manager *man)
 {
 	struct gsgpu_vram_mgr *mgr = man->priv;
 
@@ -274,7 +274,7 @@ uint64_t gsgpu_vram_mgr_vis_usage(struct ttm_mem_type_manager *man)
  *
  * Dump the table content using printk.
  */
-static void gsgpu_vram_mgr_debug(struct ttm_mem_type_manager *man,
+static void gsgpu_vram_mgr_debug(struct ttm_resource_manager *man,
 				  struct drm_printer *printer)
 {
 	struct gsgpu_vram_mgr *mgr = man->priv;
@@ -288,7 +288,7 @@ static void gsgpu_vram_mgr_debug(struct ttm_mem_type_manager *man,
 		   gsgpu_vram_mgr_vis_usage(man) >> 20);
 }
 
-const struct ttm_mem_type_manager_func gsgpu_vram_mgr_func = {
+const struct ttm_resource_manager_func gsgpu_vram_mgr_func = {
 	.init		= gsgpu_vram_mgr_init,
 	.takedown	= gsgpu_vram_mgr_fini,
 	.get_node	= gsgpu_vram_mgr_new,
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
index 67a81b326f8a..0fbde8a1ff89 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
@@ -32,16 +32,16 @@ struct gsgpu_copy_mem {
 	unsigned long			offset;
 };
 
-extern const struct ttm_mem_type_manager_func gsgpu_gtt_mgr_func;
-extern const struct ttm_mem_type_manager_func gsgpu_vram_mgr_func;
+extern const struct ttm_resource_manager_func gsgpu_gtt_mgr_func;
+extern const struct ttm_resource_manager_func gsgpu_vram_mgr_func;
 
 bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_mem_reg *mem);
-uint64_t gsgpu_gtt_mgr_usage(struct ttm_mem_type_manager *man);
-int gsgpu_gtt_mgr_recover(struct ttm_mem_type_manager *man);
+uint64_t gsgpu_gtt_mgr_usage(struct ttm_resource_manager *man);
+int gsgpu_gtt_mgr_recover(struct ttm_resource_manager *man);
 
 u64 gsgpu_vram_mgr_bo_visible_size(struct gsgpu_bo *bo);
-uint64_t gsgpu_vram_mgr_usage(struct ttm_mem_type_manager *man);
-uint64_t gsgpu_vram_mgr_vis_usage(struct ttm_mem_type_manager *man);
+uint64_t gsgpu_vram_mgr_usage(struct ttm_resource_manager *man);
+uint64_t gsgpu_vram_mgr_vis_usage(struct ttm_resource_manager *man);
 
 int gsgpu_ttm_init(struct gsgpu_device *adev);
 void gsgpu_ttm_late_init(struct gsgpu_device *adev);
-- 
2.39.1


From 78a9f115eae09a052089c9ee14820b245316d9aa Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Thu, 28 Sep 2023 12:24:33 +0800
Subject: [PATCH] gsgpu: Copy commit e07ddb0ce7cde64fdfcd96e96d1dce8538fa0bb0

---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c      |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c |  4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c      |  4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c     | 20 ++++++++++----------
 drivers/gpu/drm/gsgpu/include/gsgpu.h     |  1 +
 6 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c
index 9d1ca3d1f28b..a8942658a4bd 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_bo_list.c
@@ -64,7 +64,7 @@ int gsgpu_bo_list_create(struct gsgpu_device *adev, struct drm_file *filp,
 		}
 
 		bo = gsgpu_bo_ref(gem_to_gsgpu_bo(gobj));
-		drm_gem_object_put_unlocked(gobj);
+		drm_gem_object_put(gobj);
 
 		usermm = gsgpu_ttm_tt_get_usermm(bo->tbo.ttm);
 		if (usermm) {
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
index ef2bb83aec07..341935248ded 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
@@ -24,7 +24,7 @@ static int gsgpu_cs_user_fence_chunk(struct gsgpu_cs_parser *p,
 	p->uf_entry.tv.bo = &p->uf_entry.robj->tbo;
 	p->uf_entry.tv.num_shared = 3;
 
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 
 	size = gsgpu_bo_size(p->uf_entry.robj);
 	if (size != PAGE_SIZE || (data->offset + 8) > size) {
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
index df1cd3e7a05e..ff0f0e0c479c 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
@@ -286,14 +286,14 @@ gsgpu_display_user_framebuffer_create(struct drm_device *dev,
 
 	gsgpu_fb = kzalloc(sizeof(*gsgpu_fb), GFP_KERNEL);
 	if (gsgpu_fb == NULL) {
-		drm_gem_object_put_unlocked(obj);
+		drm_gem_object_put(obj);
 		return ERR_PTR(-ENOMEM);
 	}
 
 	ret = gsgpu_display_framebuffer_init(dev, gsgpu_fb, mode_cmd, obj);
 	if (ret) {
 		kfree(gsgpu_fb);
-		drm_gem_object_put_unlocked(obj);
+		drm_gem_object_put(obj);
 		return ERR_PTR(ret);
 	}
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c
index 52a8b0a8d3d6..d73ab4377371 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c
@@ -76,7 +76,7 @@ static void gsgpufb_destroy_pinned_object(struct drm_gem_object *gobj)
 		gsgpu_bo_unpin(abo);
 		gsgpu_bo_unreserve(abo);
 	}
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 }
 
 static int gsgpufb_create_pinned_object(struct gsgpu_fbdev *rfbdev,
@@ -252,7 +252,7 @@ static int gsgpufb_create(struct drm_fb_helper *helper,
 
 	}
 	if (fb && ret) {
-		drm_gem_object_put_unlocked(gobj);
+		drm_gem_object_put(gobj);
 		drm_framebuffer_unregister_private(fb);
 		drm_framebuffer_cleanup(fb);
 		kfree(fb);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
index 5be654e56a5f..f95f03367cc5 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
@@ -117,7 +117,7 @@ void gsgpu_gem_force_release(struct gsgpu_device *adev)
 		spin_lock(&file->table_lock);
 		idr_for_each_entry(&file->object_idr, gobj, handle) {
 			WARN_ONCE(1, "And also active allocations!\n");
-			drm_gem_object_put_unlocked(gobj);
+			drm_gem_object_put(gobj);
 		}
 		idr_destroy(&file->object_idr);
 		spin_unlock(&file->table_lock);
@@ -316,7 +316,7 @@ int gsgpu_gem_create_ioctl(struct drm_device *dev, void *data,
 
 	r = drm_gem_handle_create(filp, gobj, &handle);
 	/* drop reference from allocate - handle holds it now */
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 	if (r)
 		return r;
 
@@ -399,7 +399,7 @@ int gsgpu_gem_userptr_ioctl(struct drm_device *dev, void *data,
 		gsgpu_ttm_tt_get_user_pages_done(bo->tbo.ttm);
 
 release_object:
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 
 	return r;
 }
@@ -418,11 +418,11 @@ int gsgpu_mode_dumb_mmap(struct drm_file *filp,
 	robj = gem_to_gsgpu_bo(gobj);
 	if (gsgpu_ttm_tt_get_usermm(robj->tbo.ttm) ||
 	    (robj->flags & GSGPU_GEM_CREATE_NO_CPU_ACCESS)) {
-		drm_gem_object_put_unlocked(gobj);
+		drm_gem_object_put(gobj);
 		return -EPERM;
 	}
 	*offset_p = gsgpu_bo_mmap_offset(robj);
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 	return 0;
 }
 
@@ -492,7 +492,7 @@ int gsgpu_gem_wait_idle_ioctl(struct drm_device *dev, void *data,
 	} else
 		r = ret;
 
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 	return r;
 }
 
@@ -535,7 +535,7 @@ int gsgpu_gem_metadata_ioctl(struct drm_device *dev, void *data,
 unreserve:
 	gsgpu_bo_unreserve(robj);
 out:
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 	return r;
 }
 
@@ -713,7 +713,7 @@ int gsgpu_gem_va_ioctl(struct drm_device *dev, void *data,
 	ttm_eu_backoff_reservation(&ticket, &list);
 
 error_unref:
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 	return r;
 }
 
@@ -779,7 +779,7 @@ int gsgpu_gem_op_ioctl(struct drm_device *dev, void *data,
 	}
 
 out:
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 	return r;
 }
 
@@ -809,7 +809,7 @@ int gsgpu_mode_dumb_create(struct drm_file *file_priv,
 
 	r = drm_gem_handle_create(file_priv, gobj, &handle);
 	/* drop reference from allocate - handle holds it now */
-	drm_gem_object_put_unlocked(gobj);
+	drm_gem_object_put(gobj);
 	if (r) {
 		return r;
 	}
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index f56be4d2feb7..bb3890a94959 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -20,6 +20,7 @@
 #include <drm/gsgpu_drm.h>
 #include <drm/gpu_scheduler.h>
 #include <drm/drm_framebuffer.h>
+#include <drm/drm_modeset_helper.h>
 #include <drm/drm_ioctl.h>
 #include <drm/drm_drv.h>
 #include <drm/drm_vblank.h>
-- 
2.39.1


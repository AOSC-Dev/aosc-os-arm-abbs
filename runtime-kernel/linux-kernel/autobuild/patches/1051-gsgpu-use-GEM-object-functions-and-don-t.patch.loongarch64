From f23c7af5a21393ed3a5499f793e70291814038bb Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Mon, 25 Sep 2023 23:11:30 +0800
Subject: [PATCH] gsgpu: use GEM object functions and don't use TTM fault
 callbacks

In line with patch series patchwork.freedesktop.org/series/62135,
patchwork.freedesktop.org/series/80593, and commit d3ef581afa5e
we move the PRIME-related callbacks to the GEM object function
struct and implement the TTM BO fault handler ourselves, a la
amdgpu and radeon.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c        |  14 +--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c        |  95 +++++++++++++++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     |  22 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c      | 102 +------------------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c        |  45 +-------
 drivers/gpu/drm/gsgpu/include/gsgpu.h        |  15 ---
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h |   2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h    |   1 -
 8 files changed, 107 insertions(+), 189 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
index 30b5d3c7ccc8..e3143a3a14a9 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
@@ -457,7 +457,7 @@ static const struct file_operations gsgpu_driver_kms_fops = {
 	.flush = gsgpu_flush,
 	.release = drm_release,
 	.unlocked_ioctl = gsgpu_drm_ioctl,
-	.mmap = gsgpu_mmap,
+	.mmap = drm_gem_mmap,
 	.poll = drm_poll,
 	.read = drm_read,
 #ifdef CONFIG_COMPAT
@@ -474,23 +474,11 @@ static struct drm_driver kms_driver = {
 	.lastclose = gsgpu_driver_lastclose_kms,
 	.unload = gsgpu_driver_unload_kms,
 	.ioctls = gsgpu_ioctls_kms,
-	.gem_free_object_unlocked = gsgpu_gem_object_free,
-	.gem_open_object = gsgpu_gem_object_open,
-	.gem_close_object = gsgpu_gem_object_close,
 	.dumb_create = gsgpu_mode_dumb_create,
 	.dumb_map_offset = gsgpu_mode_dumb_mmap,
 	.fops = &gsgpu_driver_kms_fops,
 
-	.prime_handle_to_fd = drm_gem_prime_handle_to_fd,
-	.prime_fd_to_handle = drm_gem_prime_fd_to_handle,
-	.gem_prime_export = gsgpu_gem_prime_export,
-	.gem_prime_import = gsgpu_gem_prime_import,
-	.gem_prime_res_obj = gsgpu_gem_prime_res_obj,
-	.gem_prime_get_sg_table = gsgpu_gem_prime_get_sg_table,
 	.gem_prime_import_sg_table = gsgpu_gem_prime_import_sg_table,
-	.gem_prime_vmap = gsgpu_gem_prime_vmap,
-	.gem_prime_vunmap = gsgpu_gem_prime_vunmap,
-	.gem_prime_mmap = gsgpu_gem_prime_mmap,
 
 	.name = DRIVER_NAME,
 	.desc = DRIVER_DESC,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
index 0b942e476d53..1ff64b7967ce 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
@@ -5,7 +5,47 @@
 #include "gsgpu.h"
 #include "gsgpu_display.h"
 
-void gsgpu_gem_object_free(struct drm_gem_object *gobj)
+static vm_fault_t gsgpu_gem_fault(struct vm_fault *vmf)
+{
+	struct ttm_buffer_object *bo = vmf->vma->vm_private_data;
+	struct drm_device *ddev = bo->base.dev;
+	vm_fault_t ret;
+	int idx;
+
+	ret = ttm_bo_vm_reserve(bo, vmf);
+	if (ret)
+		return ret;
+
+	if (drm_dev_enter(ddev, &idx)) {
+		ret = gsgpu_bo_fault_reserve_notify(bo);
+		if (ret) {
+			drm_dev_exit(idx);
+			goto unlock;
+		}
+
+		ret = ttm_bo_vm_fault_reserved(vmf, vmf->vma->vm_page_prot,
+					       TTM_BO_VM_NUM_PREFAULT);
+
+		drm_dev_exit(idx);
+	} else {
+		ret = ttm_bo_vm_dummy_page(vmf, vmf->vma->vm_page_prot);
+	}
+	if (ret == VM_FAULT_RETRY && !(vmf->flags & FAULT_FLAG_RETRY_NOWAIT))
+		return ret;
+
+unlock:
+	dma_resv_unlock(bo->base.resv);
+	return ret;
+}
+
+static const struct vm_operations_struct gsgpu_gem_vm_ops = {
+	.fault = gsgpu_gem_fault,
+	.open = ttm_bo_vm_open,
+	.close = ttm_bo_vm_close,
+	.access = ttm_bo_vm_access
+};
+
+static void gsgpu_gem_object_free(struct drm_gem_object *gobj)
 {
 	struct gsgpu_bo *robj = gem_to_gsgpu_bo(gobj);
 
@@ -16,10 +56,10 @@ void gsgpu_gem_object_free(struct drm_gem_object *gobj)
 }
 
 int gsgpu_gem_object_create(struct gsgpu_device *adev, unsigned long size,
-			     int alignment, u32 initial_domain,
-			     u64 flags, enum ttm_bo_type type,
-			     struct dma_resv *resv,
-			     struct drm_gem_object **obj)
+			    int alignment, u32 initial_domain,
+			    u64 flags, enum ttm_bo_type type,
+			    struct dma_resv *resv,
+			    struct drm_gem_object **obj)
 {
 	struct gsgpu_bo *bo;
 	struct gsgpu_bo_param bp;
@@ -91,8 +131,8 @@ void gsgpu_gem_force_release(struct gsgpu_device *adev)
  * Call from drm_gem_handle_create which appear in both new and open ioctl
  * case.
  */
-int gsgpu_gem_object_open(struct drm_gem_object *obj,
-			   struct drm_file *file_priv)
+static int gsgpu_gem_object_open(struct drm_gem_object *obj,
+				 struct drm_file *file_priv)
 {
 	struct gsgpu_bo *abo = gem_to_gsgpu_bo(obj);
 	struct gsgpu_device *adev = gsgpu_ttm_adev(abo->tbo.bdev);
@@ -124,8 +164,8 @@ int gsgpu_gem_object_open(struct drm_gem_object *obj,
 	return 0;
 }
 
-void gsgpu_gem_object_close(struct drm_gem_object *obj,
-			     struct drm_file *file_priv)
+static void gsgpu_gem_object_close(struct drm_gem_object *obj,
+				   struct drm_file *file_priv)
 {
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
@@ -176,6 +216,43 @@ void gsgpu_gem_object_close(struct drm_gem_object *obj,
 	ttm_eu_backoff_reservation(&ticket, &list);
 }
 
+static int gsgpu_gem_object_mmap(struct drm_gem_object *obj, struct vm_area_struct *vma)
+{
+	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
+
+	if (gsgpu_ttm_tt_get_usermm(bo->tbo.ttm))
+		return -EPERM;
+	if (bo->flags & GSGPU_GEM_CREATE_NO_CPU_ACCESS)
+		return -EPERM;
+
+#if 0
+	/* TODO: I'm not sure if this is needed for 7A2000. The hw seems to be
+	 * based on an early version of AMD graphics and may or may not need the
+	 * same workaround (https://patchwork.freedesktop.org/patch/444189). */
+	/* Workaround for Thunk bug creating PROT_NONE,MAP_PRIVATE mappings
+	 * for debugger access to invisible VRAM. Should have used MAP_SHARED
+	 * instead. Clearing VM_MAYWRITE prevents the mapping from ever
+	 * becoming writable and makes is_cow_mapping(vm_flags) false.
+	 */
+	if (is_cow_mapping(vma->vm_flags) && !(vma->vm_flags & VM_ACCESS_FLAGS))
+		vm_flags_clear(vma, VM_MAYWRITE);
+#endif
+
+	return drm_gem_ttm_mmap(obj, vma);
+}
+
+static const struct drm_gem_object_funcs gsgpu_gem_object_funcs = {
+	.free = gsgpu_gem_object_free,
+	.open = gsgpu_gem_object_open,
+	.close = gsgpu_gem_object_close,
+	.get_sg_table = gsgpu_gem_prime_get_sg_table,
+	.export = gsgpu_gem_prime_export,
+	.vmap = gsgpu_gem_prime_vmap,
+	.vunmap = gsgpu_gem_prime_vunmap,
+	.mmap = gsgpu_gem_object_mmap,
+	.vm_ops = &gsgpu_gem_vm_ops,
+};
+
 /*
  * GEM ioctls.
  */
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index 5cf99bd0be4c..2b816b1d47ab 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -430,6 +430,8 @@ static int gsgpu_bo_do_create(struct gsgpu_device *adev,
 	if (unlikely(r != 0))
 		return r;
 
+	bo->gem_base.resv = bo->tbo.resv;
+
 	if (!gsgpu_gmc_vram_full_visible(&adev->gmc) &&
 	    bo->tbo.mem.mem_type == TTM_PL_VRAM &&
 	    bo->tbo.mem.start < adev->gmc.visible_vram_size >> PAGE_SHIFT)
@@ -1209,19 +1211,14 @@ void gsgpu_bo_move_notify(struct ttm_buffer_object *bo,
  * Returns:
  * 0 for success or a negative error code on failure.
  */
-int gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
+vm_fault_t gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->bdev);
 	struct ttm_operation_ctx ctx = { false, false };
-	struct gsgpu_bo *abo;
+	struct gsgpu_bo *abo = ttm_to_gsgpu_bo(bo);
 	unsigned long offset, size;
 	int r;
 
-	if (!gsgpu_bo_is_gsgpu_bo(bo))
-		return 0;
-
-	abo = ttm_to_gsgpu_bo(bo);
-
 	/* Remember that this BO was accessed by the CPU */
 	abo->flags |= GSGPU_GEM_CREATE_CPU_ACCESS_REQUIRED;
 
@@ -1235,7 +1232,7 @@ int gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
 
 	/* Can't move a pinned BO to visible VRAM */
 	if (abo->pin_count > 0)
-		return -EINVAL;
+		return VM_FAULT_SIGBUS;
 
 	/* hurrah the memory is not visible ! */
 	atomic64_inc(&adev->num_vram_cpu_page_faults);
@@ -1247,15 +1244,18 @@ int gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
 	abo->placement.busy_placement = &abo->placements[1];
 
 	r = ttm_bo_validate(bo, &abo->placement, &ctx);
-	if (unlikely(r != 0))
-		return r;
+	if (unlikely(r == -EBUSY || r == -ERESTARTSYS))
+		return VM_FAULT_NOPAGE;
+	else if (unlikely(r))
+		return VM_FAULT_SIGBUS;
 
 	offset = bo->mem.start << PAGE_SHIFT;
 	/* this should never happen */
 	if (bo->mem.mem_type == TTM_PL_VRAM &&
 	    (offset + size) > adev->gmc.visible_vram_size)
-		return -EINVAL;
+		return VM_FAULT_SIGBUS;
 
+	ttm_bo_move_to_lru_tail_unlocked(bo);
 	return 0;
 }
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
index c77e250ebfdb..767a7a28ae77 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
@@ -59,51 +59,6 @@ void gsgpu_gem_prime_vunmap(struct drm_gem_object *obj, void *vaddr)
 	ttm_bo_kunmap(&bo->dma_buf_vmap);
 }
 
-/**
- * gsgpu_gem_prime_mmap - &drm_driver.gem_prime_mmap implementation
- * @obj: GEM buffer object
- * @vma: virtual memory area
- *
- * Sets up a userspace mapping of the buffer object's memory in the given
- * virtual memory area.
- *
- * Returns:
- * 0 on success or negative error code.
- */
-int gsgpu_gem_prime_mmap(struct drm_gem_object *obj, struct vm_area_struct *vma)
-{
-	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
-	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
-	unsigned asize = gsgpu_bo_size(bo);
-	int ret;
-
-	if (!vma->vm_file)
-		return -ENODEV;
-
-	if (adev == NULL)
-		return -ENODEV;
-
-	/* Check for valid size. */
-	if (asize < vma->vm_end - vma->vm_start)
-		return -EINVAL;
-
-	if (gsgpu_ttm_tt_get_usermm(bo->tbo.ttm) ||
-	    (bo->flags & GSGPU_GEM_CREATE_NO_CPU_ACCESS)) {
-		return -EPERM;
-	}
-	vma->vm_pgoff += gsgpu_bo_mmap_offset(bo) >> PAGE_SHIFT;
-
-	/* prime mmap does not need to check access, so allow here */
-	ret = drm_vma_node_allow(&obj->vma_node, vma->vm_file->private_data);
-	if (ret)
-		return ret;
-
-	ret = ttm_bo_mmap(vma->vm_file, vma, &adev->mman.bdev);
-	drm_vma_node_revoke(&obj->vma_node, vma->vm_file->private_data);
-
-	return ret;
-}
-
 /**
  * gsgpu_gem_prime_import_sg_table - &drm_driver.gem_prime_import_sg_table
  * implementation
@@ -286,20 +241,6 @@ static void gsgpu_gem_map_detach(struct dma_buf *dma_buf,
 	drm_gem_map_detach(dma_buf, attach);
 }
 
-/**
- * gsgpu_gem_prime_res_obj - &drm_driver.gem_prime_res_obj implementation
- * @obj: GEM buffer object
- *
- * Returns:
- * The buffer object's reservation object.
- */
-struct dma_resv *gsgpu_gem_prime_res_obj(struct drm_gem_object *obj)
-{
-	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
-
-	return bo->tbo.resv;
-}
-
 /**
  * gsgpu_gem_begin_cpu_access - &dma_buf_ops.begin_cpu_access implementation
  * @dma_buf: shared DMA buffer
@@ -355,8 +296,7 @@ static const struct dma_buf_ops gsgpu_dmabuf_ops = {
 };
 
 /**
- * gsgpu_gem_prime_export - &drm_driver.gem_prime_export implementation
- * @dev: DRM device
+ * gsgpu_gem_prime_export - &drm_gem_object_funcs.gem_prime_export implementation
  * @gobj: GEM buffer object
  * @flags: flags like DRM_CLOEXEC and DRM_RDWR
  *
@@ -366,9 +306,8 @@ static const struct dma_buf_ops gsgpu_dmabuf_ops = {
  * Returns:
  * Shared DMA buffer representing the GEM buffer object from the given device.
  */
-struct dma_buf *gsgpu_gem_prime_export(struct drm_device *dev,
-					struct drm_gem_object *gobj,
-					int flags)
+struct dma_buf *gsgpu_gem_prime_export(struct drm_gem_object *gobj,
+				       int flags)
 {
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(gobj);
 	struct dma_buf *buf;
@@ -377,42 +316,11 @@ struct dma_buf *gsgpu_gem_prime_export(struct drm_device *dev,
 	    bo->flags & GSGPU_GEM_CREATE_VM_ALWAYS_VALID)
 		return ERR_PTR(-EPERM);
 
-	buf = drm_gem_prime_export(dev, gobj, flags);
+	buf = drm_gem_prime_export(gobj, flags);
 	if (!IS_ERR(buf)) {
-		buf->file->f_mapping = dev->anon_inode->i_mapping;
+		buf->file->f_mapping = gobj->dev->anon_inode->i_mapping;
 		buf->ops = &gsgpu_dmabuf_ops;
 	}
 
 	return buf;
 }
-
-/**
- * gsgpu_gem_prime_import - &drm_driver.gem_prime_import implementation
- * @dev: DRM device
- * @dma_buf: Shared DMA buffer
- *
- * The main work is done by the &drm_gem_prime_import helper, which in turn
- * uses &gsgpu_gem_prime_import_sg_table.
- *
- * Returns:
- * GEM buffer object representing the shared DMA buffer for the given device.
- */
-struct drm_gem_object *gsgpu_gem_prime_import(struct drm_device *dev,
-					    struct dma_buf *dma_buf)
-{
-	struct drm_gem_object *obj;
-
-	if (dma_buf->ops == &gsgpu_dmabuf_ops) {
-		obj = dma_buf->priv;
-		if (obj->dev == dev) {
-			/*
-			 * Importing dmabuf exported from out own gem increases
-			 * refcount on gem itself instead of f_count of dmabuf.
-			 */
-			drm_gem_object_get(obj);
-			return obj;
-		}
-	}
-
-	return drm_gem_prime_import(dev, dma_buf);
-}
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
index a46c956af78f..54af0405db42 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
@@ -22,8 +22,6 @@
 #define mmMM_INDEX_HI      0x6
 #define mmMM_DATA          0x1
 
-#define DRM_FILE_PAGE_OFFSET (0x100000000ULL >> PAGE_SHIFT)
-
 static int gsgpu_map_buffer(struct ttm_buffer_object *bo,
 			     struct ttm_resource *mem, unsigned num_pages,
 			     uint64_t offset, unsigned window,
@@ -155,25 +153,6 @@ static void gsgpu_evict_flags(struct ttm_buffer_object *bo,
 	*placement = abo->placement;
 }
 
-/**
- * gsgpu_verify_access - Verify access for a mmap call
- *
- * @bo:	The buffer object to map
- * @filp: The file pointer from the process performing the mmap
- *
- * This is called by ttm_bo_mmap() to verify whether a process
- * has the right to mmap a BO to their process space.
- */
-static int gsgpu_verify_access(struct ttm_buffer_object *bo, struct file *filp)
-{
-	struct gsgpu_bo *abo = ttm_to_gsgpu_bo(bo);
-
-	if (gsgpu_ttm_tt_get_usermm(bo->ttm))
-		return -EPERM;
-	return drm_vma_node_verify_access(&abo->gem_base.vma_node,
-					  filp->private_data);
-}
-
 /**
  * gsgpu_move_null - Register memory for a buffer object
  *
@@ -297,9 +276,9 @@ int gsgpu_ttm_copy_mem_to_mem(struct gsgpu_device *adev,
 		if (src->mem->mem_type == TTM_PL_TT &&
 		    !gsgpu_gtt_mgr_has_gart_addr(src->mem)) {
 			r = gsgpu_map_buffer(src->bo, src->mem,
-					PFN_UP(cur_size + src_page_offset),
-					src_node_start, 0, ring,
-					&from);
+					     PFN_UP(cur_size + src_page_offset),
+					     src_node_start, 0, ring,
+					     &from);
 			if (r)
 				goto error;
 			/* Adjust the offset because gsgpu_map_buffer returns
@@ -1410,9 +1389,7 @@ static struct ttm_device_funcs gsgpu_device_funcs = {
 	.eviction_valuable = gsgpu_ttm_bo_eviction_valuable,
 	.evict_flags = &gsgpu_evict_flags,
 	.move = &gsgpu_bo_move,
-	.verify_access = &gsgpu_verify_access,
 	.move_notify = &gsgpu_bo_move_notify,
-	.fault_reserve_notify = &gsgpu_bo_fault_reserve_notify,
 	.io_mem_reserve = &gsgpu_ttm_io_mem_reserve,
 	.io_mem_free = &gsgpu_ttm_io_mem_free,
 	.io_mem_pfn = gsgpu_ttm_io_mem_pfn,
@@ -1699,22 +1676,6 @@ void gsgpu_ttm_set_buffer_funcs_status(struct gsgpu_device *adev, bool enable)
 	adev->mman.buffer_funcs_enabled = enable;
 }
 
-int gsgpu_mmap(struct file *filp, struct vm_area_struct *vma)
-{
-	struct drm_file *file_priv;
-	struct gsgpu_device *adev;
-
-	if (unlikely(vma->vm_pgoff < DRM_FILE_PAGE_OFFSET))
-		return -EINVAL;
-
-	file_priv = filp->private_data;
-	adev = file_priv->minor->dev->dev_private;
-	if (adev == NULL)
-		return -EINVAL;
-
-	return ttm_bo_mmap(filp, vma, &adev->mman.bdev);
-}
-
 static int gsgpu_map_buffer(struct ttm_buffer_object *bo,
 			     struct ttm_resource *mem, unsigned num_pages,
 			     uint64_t offset, unsigned window,
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index 54297af31bd6..f6c223b3fa70 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -257,26 +257,11 @@ struct gsgpu_clock {
 #define GSGPU_GEM_DOMAIN_MAX		0x3
 #define gem_to_gsgpu_bo(gobj) container_of((gobj), struct gsgpu_bo, gem_base)
 
-void gsgpu_gem_object_free(struct drm_gem_object *obj);
-int gsgpu_gem_object_open(struct drm_gem_object *obj,
-			  struct drm_file *file_priv);
-void gsgpu_gem_object_close(struct drm_gem_object *obj,
-			    struct drm_file *file_priv);
 unsigned long gsgpu_gem_timeout(uint64_t timeout_ns);
-struct sg_table *gsgpu_gem_prime_get_sg_table(struct drm_gem_object *obj);
 struct drm_gem_object *
 gsgpu_gem_prime_import_sg_table(struct drm_device *dev,
 				struct dma_buf_attachment *attach,
 				struct sg_table *sg);
-struct dma_buf *gsgpu_gem_prime_export(struct drm_device *dev,
-				       struct drm_gem_object *gobj,
-				       int flags);
-struct drm_gem_object *gsgpu_gem_prime_import(struct drm_device *dev,
-					      struct dma_buf *dma_buf);
-struct dma_resv *gsgpu_gem_prime_res_obj(struct drm_gem_object *);
-void *gsgpu_gem_prime_vmap(struct drm_gem_object *obj);
-void gsgpu_gem_prime_vunmap(struct drm_gem_object *obj, void *vaddr);
-int gsgpu_gem_prime_mmap(struct drm_gem_object *obj, struct vm_area_struct *vma);
 
 /* sub-allocation manager, it has to be protected by another lock.
  * By conception this is an helper for other part of the driver
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index d5766c3844f8..451c4d71bbd3 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -228,7 +228,7 @@ int gsgpu_bo_get_metadata(struct gsgpu_bo *bo, void *buffer,
 void gsgpu_bo_move_notify(struct ttm_buffer_object *bo,
 			   bool evict,
 			   struct ttm_resource *new_mem);
-int gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo);
+vm_fault_t gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo);
 void gsgpu_bo_fence(struct gsgpu_bo *bo, struct dma_fence *fence,
 		     bool shared);
 u64 gsgpu_bo_gpu_offset(struct gsgpu_bo *bo);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
index 80b47a849d07..044f11707fbf 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
@@ -65,7 +65,6 @@ int gsgpu_fill_buffer(struct gsgpu_bo *bo,
 		      struct dma_resv *resv,
 		      struct dma_fence **fence);
 
-int gsgpu_mmap(struct file *filp, struct vm_area_struct *vma);
 int gsgpu_ttm_alloc_gart(struct ttm_buffer_object *bo);
 int gsgpu_ttm_recover_gart(struct ttm_buffer_object *tbo);
 
-- 
2.39.1


From c6ec72cbd7094bdd2644e605a53004b443bf2253 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Mon, 9 Oct 2023 10:14:32 +0800
Subject: [PATCH] gsgpu: Remove gsgpu_bo::pin_count

This was left over due to an incomplete fix earlier. We also make
sure to pin those buffer objects created with compression flag on.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c         | 4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c     | 7 ++-----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c        | 2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     | 9 ++++++++-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c      | 2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c        | 2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h | 1 -
 7 files changed, 15 insertions(+), 12 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
index cba6aa23c28f..1c9e20c5eeca 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
@@ -372,7 +372,7 @@ static int gsgpu_cs_bo_validate(struct gsgpu_cs_parser *p,
 	uint32_t domain;
 	int r;
 
-	if (bo->pin_count)
+	if (bo->tbo.pin_count)
 		return 0;
 
 	/* Don't move this buffer if we have depleted our allowance
@@ -438,7 +438,7 @@ static bool gsgpu_cs_try_evict(struct gsgpu_cs_parser *p,
 			break;
 
 		/* We can't move pinned BOs here */
-		if (bo->pin_count)
+		if (bo->tbo.pin_count)
 			continue;
 
 		other = gsgpu_mem_type_to_domain(bo->tbo.resource->mem_type);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
index c7afa170fcbb..b54f22f5fbb9 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
@@ -1493,11 +1493,6 @@ void gsgpu_device_fini(struct gsgpu_device *adev)
 	gsgpu_debugfs_regs_cleanup(adev);
 }
 
-/* TODO: We need to understand what this does.
- * This is called during device suspension and resumption, presumably to validate
- * buffer objects. Since in the latest AMD driver this has been replaced with
- * generic TTM calls we need port those changes over.
- */
 static int gsgpu_zip_gem_bo_validate(int id, void *ptr, void *data)
 {
 	struct drm_gem_object *gobj = ptr;
@@ -1522,6 +1517,7 @@ static int gsgpu_zip_gem_bo_validate(int id, void *ptr, void *data)
 		if (!(bo->flags & GSGPU_GEM_CREATE_NO_CPU_ACCESS))
 			bo->flags |= GSGPU_GEM_CREATE_CPU_ACCESS_REQUIRED;
 		gsgpu_bo_placement_from_domain(bo, domain);
+		ttm_bo_pin(&bo->tbo);
 		for (i = 0; i < bo->placement.num_placement; i++) {
 			unsigned fpfn, lpfn;
 
@@ -1569,6 +1565,7 @@ static int gsgpu_zip_gem_bo_evict(int id, void *ptr, void *data)
 		for (i = 0; i < bo->placement.num_placement; i++) {
 			bo->placements[i].lpfn = 0;
 		}
+		ttm_bo_unpin(&bo->tbo);
 
 		r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
 		if (unlikely(r))
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
index 201d107c17cb..5408b164cf2a 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
@@ -858,7 +858,7 @@ static int gsgpu_debugfs_gem_bo_info(int id, void *ptr, void *data)
 	seq_printf(m, "\t0x%08x: %12ld byte %s",
 		   id, gsgpu_bo_size(bo), placement);
 
-	pin_count = READ_ONCE(bo->pin_count);
+	pin_count = READ_ONCE(bo->tbo.pin_count);
 	if (pin_count)
 		seq_printf(m, " pin count %d", pin_count);
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index 1eae87621c64..feb698cfb4d2 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -400,6 +400,7 @@ static int gsgpu_bo_do_create(struct gsgpu_device *adev,
 
 	bo->tbo.bdev = &adev->mman.bdev;
 	gsgpu_bo_placement_from_domain(bo, bp->domain);
+
 	if (bp->type == ttm_bo_type_kernel)
 		bo->tbo.priority = 1;
 
@@ -409,6 +410,12 @@ static int gsgpu_bo_do_create(struct gsgpu_device *adev,
 	if (unlikely(r != 0))
 		return r;
 
+	/* If we are creating a compressed buffer object in VRAM, pin it
+	 * so it won't get evicted. */
+	if (bp->flags & GSGPU_GEM_CREATE_COMPRESSED_MASK) {
+		ttm_bo_pin(&bo->tbo);
+	}
+
 	bo->tbo.base.resv = bo->tbo.base.resv;
 
 	if (!gsgpu_gmc_vram_full_visible(&adev->gmc) &&
@@ -1120,7 +1127,7 @@ vm_fault_t gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
 		return 0;
 
 	/* Can't move a pinned BO to visible VRAM */
-	if (abo->pin_count > 0)
+	if (abo->tbo.pin_count > 0)
 		return VM_FAULT_SIGBUS;
 
 	/* hurrah the memory is not visible ! */
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
index 45a8e1f5770c..fe3fd4e9e706 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
@@ -242,7 +242,7 @@ static int gsgpu_gem_begin_cpu_access(struct dma_buf *dma_buf,
 	if (unlikely(ret != 0))
 		return ret;
 
-	if (!bo->pin_count && (bo->allowed_domains & GSGPU_GEM_DOMAIN_GTT)) {
+	if (!bo->tbo.pin_count && (bo->allowed_domains & GSGPU_GEM_DOMAIN_GTT)) {
 		gsgpu_bo_placement_from_domain(bo, GSGPU_GEM_DOMAIN_GTT);
 		ret = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
 	}
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
index a59cefe37c9d..bb7ba6972f54 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
@@ -362,7 +362,7 @@ static int gsgpu_bo_move(struct ttm_buffer_object *bo, bool evict,
 
 	abo = ttm_to_gsgpu_bo(bo);
 	/* Can't move a pinned BO */
-	if (WARN_ON_ONCE(abo->pin_count > 0))
+	if (WARN_ON_ONCE(abo->tbo.pin_count > 0))
 		return -EINVAL;
 
 	adev = gsgpu_ttm_adev(bo->bdev);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index bf9abd76d661..b2999e0eaf48 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -45,7 +45,6 @@ struct gsgpu_bo {
 	struct ttm_buffer_object	tbo;
 	struct ttm_bo_kmap_obj		kmap;
 	u64				flags;
-	unsigned			pin_count;
 	u64				tiling_flags;
 	u64				node_offset;
 	u64				metadata_flags;
-- 
2.39.1


From d7613f53d9430a471f5df1e53d22d315281171a9 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Sat, 21 Oct 2023 17:42:09 +0800
Subject: [PATCH] gsgpu: do not block while holding a spinlock

We shouldn't block while holding a spinlock. Add a version of
gsgpu_cmd_exec which does not wait for the CP to finish.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c | 58 +++++++++++++++---------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_mmu.c    |  4 +-
 drivers/gpu/drm/gsgpu/include/gsgpu.h    |  6 ++-
 drivers/gpu/drm/gsgpu/include/gsgpu_cp.h |  9 ++--
 4 files changed, 48 insertions(+), 29 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
index 4bb10b02abac..c338e6b9ba0b 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
@@ -26,24 +26,48 @@ static const char *gsgpu_family_name[] = {
 };
 
 /**
- * gsgpu_cmd_exec
- * XXX while block will taking kernel hang!
- * @adev
- * @cmd
- * @arg0
- * @arg1
+ * gsgpu_cmd_exec --- Execute a command on the Command Processor.
  *
- * Return:
-
+ * Note that this function blocks until the command processor has finished
+ * processing. You should NOT call this function in contexts where you are
+ * not supposed to block, for instance, when holding a spinlock.
+ *
+ * @adev GSGPU device object
+ * @cmd Command to execute
+ * @arg0 Argument 0
+ * @arg1 Argument 1
+ *
+ * Note that the original vendor code has this function that returns the
+ * 64-bit result from the command processor. Based on my experimentations
+ * the command processor does NOT in fact modify the RETURN0 and RETURN1
+ * registers at all. Therefore we have removed the function's return value.
  */
-uint64_t gsgpu_cmd_exec(struct gsgpu_device *adev, uint32_t cmd,
-			uint32_t arg0, uint32_t arg1)
+void gsgpu_cmd_exec(struct gsgpu_device *adev, uint32_t cmd,
+		    uint32_t arg0, uint32_t arg1)
 {
-	uint64_t ret;
+	if (!gsgpu_cp_wait_done(adev))
+		return;
 
-	if (gsgpu_cp_wait_done(adev) == false)
-		return  ~0ULL;
+	gsgpu_cmd_exec_nowait(adev, cmd, arg0, arg1);
 
+	if (!gsgpu_cp_wait_done(adev))
+		return;
+}
+
+/**
+ * gsgpu_cmd_exec_nowait --- Execute a command on the CP without blocking.
+ *
+ * This is the non-blocking version of gsgpu_cmd_exec_nowait. Call this
+ * if you need to execute a command on the CP in, for instance, IRQ context.
+ *
+ * @adev GSGPU device object
+ * @cmd Command to execute
+ * @arg0 Argument 0
+ * @arg1 Argument 1
+ */
+void gsgpu_cmd_exec_nowait(struct gsgpu_device *adev, uint32_t cmd,
+			   uint32_t arg0, uint32_t arg1)
+{
 	writel(GSCMD_STS_NULL, ((void __iomem *)adev->rmmio) + GSGPU_STATUS);
 
 	writel(cmd, ((void __iomem *)adev->rmmio) + GSGPU_COMMAND);
@@ -51,14 +75,6 @@ uint64_t gsgpu_cmd_exec(struct gsgpu_device *adev, uint32_t cmd,
 	writel(arg1, ((void __iomem *)adev->rmmio) + GSGPU_ARGUMENT1);
 
 	writel(1, ((void __iomem *)adev->rmmio) + GSGPU_EC_INT);
-
-	if (gsgpu_cp_wait_done(adev) == false)
-		return  ~0ULL;
-
-	ret = readl(((void __iomem *)adev->rmmio) + GSGPU_RETURN0);
-	ret |= (uint64_t)readl(((void __iomem *)adev->rmmio) + GSGPU_RETURN1)<<32;
-
-	return ret;
 }
 
 /*
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_mmu.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_mmu.c
index 67e1564e1813..9968e07f4262 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_mmu.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_mmu.c
@@ -478,10 +478,10 @@ static int mmu_vm_fault_interrupt_state(struct gsgpu_device *adev,
 {
 	switch (state) {
 	case GSGPU_IRQ_STATE_DISABLE:
-		gsgpu_cmd_exec(adev, GSCMD(GSCMD_MMU, MMU_SET_EXC), 0, ~1);
+		gsgpu_cmd_exec_nowait(adev, GSCMD(GSCMD_MMU, MMU_SET_EXC), 0, ~1);
 		break;
 	case GSGPU_IRQ_STATE_ENABLE:
-		gsgpu_cmd_exec(adev, GSCMD(GSCMD_MMU, MMU_SET_EXC), 1, ~1);
+		gsgpu_cmd_exec_nowait(adev, GSCMD(GSCMD_MMU, MMU_SET_EXC), 1, ~1);
 		break;
 	default:
 		break;
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index d26818ce74c2..04df236564bd 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -1139,8 +1139,10 @@ int gsgpu_device_init(struct gsgpu_device *adev,
 void gsgpu_device_fini(struct gsgpu_device *adev);
 int gsgpu_gpu_wait_for_idle(struct gsgpu_device *adev);
 
-uint64_t gsgpu_cmd_exec(struct gsgpu_device *adev, uint32_t cmd,
-			uint32_t arg0, uint32_t arg1);
+void gsgpu_cmd_exec(struct gsgpu_device *adev, uint32_t cmd,
+		    uint32_t arg0, uint32_t arg1);
+void gsgpu_cmd_exec_nowait(struct gsgpu_device *adev, uint32_t cmd,
+			   uint32_t arg0, uint32_t arg1);
 uint32_t gsgpu_mm_rreg(struct gsgpu_device *adev, uint32_t reg,
 			uint32_t acc_flags);
 void gsgpu_mm_wreg(struct gsgpu_device *adev, uint32_t reg, uint32_t v);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_cp.h b/drivers/gpu/drm/gsgpu/include/gsgpu_cp.h
index 180555ae32b4..eda6c0be7ad4 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_cp.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_cp.h
@@ -10,14 +10,15 @@ int gsgpu_cp_enable(struct gsgpu_device *adev, bool enable);
 
 int gsgpu_cp_fini(struct gsgpu_device *adev);
 
+/*
+ * Wait for the Command Processor to finish. If we timed out,
+ * return false. Otherwise return true.
+ */
 static inline bool gsgpu_cp_wait_done(struct gsgpu_device *adev)
 {
-	int i;
-	for (i = 0; i < adev->usec_timeout; i++) {
-
+	for (int i = 0; i < adev->usec_timeout; i++) {
 		if (RREG32(GSGPU_STATUS) == GSCMD_STS_DONE)
 			return true;
-
 		msleep(1);
 	}
 
-- 
2.43.0


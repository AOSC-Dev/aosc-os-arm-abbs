From 4b70122b5064d906ccf1a930966a7e1b016589b8 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Mon, 16 Oct 2023 16:55:42 +0800
Subject: [PATCH] gsgpu_xdma: coding style fixes, and make sure all tests run

---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_xdma.c | 43 ++++++++++----------------
 1 file changed, 17 insertions(+), 26 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_xdma.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_xdma.c
index df2f96d2b051..686dc39eeba6 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_xdma.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_xdma.c
@@ -13,6 +13,9 @@ static void xdma_set_irq_funcs(struct gsgpu_device *adev);
 static int xdma_set_pte_pde_test(struct gsgpu_ring *ring, long timeout);
 static int xdma_copy_pte_test(struct gsgpu_ring *ring, long timeout);
 static int xdma_fill_test(struct gsgpu_ring *ring, long timeout);
+static int xdma_ring_test_ring(struct gsgpu_ring *ring);
+static int xdma_ring_test_ib(struct gsgpu_ring *ring, long timeout);
+static int xdma_ring_test_xdma(struct gsgpu_ring *ring, long timeout);
 
 /*
  * xDMA
@@ -230,8 +233,7 @@ static int xdma_start(struct gsgpu_device *adev)
 static int xdma_ring_test_ring(struct gsgpu_ring *ring)
 {
 	struct gsgpu_device *adev = ring->adev;
-	unsigned i;
-	unsigned index;
+	unsigned index, i;
 	int r;
 	u32 tmp;
 	u64 gpu_addr;
@@ -295,11 +297,11 @@ static int xdma_ring_test_ib(struct gsgpu_ring *ring, long timeout)
 	unsigned index;
 	u32 tmp = 0;
 	u64 gpu_addr;
-	long r;
+	int r;
 
 	r = gsgpu_device_wb_get(adev, &index);
 	if (r) {
-		dev_err(adev->dev, "(%ld) failed to allocate wb slot\n", r);
+		dev_err(adev->dev, "(%d) failed to allocate wb slot\n", r);
 		return r;
 	}
 
@@ -309,7 +311,7 @@ static int xdma_ring_test_ib(struct gsgpu_ring *ring, long timeout)
 	memset(&ib, 0, sizeof(ib));
 	r = gsgpu_ib_get(adev, NULL, 256, &ib);
 	if (r) {
-		DRM_ERROR("gsgpu: failed to get ib (%ld).\n", r);
+		DRM_ERROR("gsgpu: failed to get ib (%d).\n", r);
 		goto err0;
 	}
 
@@ -329,7 +331,7 @@ static int xdma_ring_test_ib(struct gsgpu_ring *ring, long timeout)
 		r = -ETIMEDOUT;
 		goto err1;
 	} else if (r < 0) {
-		DRM_ERROR("gsgpu: %s fence wait failed (%ld).\n", ring->name, r);
+		DRM_ERROR("gsgpu: %s fence wait failed (%d).\n", ring->name, r);
 		goto err1;
 	}
 	tmp = le32_to_cpu(adev->wb.wb[index]);
@@ -360,24 +362,15 @@ static int xdma_ring_test_ib(struct gsgpu_ring *ring, long timeout)
  */
 static int xdma_ring_test_xdma(struct gsgpu_ring *ring, long timeout)
 {
-	int r;
-
-	r = xdma_set_pte_pde_test(ring, timeout);
-	if (r <= 0) {
+	int r = xdma_set_pte_pde_test(ring, timeout);
+	if (r < 0)
 		return r;
-	}
 
 	r = xdma_copy_pte_test(ring, timeout);
-	if (r <= 0) {
+	if (r < 0)
 		return r;
-	}
-
-	r = xdma_fill_test(ring, timeout);
-	if (r > 0) {
-		r = 0;
-	}
 
-	return r;
+	return xdma_fill_test(ring, timeout);
 }
 
 void xdma_ring_test_xdma_loop(struct gsgpu_ring *ring, long timeout)
@@ -725,6 +718,7 @@ static int xdma_early_init(void *handle)
 {
 	struct gsgpu_device *adev = (struct gsgpu_device *)handle;
 
+	/* This cannot be greater than GSGPU_MAX_XDMA_INSTANCES */
 	adev->xdma.num_instances = 1;
 
 	xdma_set_ring_funcs(adev);
@@ -763,12 +757,10 @@ static int xdma_sw_init(void *handle)
 		ring = &adev->xdma.instance[i].ring;
 		ring->ring_obj = NULL;
 
-		sprintf(ring->name, "xdma%d", i);
+		snprintf(ring->name, sizeof(ring->name), "xdma%d", i);
 		r = gsgpu_ring_init(adev, ring, 256,
 				     &adev->xdma.trap_irq,
-				     (i == 0) ?
-				     GSGPU_XDMA_IRQ_TRAP0 :
-				     GSGPU_XDMA_IRQ_TRAP1);
+				     (i == 0) ? GSGPU_XDMA_IRQ_TRAP0 : GSGPU_XDMA_IRQ_TRAP1);
 		if (r)
 			return r;
 	}
@@ -864,7 +856,7 @@ static int xdma_process_trap_irq(struct gsgpu_device *adev,
 
 	instance_id = (entry->ring_id & 0x3) >> 0;
 	queue_id = (entry->ring_id & 0xc) >> 2;
-	DRM_DEBUG("IH: XDMA trap\n");
+	DRM_DEBUG("IH: XDMA trap instance %d queue %d\n", instance_id, queue_id);
 	switch (instance_id) {
 	case 0:
 		switch (queue_id) {
@@ -1049,8 +1041,7 @@ static void xdma_emit_fill_buffer(struct gsgpu_ib *ib,
 	height = 1;
 	dst_umap = (dst_offset >= adev->gmc.vram_start &&
 		    dst_offset < adev->gmc.vram_end) ?
-			   GSGPU_XDMA_FLAG_UMAP :
-			   0;
+			   GSGPU_XDMA_FLAG_UMAP : 0;
 
 	/*RGBA8 == 4 bytes per pixles*/
 	width = byte_count / 4;
-- 
2.43.0


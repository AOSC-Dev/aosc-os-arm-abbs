From 0f02cd09b90a28dd6cf28342c83b7cf0aa8b76b5 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Mon, 25 Sep 2023 16:24:15 +0800
Subject: [PATCH] gsgpu: convert to Linux IRQ interfaces

Following patch serie https://patchwork.freedesktop.org/patch/448254/
we convert the drm IRQ install/uninstall calls to Linux IRQ interfaces
a la radeon.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c     |  1 -
 drivers/gpu/drm/gsgpu/gpu/gsgpu_irq.c     | 31 ++++++++++++++++++++---
 drivers/gpu/drm/gsgpu/include/gsgpu_irq.h |  1 -
 3 files changed, 28 insertions(+), 5 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
index 18ff2d2f406e..30b5d3c7ccc8 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
@@ -473,7 +473,6 @@ static struct drm_driver kms_driver = {
 	.postclose = gsgpu_driver_postclose_kms,
 	.lastclose = gsgpu_driver_lastclose_kms,
 	.unload = gsgpu_driver_unload_kms,
-	.irq_handler = gsgpu_irq_handler,
 	.ioctls = gsgpu_ioctls_kms,
 	.gem_free_object_unlocked = gsgpu_gem_object_free,
 	.gem_open_object = gsgpu_gem_object_open,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_irq.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_irq.c
index 2962a699fd9d..699d7e551685 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_irq.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_irq.c
@@ -78,7 +78,7 @@ void gsgpu_irq_disable_all(struct gsgpu_device *adev)
  * Returns:
  * result of handling the IRQ, as defined by &irqreturn_t
  */
-irqreturn_t gsgpu_irq_handler(int irq, void *arg)
+static irqreturn_t gsgpu_irq_handler(int irq, void *arg)
 {
 	struct drm_device *dev = (struct drm_device *) arg;
 	struct gsgpu_device *adev = dev->dev_private;
@@ -122,6 +122,31 @@ static irqreturn_t gsgpu_dc_irq_handler(int irq, void *arg)
 	return IRQ_HANDLED;
 }
 
+static int gsgpu_irq_install(struct gsgpu_device *adev, int irq)
+{
+	struct drm_device *dev = adev->ddev;
+	int ret;
+
+	if (irq == IRQ_NOTCONNECTED)
+		return -ENOTCONN;
+
+	/* PCI devices require shared interrupts. */
+	ret = request_irq(irq, gsgpu_irq_handler,
+			  IRQF_SHARED, dev->driver->name, dev);
+	if (ret)
+		return ret;
+
+	return 0;
+}
+
+static void gsgpu_irq_uninstall(struct gsgpu_device *adev)
+{
+	struct drm_device *dev = adev->ddev;
+	struct pci_dev *pdev = to_pci_dev(dev->dev);
+
+	free_irq(pdev->irq, dev);
+}
+
 /**
  * gsgpu_msi_ok - check whether MSI functionality is enabled
  *
@@ -175,7 +200,7 @@ int gsgpu_irq_init(struct gsgpu_device *adev)
 	INIT_WORK(&adev->reset_work, gsgpu_irq_reset_work_func);
 
 	adev->irq.installed = true;
-	r = drm_irq_install(adev->ddev, adev->ddev->pdev->irq);
+	r = gsgpu_irq_install(adev, adev->ddev->pdev->irq);
 	if (r) {
 		adev->irq.installed = false;
 		cancel_work_sync(&adev->reset_work);
@@ -215,7 +240,7 @@ void gsgpu_irq_fini(struct gsgpu_device *adev)
 	unsigned i, j;
 
 	if (adev->irq.installed) {
-		drm_irq_uninstall(adev->ddev);
+		gsgpu_irq_uninstall(adev);
 		adev->irq.installed = false;
 		if (adev->irq.msi_enabled)
 			pci_disable_msi(adev->pdev);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_irq.h b/drivers/gpu/drm/gsgpu/include/gsgpu_irq.h
index 93ed6389fad1..38b09762a78f 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_irq.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_irq.h
@@ -61,7 +61,6 @@ struct gsgpu_irq {
 };
 
 void gsgpu_irq_disable_all(struct gsgpu_device *adev);
-irqreturn_t gsgpu_irq_handler(int irq, void *arg);
 
 int gsgpu_irq_init(struct gsgpu_device *adev);
 void gsgpu_irq_fini(struct gsgpu_device *adev);
-- 
2.43.0


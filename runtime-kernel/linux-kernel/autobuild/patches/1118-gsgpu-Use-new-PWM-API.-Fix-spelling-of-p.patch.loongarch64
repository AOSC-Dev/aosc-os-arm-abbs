From cc30ddc19cabaefe718e57617cc4c46ec5c21a5e Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Fri, 29 Sep 2023 16:01:20 +0800
Subject: [PATCH] gsgpu: Use new PWM API. Fix spelling of 'period'.

---
 drivers/gpu/drm/gsgpu/bridge/bridge_phy.h     |  7 +++---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_backlight.c   | 25 ++++++++++++++-----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c    |  2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu.h         |  1 +
 .../gpu/drm/gsgpu/include/gsgpu_dc_resource.h |  2 +-
 .../gpu/drm/gsgpu/include/gsgpu_dc_vbios.h    |  2 +-
 drivers/pwm/pwm-ls.c                          | 14 +++++------
 7 files changed, 32 insertions(+), 21 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/bridge/bridge_phy.h b/drivers/gpu/drm/gsgpu/bridge/bridge_phy.h
index 653020ae9d57..4248a2385a52 100644
--- a/drivers/gpu/drm/gsgpu/bridge/bridge_phy.h
+++ b/drivers/gpu/drm/gsgpu/bridge/bridge_phy.h
@@ -272,10 +272,9 @@ struct gsgpu_bridge_phy {
 	const struct bridge_phy_hdmi_aux_funcs *hdmi_aux_funcs;
 };
 
-struct gsgpu_dc_bridge
-*dc_bridge_construct(struct gsgpu_dc *dc,
-		     struct encoder_resource *encoder_res,
-		     struct connector_resource *connector_res);
+struct gsgpu_dc_bridge *dc_bridge_construct(struct gsgpu_dc *dc,
+					    struct encoder_resource *encoder_res,
+					    struct connector_resource *connector_res);
 int gsgpu_dc_bridge_init(struct gsgpu_device *adev, int link_index);
 struct gsgpu_bridge_phy *bridge_phy_alloc(struct gsgpu_dc_bridge *dc_bridge);
 int bridge_phy_register(struct gsgpu_bridge_phy *phy,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_backlight.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_backlight.c
index a003bf708d50..458915749783 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_backlight.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_backlight.c
@@ -7,6 +7,8 @@
 #include "gsgpu_backlight.h"
 #include "bridge_phy.h"
 
+#define GSGPU_PWM_CONSUMER_ID	"Loongson_bl"
+
 static bool gsgpu_backlight_get_hw_status(struct gsgpu_backlight *ls_bl)
 {
 	return (gpio_get_value(GPIO_LCD_VDD) && gpio_get_value(GPIO_LCD_EN)
@@ -139,12 +141,13 @@ static void gsgpu_backlight_set(struct gsgpu_backlight *ls_bl,
 	pwm_config(ls_bl->pwm, duty_ns, period_ns);
 }
 
-static int gsgpu_backlight_hw_request_init(struct gsgpu_backlight *ls_bl)
+static int gsgpu_backlight_hw_request_init(struct gsgpu_device *adev,
+					   struct gsgpu_backlight *ls_bl)
 {
 	int ret = 0;
 	bool pwm_enable_default;
 
-	ls_bl->pwm = pwm_request(ls_bl->pwm_id, "Loongson_bl");
+	ls_bl->pwm = pwm_get(adev->ddev->dev, GSGPU_PWM_CONSUMER_ID);
 	if (IS_ERR(ls_bl->pwm)) {
 		DRM_ERROR("Failed to get the pwm chip\n");
 		ls_bl->pwm = NULL;
@@ -154,7 +157,6 @@ static int gsgpu_backlight_hw_request_init(struct gsgpu_backlight *ls_bl)
 	pwm_enable_default = pwm_is_enabled(ls_bl->pwm);
 	/* pwm init.*/
 	pwm_disable(ls_bl->pwm);
-	pwm_set_polarity(ls_bl->pwm, ls_bl->pwm_polarity);
 	gsgpu_backlight_set(ls_bl, ls_bl->level);
 	if (pwm_enable_default)
 		pwm_enable(ls_bl->pwm);
@@ -180,11 +182,16 @@ static int gsgpu_backlight_hw_request_init(struct gsgpu_backlight *ls_bl)
 ERROR_EN:
 	gpio_free(GPIO_LCD_VDD);
 ERROR_VDD:
-	pwm_free(ls_bl->pwm);
+	pwm_put(ls_bl->pwm);
 ERROR_PWM:
 	return -ENODEV;
 }
 
+static struct pwm_lookup gsgpu_pwm_lookup[] = {
+	PWM_LOOKUP("ls-pwm", 0, NULL, GSGPU_PWM_CONSUMER_ID, 100000,
+		   PWM_POLARITY_NORMAL),
+};
+
 static struct gsgpu_backlight
 *gsgpu_backlight_init(struct gsgpu_device *adev, int index)
 {
@@ -215,12 +222,18 @@ static struct gsgpu_backlight
 	ls_bl->pwm_id = pwm_res->pwm;
 	/* 0:low start, 1:high start */
 	ls_bl->pwm_polarity = pwm_res->polarity;
-	ls_bl->pwm_period = pwm_res->peroid;
+	ls_bl->pwm_period = pwm_res->period;
 
 	DRM_INFO("pwm: id=%d, period=%dns, polarity=%d.\n",
 		 ls_bl->pwm_id, ls_bl->pwm_period, ls_bl->pwm_polarity);
 
-	ret = gsgpu_backlight_hw_request_init(ls_bl);
+	for (int i = 0; i < ARRAY_SIZE(gsgpu_pwm_lookup); i++) {
+		gsgpu_pwm_lookup[i].period = pwm_res->period;
+		gsgpu_pwm_lookup[i].polarity = pwm_res->polarity;
+	}
+	pwm_add_table(gsgpu_pwm_lookup, ARRAY_SIZE(gsgpu_pwm_lookup));
+
+	ret = gsgpu_backlight_hw_request_init(adev, ls_bl);
 	if (ret)
 		goto ERROR_HW;
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c
index eee84baacf90..25c4a1d09c45 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c
@@ -591,7 +591,7 @@ static bool vbios_create_pwm_resource(struct gsgpu_vbios *vbios, void *data, u32
 	pwm_resource->feature = vb_pwm.feature;
 	pwm_resource->pwm = vb_pwm.pwm;
 	pwm_resource->polarity = vb_pwm.polarity;
-	pwm_resource->peroid = vb_pwm.peroid;
+	pwm_resource->period = vb_pwm.period;
 
 	list_add_tail(&pwm_resource->base.node, &vbios->resource_list);
 
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index f95794e185d5..7398046ef536 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -42,6 +42,7 @@
 #include "gsgpu_hmm.h"
 #include "gsgpu_gmc.h"
 #include "gsgpu_dc.h"
+#include "gsgpu_dc_resource.h"
 #include "gsgpu_gart.h"
 #include "gsgpu_zip_meta.h"
 #include "gsgpu_debugfs.h"
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_dc_resource.h b/drivers/gpu/drm/gsgpu/include/gsgpu_dc_resource.h
index e35e6d7aca43..7788aa02e845 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_dc_resource.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_dc_resource.h
@@ -54,7 +54,7 @@ struct pwm_resource {
 	u32 feature;
 	u8 pwm;
 	u8 polarity;
-	u32 peroid;
+	u32 period;
 };
 
 struct crtc_resource {
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_dc_vbios.h b/drivers/gpu/drm/gsgpu/include/gsgpu_dc_vbios.h
index a98d5748a20b..7eef8c7bef01 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_dc_vbios.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_dc_vbios.h
@@ -78,7 +78,7 @@ struct vbios_pwm {
 	u32 feature;
 	u8 pwm;
 	u8 polarity;
-	u32 peroid;
+	u32 period;
 } __packed;
 
 struct vbios_encoder {
diff --git a/drivers/pwm/pwm-ls.c b/drivers/pwm/pwm-ls.c
index 8c0664a88af1..486d05753a98 100644
--- a/drivers/pwm/pwm-ls.c
+++ b/drivers/pwm/pwm-ls.c
@@ -210,10 +210,8 @@ static int ls_pwm_probe(struct platform_device *pdev)
 	struct device_node *np = pdev->dev.of_node;
 	u32 clk;
 
-	if (pdev->id > 3)
-		dev_err(&pdev->dev, "Currently only four PWM controller is implemented,namely, 0,1,2,3.\n");
 	pwm = devm_kzalloc(&pdev->dev, sizeof(*pwm), GFP_KERNEL);
-	if(!pwm){
+	if (!pwm){
 		dev_err(&pdev->dev, "failed to allocate memory\n");
 		return -ENOMEM;
 	}
@@ -230,7 +228,7 @@ static int ls_pwm_probe(struct platform_device *pdev)
 
 	dev_info(&pdev->dev, "pwm->clock_frequency=%llu", pwm->clock_frequency);
 
-	mem = platform_get_resource(pdev,IORESOURCE_MEM, 0);
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if(!mem){
 		dev_err(&pdev->dev, "no mem resource?\n");
 		return -ENODEV;
@@ -263,9 +261,9 @@ static int ls_pwm_remove(struct platform_device *pdev)
 
 #ifdef CONFIG_OF
 static struct of_device_id ls_pwm_id_table[] = {
-	{.compatible = "loongson,ls7a-pwm"},
-	{.compatible = "loongson,ls-pwm"},
-	{.compatible = "loongson,ls2k-pwm"},
+	{ .compatible = "loongson,ls7a-pwm" },
+	{ .compatible = "loongson,ls-pwm" },
+	{ .compatible = "loongson,ls2k-pwm" },
 	{},
 };
 MODULE_DEVICE_TABLE(of, ls_pwm_id_table);
@@ -321,6 +319,6 @@ static struct platform_driver ls_pwm_driver = {
 module_platform_driver(ls_pwm_driver);
 
 MODULE_AUTHOR("Juxin Gao <gaojuxin@loongson.com>");
-MODULE_DESCRIPTION("Loongson Pwm Driver");
+MODULE_DESCRIPTION("Loongson PWM Driver");
 MODULE_LICENSE("GPL");
 MODULE_ALIAS("platform:ls-pwm");
-- 
2.43.0


From 2ba7ec5d9ceb47c9bdba456c100d3facb137d8c8 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Tue, 26 Sep 2023 14:24:29 +0800
Subject: [PATCH] gsgpu: Use the pin/unpin interfaces. Adapt to name changes in
 ttm_device.

---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c         |  4 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c     | 10 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c    |  9 +---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c        | 16 +++---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     | 51 ++++++--------------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c        | 10 ++--
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h |  2 +-
 7 files changed, 39 insertions(+), 63 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
index 925218dcb8cb..72a020c3d4be 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
@@ -282,7 +282,7 @@ static void gsgpu_cs_get_threshold_for_moves(struct gsgpu_device *adev,
 	}
 
 	total_vram = adev->gmc.real_vram_size - atomic64_read(&adev->vram_pin_size);
-	used_vram = gsgpu_vram_mgr_usage(&adev->mman.bdev.man[TTM_PL_VRAM]);
+	used_vram = gsgpu_vram_mgr_usage(adev->mman.bdev.man_drv[TTM_PL_VRAM]);
 	free_vram = used_vram >= total_vram ? 0 : total_vram - used_vram;
 
 	spin_lock(&adev->mm_stats.lock);
@@ -329,7 +329,7 @@ static void gsgpu_cs_get_threshold_for_moves(struct gsgpu_device *adev,
 	if (!gsgpu_gmc_vram_full_visible(&adev->gmc)) {
 		u64 total_vis_vram = adev->gmc.visible_vram_size;
 		u64 used_vis_vram =
-			gsgpu_vram_mgr_vis_usage(&adev->mman.bdev.man[TTM_PL_VRAM]);
+			gsgpu_vram_mgr_vis_usage(adev->mman.bdev.man_drv[TTM_PL_VRAM]);
 
 		if (used_vis_vram < total_vis_vram) {
 			u64 free_vis_vram = total_vis_vram - used_vis_vram;
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
index 24127a021f79..8e70b7b17669 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
@@ -1494,6 +1494,11 @@ void gsgpu_device_fini(struct gsgpu_device *adev)
 	gsgpu_debugfs_regs_cleanup(adev);
 }
 
+/* TODO: We need to understand what this does.
+ * This is called during device suspension and resumption, presumably to validate
+ * buffer objects. Since in the latest AMD driver this has been replaced with
+ * generic TTM calls we need port those changes over.
+ */
 static int gsgpu_zip_gem_bo_validate(int id, void *ptr, void *data)
 {
 	struct drm_gem_object *gobj = ptr;
@@ -1529,7 +1534,6 @@ static int gsgpu_zip_gem_bo_validate(int id, void *ptr, void *data)
 			if (!bo->placements[i].lpfn ||
 				(lpfn && lpfn < bo->placements[i].lpfn))
 				bo->placements[i].lpfn = lpfn;
-			bo->placements[i].flags |= TTM_PL_FLAG_NO_EVICT;
 		}
 
 		r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
@@ -1565,7 +1569,6 @@ static int gsgpu_zip_gem_bo_evict(int id, void *ptr, void *data)
 
 		for (i = 0; i < bo->placement.num_placement; i++) {
 			bo->placements[i].lpfn = 0;
-			bo->placements[i].flags &= ~TTM_PL_FLAG_NO_EVICT;
 		}
 
 		r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
@@ -2059,8 +2062,7 @@ static int gsgpu_device_reset(struct gsgpu_device *adev)
 				atomic_inc(&adev->vram_lost_counter);
 			}
 
-			r = gsgpu_gtt_mgr_recover(
-				&adev->mman.bdev.man[TTM_PL_TT]);
+			r = gsgpu_gtt_mgr_recover(adev->mman.bdev.man_drv[TTM_PL_TT]);
 			if (r)
 				goto out;
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
index dd81409e5726..1697cb923875 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
@@ -100,10 +100,7 @@ static void gsgpu_display_unpin_work_func(struct work_struct *__work)
 	/* unpin of the old buffer */
 	r = gsgpu_bo_reserve(work->old_abo, true);
 	if (likely(r == 0)) {
-		r = gsgpu_bo_unpin(work->old_abo);
-		if (unlikely(r != 0)) {
-			DRM_ERROR("failed to unpin buffer after flip\n");
-		}
+		gsgpu_bo_unpin(work->old_abo);
 		gsgpu_bo_unreserve(work->old_abo);
 	} else
 		DRM_ERROR("failed to reserve buffer after flip\n");
@@ -223,9 +220,7 @@ int gsgpu_display_crtc_page_flip_target(struct drm_crtc *crtc,
 		goto cleanup;
 	}
 unpin:
-	if (unlikely(gsgpu_bo_unpin(new_abo) != 0)) {
-		DRM_ERROR("failed to unpin new abo in error path\n");
-	}
+	gsgpu_bo_unpin(new_abo);
 unreserve:
 	gsgpu_bo_unreserve(new_abo);
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c
index 97ea094b214f..675fe31c55c1 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c
@@ -298,13 +298,13 @@ static int gsgpu_info_ioctl(struct drm_device *dev, void *data, struct drm_file
 		ui64 = atomic64_read(&adev->num_vram_cpu_page_faults);
 		return copy_to_user(out, &ui64, min(size, 8u)) ? -EFAULT : 0;
 	case GSGPU_INFO_VRAM_USAGE:
-		ui64 = gsgpu_vram_mgr_usage(&adev->mman.bdev.man[TTM_PL_VRAM]);
+		ui64 = gsgpu_vram_mgr_usage(adev->mman.bdev.man_drv[TTM_PL_VRAM]);
 		return copy_to_user(out, &ui64, min(size, 8u)) ? -EFAULT : 0;
 	case GSGPU_INFO_VIS_VRAM_USAGE:
-		ui64 = gsgpu_vram_mgr_vis_usage(&adev->mman.bdev.man[TTM_PL_VRAM]);
+		ui64 = gsgpu_vram_mgr_vis_usage(adev->mman.bdev.man_drv[TTM_PL_VRAM]);
 		return copy_to_user(out, &ui64, min(size, 8u)) ? -EFAULT : 0;
 	case GSGPU_INFO_GTT_USAGE:
-		ui64 = gsgpu_gtt_mgr_usage(&adev->mman.bdev.man[TTM_PL_TT]);
+		ui64 = gsgpu_gtt_mgr_usage(adev->mman.bdev.man_drv[TTM_PL_TT]);
 		return copy_to_user(out, &ui64, min(size, 8u)) ? -EFAULT : 0;
 	case GSGPU_INFO_GDS_CONFIG:
 		return -ENODATA;
@@ -315,7 +315,7 @@ static int gsgpu_info_ioctl(struct drm_device *dev, void *data, struct drm_file
 			atomic64_read(&adev->vram_pin_size);
 		vram_gtt.vram_cpu_accessible_size = adev->gmc.visible_vram_size -
 			atomic64_read(&adev->visible_pin_size);
-		vram_gtt.gtt_size = adev->mman.bdev.man[TTM_PL_TT].size;
+		vram_gtt.gtt_size = adev->mman.bdev.man_drv[TTM_PL_TT]->size;
 		vram_gtt.gtt_size *= PAGE_SIZE;
 		vram_gtt.gtt_size -= atomic64_read(&adev->gart_pin_size);
 		return copy_to_user(out, &vram_gtt,
@@ -329,7 +329,7 @@ static int gsgpu_info_ioctl(struct drm_device *dev, void *data, struct drm_file
 		mem.vram.usable_heap_size = adev->gmc.real_vram_size -
 			atomic64_read(&adev->vram_pin_size);
 		mem.vram.heap_usage =
-			gsgpu_vram_mgr_usage(&adev->mman.bdev.man[TTM_PL_VRAM]);
+			gsgpu_vram_mgr_usage(adev->mman.bdev.man_drv[TTM_PL_VRAM]);
 		mem.vram.max_allocation = mem.vram.usable_heap_size * 3 / 4;
 
 		mem.cpu_accessible_vram.total_heap_size =
@@ -337,16 +337,16 @@ static int gsgpu_info_ioctl(struct drm_device *dev, void *data, struct drm_file
 		mem.cpu_accessible_vram.usable_heap_size = adev->gmc.visible_vram_size -
 			atomic64_read(&adev->visible_pin_size);
 		mem.cpu_accessible_vram.heap_usage =
-			gsgpu_vram_mgr_vis_usage(&adev->mman.bdev.man[TTM_PL_VRAM]);
+			gsgpu_vram_mgr_vis_usage(adev->mman.bdev.man_drv[TTM_PL_VRAM]);
 		mem.cpu_accessible_vram.max_allocation =
 			mem.cpu_accessible_vram.usable_heap_size * 3 / 4;
 
-		mem.gtt.total_heap_size = adev->mman.bdev.man[TTM_PL_TT].size;
+		mem.gtt.total_heap_size = adev->mman.bdev.man_drv[TTM_PL_TT]->size;
 		mem.gtt.total_heap_size *= PAGE_SIZE;
 		mem.gtt.usable_heap_size = mem.gtt.total_heap_size -
 			atomic64_read(&adev->gart_pin_size);
 		mem.gtt.heap_usage =
-			gsgpu_gtt_mgr_usage(&adev->mman.bdev.man[TTM_PL_TT]);
+			gsgpu_gtt_mgr_usage(adev->mman.bdev.man_drv[TTM_PL_TT]);
 		mem.gtt.max_allocation = mem.gtt.usable_heap_size * 3 / 4;
 
 		return copy_to_user(out, &mem,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index 2b816b1d47ab..93f966e7d01b 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -56,7 +56,7 @@ static void gsgpu_bo_destroy(struct ttm_buffer_object *tbo)
 	struct gsgpu_device *adev = gsgpu_ttm_adev(tbo->bdev);
 	struct gsgpu_bo *bo = ttm_to_gsgpu_bo(tbo);
 
-	if (bo->pin_count > 0)
+	if (bo->tbo.pin_count > 0)
 		gsgpu_bo_subtract_pin_size(bo);
 
 	gsgpu_bo_kunmap(bo);
@@ -114,8 +114,9 @@ void gsgpu_bo_placement_from_domain(struct gsgpu_bo *abo, u32 domain)
 		places[c].lpfn = 0;
 		places[c].flags = TTM_PL_FLAG_UNCACHED | TTM_PL_FLAG_VRAM | TTM_PL_FLAG_WC;
 
-		if (flags & GSGPU_GEM_CREATE_COMPRESSED_MASK)
-			places[c].flags |= TTM_PL_FLAG_NO_EVICT;
+		/* TODO: We need to understand how compressed buffer works */
+		/* if (flags & GSGPU_GEM_CREATE_COMPRESSED_MASK) */
+		/* 	places[c].flags |= TTM_PL_FLAG_NO_EVICT; */
 
 		if (flags & GSGPU_GEM_CREATE_CPU_GTT_USWC)
 			places[c].flags |= TTM_PL_FLAG_WC;
@@ -348,7 +349,7 @@ static bool gsgpu_bo_validate_size(struct gsgpu_device *adev,
 	 * allow fall back to GTT
 	 */
 	if (domain & GSGPU_GEM_DOMAIN_GTT) {
-		man = &adev->mman.bdev.man[TTM_PL_TT];
+		man = adev->mman.bdev.man_drv[TTM_PL_TT];
 
 		if (size < (man->size << PAGE_SHIFT))
 			return true;
@@ -357,7 +358,7 @@ static bool gsgpu_bo_validate_size(struct gsgpu_device *adev,
 	}
 
 	if (domain & GSGPU_GEM_DOMAIN_VRAM) {
-		man = &adev->mman.bdev.man[TTM_PL_VRAM];
+		man = adev->mman.bdev.man_drv[TTM_PL_VRAM];
 
 		if (size < (man->size << PAGE_SHIFT))
 			return true;
@@ -611,7 +612,7 @@ int gsgpu_bo_validate(struct gsgpu_bo *bo)
 	uint32_t domain;
 	int r;
 
-	if (bo->pin_count)
+	if (bo->tbo.pin_count)
 		return 0;
 
 	domain = bo->preferred_domains;
@@ -828,13 +829,13 @@ int gsgpu_bo_pin_restricted(struct gsgpu_bo *bo, u32 domain,
 	 */
 	domain = gsgpu_bo_get_preferred_pin_domain(adev, domain);
 
-	if (bo->pin_count) {
+	if (bo->tbo.pin_count) {
 		uint32_t mem_type = bo->tbo.mem.mem_type;
 
 		if (!(domain & gsgpu_mem_type_to_domain(mem_type)))
 			return -EINVAL;
 
-		bo->pin_count++;
+		ttm_bo_pin(&bo->tbo);
 
 		if (max_offset != 0) {
 			u64 domain_start = bo->tbo.bdev->man[mem_type].gpu_offset;
@@ -861,7 +862,6 @@ int gsgpu_bo_pin_restricted(struct gsgpu_bo *bo, u32 domain,
 		if (!bo->placements[i].lpfn ||
 		    (lpfn && lpfn < bo->placements[i].lpfn))
 			bo->placements[i].lpfn = lpfn;
-		bo->placements[i].flags |= TTM_PL_FLAG_NO_EVICT;
 	}
 
 	r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
@@ -870,7 +870,7 @@ int gsgpu_bo_pin_restricted(struct gsgpu_bo *bo, u32 domain,
 		goto error;
 	}
 
-	bo->pin_count = 1;
+	ttm_bo_pin(&bo->tbo);
 
 	domain = gsgpu_mem_type_to_domain(bo->tbo.mem.mem_type);
 	if (domain == GSGPU_GEM_DOMAIN_VRAM) {
@@ -908,35 +908,14 @@ int gsgpu_bo_pin(struct gsgpu_bo *bo, u32 domain)
  *
  * Decreases the pin_count, and clears the flags if pin_count reaches 0.
  * Changes placement and pin size accordingly.
- *
- * Returns:
- * 0 for success or a negative error code on failure.
  */
-int gsgpu_bo_unpin(struct gsgpu_bo *bo)
+void gsgpu_bo_unpin(struct gsgpu_bo *bo)
 {
-	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
-	struct ttm_operation_ctx ctx = { false, false };
-	int r, i;
-
-	if (!bo->pin_count) {
-		dev_warn(adev->dev, "%p unpin not necessary\n", bo);
-		return 0;
-	}
-	bo->pin_count--;
-	if (bo->pin_count)
-		return 0;
+	ttm_bo_unpin(&bo->tbo);
+	if (bo->tbo.pin_count)
+		return;
 
 	gsgpu_bo_subtract_pin_size(bo);
-
-	for (i = 0; i < bo->placement.num_placement; i++) {
-		bo->placements[i].lpfn = 0;
-		bo->placements[i].flags &= ~TTM_PL_FLAG_NO_EVICT;
-	}
-	r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
-	if (unlikely(r))
-		dev_err(adev->dev, "%p validate failed for unpin\n", bo);
-
-	return r;
 }
 
 /**
@@ -1294,7 +1273,7 @@ u64 gsgpu_bo_gpu_offset(struct gsgpu_bo *bo)
 	WARN_ON_ONCE(bo->tbo.mem.mem_type == TTM_PL_TT &&
 		     !gsgpu_gtt_mgr_has_gart_addr(&bo->tbo.mem));
 	WARN_ON_ONCE(!ww_mutex_is_locked(&bo->tbo.resv->lock) &&
-		     !bo->pin_count);
+		     !bo->tbo.pin_count);
 	WARN_ON_ONCE(bo->tbo.mem.start == GSGPU_BO_INVALID_OFFSET);
 	WARN_ON_ONCE(bo->tbo.mem.mem_type == TTM_PL_VRAM &&
 		     !(bo->flags & GSGPU_GEM_CREATE_VRAM_CONTIGUOUS));
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
index 54af0405db42..7f5091eb77b6 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
@@ -187,7 +187,7 @@ static uint64_t gsgpu_mm_node_addr(struct ttm_buffer_object *bo,
 
 	if (mem->mem_type != TTM_PL_TT || gsgpu_gtt_mgr_has_gart_addr(mem)) {
 		addr = mm_node->start << PAGE_SHIFT;
-		addr += bo->bdev->man[mem->mem_type].gpu_offset;
+		addr += bo->bdev->man_drv[mem->mem_type]->gpu_offset;
 	}
 	return addr;
 }
@@ -561,7 +561,7 @@ static int gsgpu_bo_move(struct ttm_buffer_object *bo, bool evict,
  */
 static int gsgpu_ttm_io_mem_reserve(struct ttm_device *bdev, struct ttm_resource *mem)
 {
-	struct ttm_resource_manager *man = &bdev->man[mem->mem_type];
+	struct ttm_resource_manager *man = bdev->man_drv[mem->mem_type];
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bdev);
 	struct drm_mm_node *mm_node = mem->mm_node;
 
@@ -933,7 +933,7 @@ int gsgpu_ttm_alloc_gart(struct ttm_buffer_object *bo)
 	ttm_bo_mem_put(bo, &bo->mem);
 	bo->mem = tmp;
 	bo->offset = (bo->mem.start << PAGE_SHIFT) +
-		bo->bdev->man[bo->mem.mem_type].gpu_offset;
+		bo->bdev->man_drv[bo->mem.mem_type]->gpu_offset;
 
 	return 0;
 }
@@ -1641,7 +1641,7 @@ void gsgpu_ttm_fini(struct gsgpu_device *adev)
  */
 void gsgpu_ttm_set_buffer_funcs_status(struct gsgpu_device *adev, bool enable)
 {
-	struct ttm_resource_manager *man = &adev->mman.bdev.man[TTM_PL_VRAM];
+	struct ttm_resource_manager *man = adev->mman.bdev.man_drv[TTM_PL_VRAM];
 	uint64_t size;
 	int r;
 
@@ -1912,7 +1912,7 @@ static int gsgpu_mm_dump_table(struct seq_file *m, void *data)
 	unsigned ttm_pl = *(int *)node->info_ent->data;
 	struct drm_device *dev = node->minor->dev;
 	struct gsgpu_device *adev = dev->dev_private;
-	struct ttm_resource_manager *man = &adev->mman.bdev.man[ttm_pl];
+	struct ttm_resource_manager *man = adev->mman.bdev.man_drv[ttm_pl];
 	struct drm_printer p = drm_seq_file_printer(m);
 
 	man->func->debug(man, &p);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index 4bab1651aae6..27f62f50bb6f 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -213,7 +213,7 @@ void gsgpu_bo_unref(struct gsgpu_bo **bo);
 int gsgpu_bo_pin(struct gsgpu_bo *bo, u32 domain);
 int gsgpu_bo_pin_restricted(struct gsgpu_bo *bo, u32 domain,
 			     u64 min_offset, u64 max_offset);
-int gsgpu_bo_unpin(struct gsgpu_bo *bo);
+void gsgpu_bo_unpin(struct gsgpu_bo *bo);
 int gsgpu_bo_evict_vram(struct gsgpu_device *adev);
 int gsgpu_bo_init(struct gsgpu_device *adev);
 int gsgpu_bo_late_init(struct gsgpu_device *adev);
-- 
2.43.0


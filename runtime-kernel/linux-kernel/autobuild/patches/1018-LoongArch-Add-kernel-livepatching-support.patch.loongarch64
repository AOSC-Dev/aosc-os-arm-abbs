From 134dc14632c82a01fad6cc469d32f9852417cf07 Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhuacai@loongson.cn>
Date: Thu, 31 Dec 2020 15:13:33 +0800
Subject: [PATCH 18/43] LoongArch: Add kernel livepatching support

Signed-off-by: Jinyang He <hejinyang@loongson.cn>
Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
---
 arch/loongarch/Kconfig                   |  3 +++
 arch/loongarch/include/asm/livepatch.h   | 18 ++++++++++++++++++
 arch/loongarch/include/asm/thread_info.h |  2 ++
 kernel/livepatch/core.c                  |  6 +++++-
 4 files changed, 28 insertions(+), 1 deletion(-)
 create mode 100644 arch/loongarch/include/asm/livepatch.h

diff --git a/arch/loongarch/Kconfig b/arch/loongarch/Kconfig
index 01473b96a4..7fe61b97b6 100644
--- a/arch/loongarch/Kconfig
+++ b/arch/loongarch/Kconfig
@@ -114,6 +114,7 @@ config LOONGARCH
 	select HAVE_KPROBES
 	select HAVE_KPROBES_ON_FTRACE
 	select HAVE_KRETPROBES
+	select HAVE_LIVEPATCH
 	select HAVE_MOD_ARCH_SPECIFIC
 	select HAVE_NMI
 	select HAVE_OBJTOOL
@@ -659,6 +660,8 @@ config ARCH_MMAP_RND_BITS_MIN
 config ARCH_MMAP_RND_BITS_MAX
 	default 18
 
+source "kernel/livepatch/Kconfig"
+
 menu "Power management options"
 
 config ARCH_SUSPEND_POSSIBLE
diff --git a/arch/loongarch/include/asm/livepatch.h b/arch/loongarch/include/asm/livepatch.h
new file mode 100644
index 0000000000..7de5983038
--- /dev/null
+++ b/arch/loongarch/include/asm/livepatch.h
@@ -0,0 +1,18 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_LIVEPATCH_H
+#define _ASM_LIVEPATCH_H
+
+#include <asm/inst.h>
+
+static inline int klp_check_compiler_support(void)
+{
+	return 0;
+}
+
+static inline void klp_arch_set_pc(struct ftrace_regs *fregs, unsigned long ip)
+{
+	struct pt_regs *regs = ftrace_get_regs(fregs);
+
+	regs->csr_era = ip;
+}
+#endif /* _ASM_LIVEPATCH_H */
diff --git a/arch/loongarch/include/asm/thread_info.h b/arch/loongarch/include/asm/thread_info.h
index 1a3354ca05..ef0732d02a 100644
--- a/arch/loongarch/include/asm/thread_info.h
+++ b/arch/loongarch/include/asm/thread_info.h
@@ -84,6 +84,7 @@ register unsigned long current_stack_pointer __asm__("$sp");
 #define TIF_SINGLESTEP		16	/* Single Step */
 #define TIF_LSX_CTX_LIVE	17	/* LSX context must be preserved */
 #define TIF_LASX_CTX_LIVE	18	/* LASX context must be preserved */
+#define TIF_PATCH_PENDING	19	/* pending live patching update */
 
 #define _TIF_SIGPENDING		(1<<TIF_SIGPENDING)
 #define _TIF_NEED_RESCHED	(1<<TIF_NEED_RESCHED)
@@ -101,6 +102,7 @@ register unsigned long current_stack_pointer __asm__("$sp");
 #define _TIF_SINGLESTEP		(1<<TIF_SINGLESTEP)
 #define _TIF_LSX_CTX_LIVE	(1<<TIF_LSX_CTX_LIVE)
 #define _TIF_LASX_CTX_LIVE	(1<<TIF_LASX_CTX_LIVE)
+#define _TIF_PATCH_PENDING	(1<<TIF_PATCH_PENDING)
 
 #endif /* __KERNEL__ */
 #endif /* _ASM_THREAD_INFO_H */
diff --git a/kernel/livepatch/core.c b/kernel/livepatch/core.c
index 4bd2d5e10f..0d5a9abce5 100644
--- a/kernel/livepatch/core.c
+++ b/kernel/livepatch/core.c
@@ -196,7 +196,7 @@ static int klp_resolve_symbols(Elf_Shdr *sechdrs, const char *strtab,
 	int i, cnt, ret;
 	char sym_objname[MODULE_NAME_LEN];
 	char sym_name[KSYM_NAME_LEN];
-	Elf_Rela *relas;
+	Elf_Rela *relas, *last = NULL;
 	Elf_Sym *sym;
 	unsigned long sympos, addr;
 	bool sym_vmlinux;
@@ -217,6 +217,10 @@ static int klp_resolve_symbols(Elf_Shdr *sechdrs, const char *strtab,
 	relas = (Elf_Rela *) relasec->sh_addr;
 	/* For each rela in this klp relocation section */
 	for (i = 0; i < relasec->sh_size / sizeof(Elf_Rela); i++) {
+		if (last && relas[i].r_offset == last->r_offset)
+			continue;
+
+		last = &relas[i];
 		sym = (Elf_Sym *)sechdrs[symndx].sh_addr + ELF_R_SYM(relas[i].r_info);
 		if (sym->st_shndx != SHN_LIVEPATCH) {
 			pr_err("symbol %s is not marked as a livepatch symbol\n",
-- 
2.39.1


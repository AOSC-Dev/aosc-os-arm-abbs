From db1e59111fd61db2c6206d1eb2601e41a373f852 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Sat, 23 Sep 2023 15:43:52 +0800
Subject: [PATCH] gsgpu: Use dma_resv in lieu of reservation_object

Commit 52791eeec1 changed reservation_object to dma_resv.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c         |  4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c     |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c    |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c        |  6 +++---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ids.c        |  6 +++---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_mn.c         |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     | 20 ++++++++++----------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c      | 16 ++++++++--------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c       | 10 +++++-----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c        |  6 +++---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c         | 14 +++++++-------
 drivers/gpu/drm/gsgpu/include/gsgpu.h        |  4 ++--
 drivers/gpu/drm/gsgpu/include/gsgpu_ids.h    |  2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h |  6 +++---
 drivers/gpu/drm/gsgpu/include/gsgpu_sync.h   |  4 ++--
 drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h    |  6 +++---
 16 files changed, 55 insertions(+), 55 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
index 3bc59bab103e..925218dcb8cb 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
@@ -717,7 +717,7 @@ static int gsgpu_cs_sync_rings(struct gsgpu_cs_parser *p)
 	int r;
 
 	list_for_each_entry(e, &p->validated, tv.head) {
-		struct reservation_object *resv = e->robj->tbo.resv;
+		struct dma_resv *resv = e->robj->tbo.resv;
 		r = gsgpu_sync_resv(p->adev, &p->job->sync, resv, p->filp,
 				     gsgpu_bo_explicit_sync(e->robj));
 
@@ -850,7 +850,7 @@ static int gsgpu_cs_ib_vm_chunk(struct gsgpu_device *adev,
 		if (r)
 			return r;
 
-		r = reservation_object_reserve_shared(vm->root.base.bo->tbo.resv);
+		r = dma_resv_reserve_shared(vm->root.base.bo->tbo.resv);
 		if (r)
 			return r;
 	}
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
index 6b5c6d8d9bd4..2f31d791ac80 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
@@ -402,7 +402,7 @@ static void gsgpu_dc_do_flip(struct drm_crtc *crtc,
 	}
 
 	/* Wait for all fences on this FB */
-	WARN_ON(reservation_object_wait_timeout_rcu(abo->tbo.resv, true, false,
+	WARN_ON(dma_resv_wait_timeout_rcu(abo->tbo.resv, true, false,
 								    MAX_SCHEDULE_TIMEOUT) < 0);
 
 	gsgpu_bo_unreserve(abo);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
index f5505faae264..75c3f911b773 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
@@ -173,7 +173,7 @@ int gsgpu_display_crtc_page_flip_target(struct drm_crtc *crtc,
 		goto unpin;
 	}
 
-	r = reservation_object_get_fences_rcu(new_abo->tbo.resv, &work->excl,
+	r = dma_resv_get_fences_rcu(new_abo->tbo.resv, &work->excl,
 					      &work->shared_count,
 					      &work->shared);
 	if (unlikely(r != 0)) {
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
index 4e8137116858..0b942e476d53 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
@@ -18,7 +18,7 @@ void gsgpu_gem_object_free(struct drm_gem_object *gobj)
 int gsgpu_gem_object_create(struct gsgpu_device *adev, unsigned long size,
 			     int alignment, u32 initial_domain,
 			     u64 flags, enum ttm_bo_type type,
-			     struct reservation_object *resv,
+			     struct dma_resv *resv,
 			     struct drm_gem_object **obj)
 {
 	struct gsgpu_bo *bo;
@@ -188,7 +188,7 @@ int gsgpu_gem_create_ioctl(struct drm_device *dev, void *data,
 	union drm_gsgpu_gem_create *args = data;
 	uint64_t flags = args->in.domain_flags;
 	uint64_t size = args->in.bo_size;
-	struct reservation_object *resv = NULL;
+	struct dma_resv *resv = NULL;
 	struct drm_gem_object *gobj;
 	uint32_t handle;
 	int r;
@@ -405,7 +405,7 @@ int gsgpu_gem_wait_idle_ioctl(struct drm_device *dev, void *data,
 		return -ENOENT;
 	}
 	robj = gem_to_gsgpu_bo(gobj);
-	ret = reservation_object_wait_timeout_rcu(robj->tbo.resv, true, true,
+	ret = dma_resv_wait_timeout_rcu(robj->tbo.resv, true, true,
 						  timeout);
 
 	/* ret == 0 means not signaled,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ids.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ids.c
index 876be19c972f..4c9569fe3f90 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ids.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ids.c
@@ -82,7 +82,7 @@ static void gsgpu_pasid_free_cb(struct dma_fence *fence,
  *
  * Free the pasid only after all the fences in resv are signaled.
  */
-void gsgpu_pasid_free_delayed(struct reservation_object *resv,
+void gsgpu_pasid_free_delayed(struct dma_resv *resv,
 			       unsigned int pasid)
 {
 	struct dma_fence *fence, **fences;
@@ -90,7 +90,7 @@ void gsgpu_pasid_free_delayed(struct reservation_object *resv,
 	unsigned count;
 	int r;
 
-	r = reservation_object_get_fences_rcu(resv, NULL, &count, &fences);
+	r = dma_resv_get_fences_rcu(resv, NULL, &count, &fences);
 	if (r)
 		goto fallback;
 
@@ -134,7 +134,7 @@ void gsgpu_pasid_free_delayed(struct reservation_object *resv,
 	/* Not enough memory for the delayed delete, as last resort
 	 * block for all the fences to complete.
 	 */
-	reservation_object_wait_timeout_rcu(resv, true, false,
+	dma_resv_wait_timeout_rcu(resv, true, false,
 					    MAX_SCHEDULE_TIMEOUT);
 	gsgpu_pasid_free(pasid);
 }
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_mn.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_mn.c
index 1f50d45650eb..a6e3a2bf879f 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_mn.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_mn.c
@@ -179,7 +179,7 @@ static void gsgpu_mn_invalidate_node(struct gsgpu_mn_node *node,
 		if (!gsgpu_ttm_tt_affect_userptr(bo->tbo.ttm, start, end))
 			continue;
 
-		r = reservation_object_wait_timeout_rcu(bo->tbo.resv,
+		r = dma_resv_wait_timeout_rcu(bo->tbo.resv,
 			true, false, MAX_SCHEDULE_TIMEOUT);
 		if (r <= 0)
 			DRM_ERROR("(%ld) failed to wait for user bo\n", r);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index 9a395bc1027b..2bfd0e90950b 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -529,13 +529,13 @@ int gsgpu_bo_create(struct gsgpu_device *adev,
 
 	if ((flags & GSGPU_GEM_CREATE_SHADOW) && gsgpu_bo_need_backup(adev)) {
 		if (!bp->resv)
-			WARN_ON(reservation_object_lock((*bo_ptr)->tbo.resv,
+			WARN_ON(dma_resv_lock((*bo_ptr)->tbo.resv,
 							NULL));
 
 		r = gsgpu_bo_create_shadow(adev, bp->size, bp->byte_align, (*bo_ptr));
 
 		if (!bp->resv)
-			reservation_object_unlock((*bo_ptr)->tbo.resv);
+			dma_resv_unlock((*bo_ptr)->tbo.resv);
 
 		if (r)
 			gsgpu_bo_unref(bo_ptr);
@@ -562,7 +562,7 @@ int gsgpu_bo_create(struct gsgpu_device *adev,
 int gsgpu_bo_backup_to_shadow(struct gsgpu_device *adev,
 			       struct gsgpu_ring *ring,
 			       struct gsgpu_bo *bo,
-			       struct reservation_object *resv,
+			       struct dma_resv *resv,
 			       struct dma_fence **fence,
 			       bool direct)
 
@@ -577,7 +577,7 @@ int gsgpu_bo_backup_to_shadow(struct gsgpu_device *adev,
 	bo_addr = gsgpu_bo_gpu_offset(bo);
 	shadow_addr = gsgpu_bo_gpu_offset(bo->shadow);
 
-	r = reservation_object_reserve_shared(bo->tbo.resv);
+	r = dma_resv_reserve_shared(bo->tbo.resv);
 	if (r)
 		goto err;
 
@@ -644,7 +644,7 @@ int gsgpu_bo_validate(struct gsgpu_bo *bo)
 int gsgpu_bo_restore_from_shadow(struct gsgpu_device *adev,
 				  struct gsgpu_ring *ring,
 				  struct gsgpu_bo *bo,
-				  struct reservation_object *resv,
+				  struct dma_resv *resv,
 				  struct dma_fence **fence,
 				  bool direct)
 
@@ -659,7 +659,7 @@ int gsgpu_bo_restore_from_shadow(struct gsgpu_device *adev,
 	bo_addr = gsgpu_bo_gpu_offset(bo);
 	shadow_addr = gsgpu_bo_gpu_offset(bo->shadow);
 
-	r = reservation_object_reserve_shared(bo->tbo.resv);
+	r = dma_resv_reserve_shared(bo->tbo.resv);
 	if (r)
 		goto err;
 
@@ -699,7 +699,7 @@ int gsgpu_bo_kmap(struct gsgpu_bo *bo, void **ptr)
 		return 0;
 	}
 
-	r = reservation_object_wait_timeout_rcu(bo->tbo.resv, false, false,
+	r = dma_resv_wait_timeout_rcu(bo->tbo.resv, false, false,
 						MAX_SCHEDULE_TIMEOUT);
 	if (r < 0)
 		return r;
@@ -1270,12 +1270,12 @@ int gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo)
 void gsgpu_bo_fence(struct gsgpu_bo *bo, struct dma_fence *fence,
 		     bool shared)
 {
-	struct reservation_object *resv = bo->tbo.resv;
+	struct dma_resv *resv = bo->tbo.resv;
 
 	if (shared)
-		reservation_object_add_shared_fence(resv, fence);
+		dma_resv_add_shared_fence(resv, fence);
 	else
-		reservation_object_add_excl_fence(resv, fence);
+		dma_resv_add_excl_fence(resv, fence);
 }
 
 /**
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
index f99fb129a614..c77e250ebfdb 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
@@ -122,7 +122,7 @@ gsgpu_gem_prime_import_sg_table(struct drm_device *dev,
 				 struct dma_buf_attachment *attach,
 				 struct sg_table *sg)
 {
-	struct reservation_object *resv = attach->dmabuf->resv;
+	struct dma_resv *resv = attach->dmabuf->resv;
 	struct gsgpu_device *adev = dev->dev_private;
 	struct gsgpu_bo *bo;
 	struct gsgpu_bo_param bp;
@@ -156,23 +156,23 @@ gsgpu_gem_prime_import_sg_table(struct drm_device *dev,
 }
 
 static int
-__reservation_object_make_exclusive(struct reservation_object *obj)
+__dma_resv_make_exclusive(struct dma_resv *obj)
 {
 	struct dma_fence **fences;
 	unsigned int count;
 	int r;
 
-	if (!reservation_object_get_list(obj)) /* no shared fences to convert */
+	if (!dma_resv_get_list(obj)) /* no shared fences to convert */
 		return 0;
 
-	r = reservation_object_get_fences_rcu(obj, NULL, &count, &fences);
+	r = dma_resv_get_fences_rcu(obj, NULL, &count, &fences);
 	if (r)
 		return r;
 
 	if (count == 0) {
 		/* Now that was unexpected. */
 	} else if (count == 1) {
-		reservation_object_add_excl_fence(obj, fences[0]);
+		dma_resv_add_excl_fence(obj, fences[0]);
 		dma_fence_put(fences[0]);
 		kfree(fences);
 	} else {
@@ -184,7 +184,7 @@ __reservation_object_make_exclusive(struct reservation_object *obj)
 		if (!array)
 			goto err_fences_put;
 
-		reservation_object_add_excl_fence(obj, &array->base);
+		dma_resv_add_excl_fence(obj, &array->base);
 		dma_fence_put(&array->base);
 	}
 
@@ -235,7 +235,7 @@ static int gsgpu_gem_map_attach(struct dma_buf *dma_buf,
 		 * fences on the reservation object into a single exclusive
 		 * fence.
 		 */
-		r = __reservation_object_make_exclusive(bo->tbo.resv);
+		r = __dma_resv_make_exclusive(bo->tbo.resv);
 		if (r)
 			goto error_unreserve;
 	}
@@ -293,7 +293,7 @@ static void gsgpu_gem_map_detach(struct dma_buf *dma_buf,
  * Returns:
  * The buffer object's reservation object.
  */
-struct reservation_object *gsgpu_gem_prime_res_obj(struct drm_gem_object *obj)
+struct dma_resv *gsgpu_gem_prime_res_obj(struct drm_gem_object *obj)
 {
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c
index bffb429e8862..12698611a616 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_sync.c
@@ -155,10 +155,10 @@ int gsgpu_sync_fence(struct gsgpu_device *adev, struct gsgpu_sync *sync,
  */
 int gsgpu_sync_resv(struct gsgpu_device *adev,
 		     struct gsgpu_sync *sync,
-		     struct reservation_object *resv,
+		     struct dma_resv *resv,
 		     void *owner, bool explicit_sync)
 {
-	struct reservation_object_list *flist;
+	struct dma_resv_list *flist;
 	struct dma_fence *f;
 	void *fence_owner;
 	unsigned i;
@@ -168,16 +168,16 @@ int gsgpu_sync_resv(struct gsgpu_device *adev,
 		return -EINVAL;
 
 	/* always sync to the exclusive fence */
-	f = reservation_object_get_excl(resv);
+	f = dma_resv_get_excl(resv);
 	r = gsgpu_sync_fence(adev, sync, f, false);
 
-	flist = reservation_object_get_list(resv);
+	flist = dma_resv_get_list(resv);
 	if (!flist || r)
 		return r;
 
 	for (i = 0; i < flist->shared_count; ++i) {
 		f = rcu_dereference_protected(flist->shared[i],
-					      reservation_object_held(resv));
+					      dma_resv_held(resv));
 		/* We only want to trigger KFD eviction fences on
 		 * evict or move jobs. Skip KFD fences otherwise.
 		 */
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
index 9431258b6273..ca5e0eac91bb 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
@@ -246,7 +246,7 @@ int gsgpu_ttm_copy_mem_to_mem(struct gsgpu_device *adev,
 			       struct gsgpu_copy_mem *src,
 			       struct gsgpu_copy_mem *dst,
 			       uint64_t size,
-			       struct reservation_object *resv,
+			       struct dma_resv *resv,
 			       struct dma_fence **f)
 {
 	struct gsgpu_ring *ring = adev->mman.buffer_funcs_ring;
@@ -1783,7 +1783,7 @@ static int gsgpu_map_buffer(struct ttm_buffer_object *bo,
 
 int gsgpu_copy_buffer(struct gsgpu_ring *ring, uint64_t src_offset,
 		       uint64_t dst_offset, uint32_t byte_count,
-		       struct reservation_object *resv,
+		       struct dma_resv *resv,
 		       struct dma_fence **fence, bool direct_submit,
 		       bool vm_needs_flush)
 {
@@ -1854,7 +1854,7 @@ int gsgpu_copy_buffer(struct gsgpu_ring *ring, uint64_t src_offset,
 
 int gsgpu_fill_buffer(struct gsgpu_bo *bo,
 		       uint32_t src_data,
-		       struct reservation_object *resv,
+		       struct dma_resv *resv,
 		       struct dma_fence **fence)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
index 281daabd2584..0a3e7c0e2b2c 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
@@ -349,7 +349,7 @@ static int gsgpu_vm_clear_bo(struct gsgpu_device *ldev,
 
 	ring = container_of(vm->entity.rq->sched, struct gsgpu_ring, sched);
 
-	r = reservation_object_reserve_shared(bo->tbo.resv);
+	r = dma_resv_reserve_shared(bo->tbo.resv);
 	if (r)
 		return r;
 
@@ -452,7 +452,7 @@ static int gsgpu_vm_alloc_levels(struct gsgpu_device *ldev,
 	 * walk over the address space and allocate the page tables
 	 */
 	for (pt_idx = from; pt_idx <= to; ++pt_idx) {
-		struct reservation_object *resv = vm->root.base.bo->tbo.resv;
+		struct dma_resv *resv = vm->root.base.bo->tbo.resv;
 		struct gsgpu_vm_pt *entry = &parent->entries[pt_idx];
 		struct gsgpu_bo *pt;
 
@@ -1300,7 +1300,7 @@ static int gsgpu_vm_bo_update_mapping(struct gsgpu_device *ldev,
 	if (r)
 		goto error_free;
 
-	r = reservation_object_reserve_shared(vm->root.base.bo->tbo.resv);
+	r = dma_resv_reserve_shared(vm->root.base.bo->tbo.resv);
 	if (r)
 		goto error_free;
 
@@ -1448,7 +1448,7 @@ int gsgpu_vm_bo_update(struct gsgpu_device *ldev,
 			pages_addr = ttm->dma_address;
 		}
 
-		exclusive = reservation_object_get_excl(bo->tbo.resv);
+		exclusive = dma_resv_get_excl(bo->tbo.resv);
 	}
 
 	if (bo)
@@ -1606,13 +1606,13 @@ int gsgpu_vm_handle_moved(struct gsgpu_device *ldev,
 	spin_unlock(&vm->moved_lock);
 
 	list_for_each_entry_safe(bo_va, tmp, &moved, base.vm_status) {
-		struct reservation_object *resv = bo_va->base.bo->tbo.resv;
+		struct dma_resv *resv = bo_va->base.bo->tbo.resv;
 
 		/* Per VM BOs never need to bo cleared in the page tables */
 		if (resv == vm->root.base.bo->tbo.resv)
 			clear = false;
 		/* Try to reserve the BO to avoid clearing its ptes */
-		else if (!gsgpu_vm_debug && reservation_object_trylock(resv))
+		else if (!gsgpu_vm_debug && dma_resv_trylock(resv))
 			clear = false;
 		/* Somebody else is using the BO right now */
 		else
@@ -1627,7 +1627,7 @@ int gsgpu_vm_handle_moved(struct gsgpu_device *ldev,
 		}
 
 		if (!clear && resv != vm->root.base.bo->tbo.resv)
-			reservation_object_unlock(resv);
+			dma_resv_unlock(resv);
 
 	}
 
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index c6cc296f59d5..a1b42d8e0579 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -272,7 +272,7 @@ struct dma_buf *gsgpu_gem_prime_export(struct drm_device *dev,
 				       int flags);
 struct drm_gem_object *gsgpu_gem_prime_import(struct drm_device *dev,
 					      struct dma_buf *dma_buf);
-struct reservation_object *gsgpu_gem_prime_res_obj(struct drm_gem_object *);
+struct dma_resv *gsgpu_gem_prime_res_obj(struct drm_gem_object *);
 void *gsgpu_gem_prime_vmap(struct drm_gem_object *obj);
 void gsgpu_gem_prime_vunmap(struct drm_gem_object *obj, void *vaddr);
 int gsgpu_gem_prime_mmap(struct drm_gem_object *obj, struct vm_area_struct *vma);
@@ -333,7 +333,7 @@ void gsgpu_gem_force_release(struct gsgpu_device *adev);
 int gsgpu_gem_object_create(struct gsgpu_device *adev, unsigned long size,
 			    int alignment, u32 initial_domain,
 			    u64 flags, enum ttm_bo_type type,
-			    struct reservation_object *resv,
+			    struct dma_resv *resv,
 			    struct drm_gem_object **obj);
 
 int gsgpu_mode_dumb_create(struct drm_file *file_priv,
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_ids.h b/drivers/gpu/drm/gsgpu/include/gsgpu_ids.h
index 569f35bf9ca9..494809685fa3 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_ids.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_ids.h
@@ -43,7 +43,7 @@ struct gsgpu_vmid_mgr {
 
 int gsgpu_pasid_alloc(unsigned int bits);
 void gsgpu_pasid_free(unsigned int pasid);
-void gsgpu_pasid_free_delayed(struct reservation_object *resv,
+void gsgpu_pasid_free_delayed(struct dma_resv *resv,
 			       unsigned int pasid);
 
 bool gsgpu_vmid_had_gpu_reset(struct gsgpu_device *adev,
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index 053ceb3d44ca..36a0835c115d 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -14,7 +14,7 @@ struct gsgpu_bo_param {
 	u32				preferred_domain;
 	u64				flags;
 	enum ttm_bo_type		type;
-	struct reservation_object	*resv;
+	struct dma_resv			*resv;
 };
 
 /* User space allocated BO in a VM */
@@ -237,13 +237,13 @@ u64 gsgpu_bo_gpu_offset(struct gsgpu_bo *bo);
 int gsgpu_bo_backup_to_shadow(struct gsgpu_device *adev,
 			       struct gsgpu_ring *ring,
 			       struct gsgpu_bo *bo,
-			       struct reservation_object *resv,
+			       struct dma_resv *resv,
 			       struct dma_fence **fence, bool direct);
 int gsgpu_bo_validate(struct gsgpu_bo *bo);
 int gsgpu_bo_restore_from_shadow(struct gsgpu_device *adev,
 				  struct gsgpu_ring *ring,
 				  struct gsgpu_bo *bo,
-				  struct reservation_object *resv,
+				  struct dma_resv *resv,
 				  struct dma_fence **fence,
 				  bool direct);
 uint32_t gsgpu_bo_get_preferred_pin_domain(struct gsgpu_device *adev,
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_sync.h b/drivers/gpu/drm/gsgpu/include/gsgpu_sync.h
index b05c8de5ae74..847775de9971 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_sync.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_sync.h
@@ -4,7 +4,7 @@
 #include <linux/hashtable.h>
 
 struct dma_fence;
-struct reservation_object;
+struct dma_resv;
 struct gsgpu_device;
 struct gsgpu_ring;
 
@@ -21,7 +21,7 @@ int gsgpu_sync_fence(struct gsgpu_device *adev, struct gsgpu_sync *sync,
 		      struct dma_fence *f, bool explicit);
 int gsgpu_sync_resv(struct gsgpu_device *adev,
 		     struct gsgpu_sync *sync,
-		     struct reservation_object *resv,
+		     struct dma_resv *resv,
 		     void *owner,
 		     bool explicit_sync);
 struct dma_fence *gsgpu_sync_peek_fence(struct gsgpu_sync *sync,
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
index 0fbde8a1ff89..04354ff8adec 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
@@ -51,18 +51,18 @@ void gsgpu_ttm_set_buffer_funcs_status(struct gsgpu_device *adev,
 
 int gsgpu_copy_buffer(struct gsgpu_ring *ring, uint64_t src_offset,
 		      uint64_t dst_offset, uint32_t byte_count,
-		      struct reservation_object *resv,
+		      struct dma_resv *resv,
 		      struct dma_fence **fence, bool direct_submit,
 		      bool vm_needs_flush);
 int gsgpu_ttm_copy_mem_to_mem(struct gsgpu_device *adev,
 			      struct gsgpu_copy_mem *src,
 			      struct gsgpu_copy_mem *dst,
 			      uint64_t size,
-			      struct reservation_object *resv,
+			      struct dma_resv *resv,
 			      struct dma_fence **f);
 int gsgpu_fill_buffer(struct gsgpu_bo *bo,
 		      uint32_t src_data,
-		      struct reservation_object *resv,
+		      struct dma_resv *resv,
 		      struct dma_fence **fence);
 
 int gsgpu_mmap(struct file *filp, struct vm_area_struct *vma);
-- 
2.43.0


From 0fe5ded602529403c71e60c9ba016985735e3980 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Tue, 26 Sep 2023 12:32:34 +0800
Subject: [PATCH] gsgpu: Use resource cursor in gsgpu_bo_in_cpu_visible_vram

Following amdgpu (commit ee18f40ea1816 and commit 2b77ade8b90f2)
we add resource cursor helper functions and use them in routine
gsgpu_bo_in_cpu_visible_vram().
---
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h  |  14 ++-
 .../gpu/drm/gsgpu/include/gsgpu_res_cursor.h  | 106 ++++++++++++++++++
 2 files changed, 114 insertions(+), 6 deletions(-)
 create mode 100644 drivers/gpu/drm/gsgpu/include/gsgpu_res_cursor.h

diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index 451c4d71bbd3..4bab1651aae6 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -3,6 +3,7 @@
 
 #include <drm/gsgpu_drm.h>
 #include "gsgpu.h"
+#include "gsgpu_res_cursor.h"
 
 #define GSGPU_BO_INVALID_OFFSET	LONG_MAX
 #define GSGPU_BO_MAX_PLACEMENTS	3
@@ -164,18 +165,19 @@ static inline bool gsgpu_bo_gpu_accessible(struct gsgpu_bo *bo)
 static inline bool gsgpu_bo_in_cpu_visible_vram(struct gsgpu_bo *bo)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
-	unsigned fpfn = adev->gmc.visible_vram_size >> PAGE_SHIFT;
-	struct drm_mm_node *node = bo->tbo.resource->mm_node;
-	unsigned long pages_left;
+	struct gsgpu_res_cursor cursor;
 
 	if (bo->tbo.resource->mem_type != TTM_PL_VRAM)
 		return false;
 
-	for (pages_left = bo->tbo.ttm->num_pages; pages_left;
-	     pages_left -= node->size, node++)
-		if (node->start < fpfn)
+	gsgpu_res_first(bo->tbo.resource, 0, gsgpu_bo_size(bo), &cursor);
+	while (cursor.remaining) {
+		if (cursor.start < adev->gmc.visible_vram_size)
 			return true;
 
+		gsgpu_res_next(&cursor, cursor.size);
+	}
+
 	return false;
 }
 
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_res_cursor.h b/drivers/gpu/drm/gsgpu/include/gsgpu_res_cursor.h
new file mode 100644
index 000000000000..26b797cb2545
--- /dev/null
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_res_cursor.h
@@ -0,0 +1,106 @@
+// SPDX-License-Identifier: GPL-2.0 OR MIT
+/*
+ * Copyright 2020 Advanced Micro Devices, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: Christian KÃ¶nig
+ */
+
+#ifndef __GSGPU_RES_CURSOR_H__
+#define __GSGPU_RES_CURSOR_H__
+
+#include <drm/drm_mm.h>
+#include <drm/ttm/ttm_resource.h>
+#include <drm/ttm/ttm_range_manager.h>
+
+/* state back for walking over vram_mgr and gtt_mgr allocations */
+struct gsgpu_res_cursor {
+	uint64_t		start;
+	uint64_t		size;
+	uint64_t		remaining;
+	struct drm_mm_node	*node;
+};
+
+/**
+ * gsgpu_res_first - initialize a gsgpu_res_cursor
+ *
+ * @res: TTM resource object to walk
+ * @start: Start of the range
+ * @size: Size of the range
+ * @cur: cursor object to initialize
+ *
+ * Start walking over the range of allocations between @start and @size.
+ */
+static inline void gsgpu_res_first(struct ttm_resource *res,
+				   uint64_t start, uint64_t size,
+				   struct gsgpu_res_cursor *cur)
+{
+	struct drm_mm_node *node;
+
+	if (!res) {
+		cur->start = start;
+		cur->size = size;
+		cur->remaining = size;
+		cur->node = NULL;
+		return;
+	}
+
+	BUG_ON(start + size > res->size);
+
+	node = to_ttm_range_mgr_node(res)->mm_nodes;
+	while (start > node->size << PAGE_SHIFT)
+		start -= node++->size << PAGE_SHIFT;
+
+	cur->start = (node->start << PAGE_SHIFT) + start;
+	cur->size = min((node->size << PAGE_SHIFT) - start, size);
+	cur->remaining = size;
+	cur->node = node;
+}
+
+/**
+ * gsgpu_res_next - advance the cursor
+ *
+ * @cur: the cursor to advance
+ * @size: number of bytes to move forward
+ *
+ * Move the cursor @size bytes forwrad, walking to the next node if necessary.
+ */
+static inline void gsgpu_res_next(struct gsgpu_res_cursor *cur, uint64_t size)
+{
+	struct drm_mm_node *node = cur->node;
+
+	BUG_ON(size > cur->remaining);
+
+	cur->remaining -= size;
+	if (!cur->remaining)
+		return;
+
+	cur->size -= size;
+	if (cur->size) {
+		cur->start += size;
+		return;
+	}
+
+	cur->node = ++node;
+	cur->start = node->start << PAGE_SHIFT;
+	cur->size = min(node->size << PAGE_SHIFT, cur->remaining);
+}
+
+#endif
-- 
2.43.0


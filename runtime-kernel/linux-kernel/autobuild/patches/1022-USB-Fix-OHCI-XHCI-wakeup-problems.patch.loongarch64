From de1e8bc1afdcc3c7268c3065e4d0886da19b936c Mon Sep 17 00:00:00 2001
From: Huacai Chen <chenhuacai@loongson.cn>
Date: Sat, 23 Oct 2021 10:14:30 +0800
Subject: [PATCH 22/43] USB: Fix OHCI/XHCI wakeup problems

Signed-off-by: Huacai Chen <chenhuacai@loongson.cn>
---
 drivers/usb/host/ohci-hcd.c   |  4 +++-
 drivers/usb/host/pci-quirks.c |  4 ++++
 drivers/usb/host/xhci-pci.c   | 10 ++++++++++
 drivers/usb/host/xhci.h       |  1 +
 4 files changed, 18 insertions(+), 1 deletion(-)

diff --git a/drivers/usb/host/ohci-hcd.c b/drivers/usb/host/ohci-hcd.c
index 4f9982ecfb..b8a32859fc 100644
--- a/drivers/usb/host/ohci-hcd.c
+++ b/drivers/usb/host/ohci-hcd.c
@@ -1130,8 +1130,10 @@ int ohci_resume(struct usb_hcd *hcd, bool hibernated)
 	set_bit(HCD_FLAG_HW_ACCESSIBLE, &hcd->flags);
 
 	/* Make sure resume from hibernation re-enumerates everything */
-	if (hibernated)
+	if (hibernated) {
+		ohci_writel(ohci, OHCI_INTR_MIE, &ohci->regs->intrdisable);
 		ohci_usb_reset(ohci);
+	}
 
 	/* See if the controller is already running or has been reset */
 	ohci->hc_control = ohci_readl(ohci, &ohci->regs->control);
diff --git a/drivers/usb/host/pci-quirks.c b/drivers/usb/host/pci-quirks.c
index ef08d68b97..2975e592e2 100644
--- a/drivers/usb/host/pci-quirks.c
+++ b/drivers/usb/host/pci-quirks.c
@@ -948,6 +948,10 @@ static void quirk_usb_disable_ehci(struct pci_dev *pdev)
 	 * booting from USB disk or using a usb keyboard
 	 */
 	hcc_params = readl(base + EHCI_HCC_PARAMS);
+	if (pdev->vendor == PCI_VENDOR_ID_LOONGSON &&
+	    pdev->device == PCI_DEVICE_ID_LOONGSON_EHCI)
+		hcc_params &= ~(0xffL << 8);
+
 	offset = (hcc_params >> 8) & 0xff;
 	while (offset && --count) {
 		pci_read_config_dword(pdev, offset, &cap);
diff --git a/drivers/usb/host/xhci-pci.c b/drivers/usb/host/xhci-pci.c
index 6db07ca419..10a7bd3495 100644
--- a/drivers/usb/host/xhci-pci.c
+++ b/drivers/usb/host/xhci-pci.c
@@ -278,11 +278,13 @@ static void xhci_pci_quirks(struct device *dev, struct xhci_hcd *xhci)
 	    pdev->device == 0x0014) {
 		xhci->quirks |= XHCI_TRUST_TX_LENGTH;
 		xhci->quirks |= XHCI_ZERO_64B_REGS;
+		xhci->quirks |= XHCI_LWP_QUIRK;
 	}
 	if (pdev->vendor == PCI_VENDOR_ID_RENESAS &&
 	    pdev->device == 0x0015) {
 		xhci->quirks |= XHCI_RESET_ON_RESUME;
 		xhci->quirks |= XHCI_ZERO_64B_REGS;
+		xhci->quirks |= XHCI_LWP_QUIRK;
 	}
 	if (pdev->vendor == PCI_VENDOR_ID_VIA)
 		xhci->quirks |= XHCI_RESET_ON_RESUME;
@@ -532,6 +534,10 @@ static void xhci_pci_remove(struct pci_dev *dev)
 	if (xhci->quirks & XHCI_SPURIOUS_WAKEUP)
 		pci_set_power_state(dev, PCI_D3hot);
 
+	/* Workaround for decreasing power consumption after S5 */
+	if (xhci->quirks & XHCI_LWP_QUIRK)
+		pci_set_power_state(dev, PCI_D3hot);
+
 	usb_hcd_pci_remove(dev);
 }
 
@@ -728,6 +734,10 @@ static void xhci_pci_shutdown(struct usb_hcd *hcd)
 	/* Yet another workaround for spurious wakeups at shutdown with HSW */
 	if (xhci->quirks & XHCI_SPURIOUS_WAKEUP)
 		pci_set_power_state(pdev, PCI_D3hot);
+
+	/* Workaround for decreasing power consumption after S5 */
+	if (xhci->quirks & XHCI_LWP_QUIRK)
+		pci_set_power_state(pdev, PCI_D3hot);
 }
 #endif /* CONFIG_PM */
 
diff --git a/drivers/usb/host/xhci.h b/drivers/usb/host/xhci.h
index 786002bb35..80442759e5 100644
--- a/drivers/usb/host/xhci.h
+++ b/drivers/usb/host/xhci.h
@@ -1905,6 +1905,7 @@ struct xhci_hcd {
 #define XHCI_EP_CTX_BROKEN_DCS	BIT_ULL(42)
 #define XHCI_SUSPEND_RESUME_CLKS	BIT_ULL(43)
 #define XHCI_RESET_TO_DEFAULT	BIT_ULL(44)
+#define XHCI_LWP_QUIRK		BIT_ULL(45)
 
 	unsigned int		num_active_eps;
 	unsigned int		limit_active_eps;
-- 
2.39.1


From 10d21c96c510e3f9ccf2ce9714183aa04a0e4309 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Thu, 2 Nov 2023 15:40:25 +0800
Subject: [PATCH] gsgpu: import the DMA-BUF implementation from AMDGPU

Rather than relying on the DRM helper functions (which are only
suitable for UMA devices, as far as I can see), we should follow
what AMDGPU did in their DMA-BUF implementation to define our
own DMA-BUF import and export functions, and handle pinning,
unpinning, and move notifications. In particular we need to be
able to handle self-importing, which is used by userland even
on single-GPU systems.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c     |   5 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dma_buf.c     | 401 +++++++++++++-----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c         |   2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c         |   1 -
 drivers/gpu/drm/gsgpu/include/gsgpu.h         |  11 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h     |   6 -
 .../gpu/drm/gsgpu/include/gsgpu_vram_mgr.h    |  15 +
 7 files changed, 327 insertions(+), 114 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
index 6370664218eb..99c2dfc31b93 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
@@ -287,8 +287,9 @@ gsgpu_display_user_framebuffer_create(struct drm_device *dev,
 	}
 
 	/* Handle is imported dma-buf, so cannot be migrated to VRAM for scanout */
-	if (obj->import_attach) {
-		DRM_DEBUG_KMS("Cannot create framebuffer from imported dma_buf\n");
+	uint32_t domains = gsgpu_display_supported_domains(drm_to_adev(dev));
+	if (obj->import_attach && !(domains & GSGPU_GEM_DOMAIN_GTT)) {
+		DRM_DEBUG_KMS("Cannot create framebuffer from imported dma_buf handle\n");
 		return ERR_PTR(-EINVAL);
 	}
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dma_buf.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dma_buf.c
index 04a9372bb272..8d7ebf1f0ee9 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dma_buf.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dma_buf.c
@@ -3,145 +3,194 @@
 #include <drm/gsgpu_drm.h>
 #include <linux/dma-buf.h>
 #include <linux/dma-fence-array.h>
+#include <linux/pci-p2pdma.h>
+#include <linux/pm_runtime.h>
 
-static const struct dma_buf_ops gsgpu_dmabuf_ops;
+MODULE_IMPORT_NS(DMA_BUF);
 
 /**
- * gsgpu_gem_prime_get_sg_table - &drm_driver.gem_prime_get_sg_table
- * implementation
- * @obj: GEM buffer object
+ * gsgpu_dma_buf_pin - &dma_buf_ops.pin implementation
  *
- * Returns:
- * A scatter/gather table for the pinned pages of the buffer object's memory.
+ * @attach: attachment to pin down
+ *
+ * Pin the BO which is backing the DMA-buf so that it can't move any more.
  */
-struct sg_table *gsgpu_gem_prime_get_sg_table(struct drm_gem_object *obj)
+static int gsgpu_dma_buf_pin(struct dma_buf_attachment *attach)
 {
+	struct drm_gem_object *obj = attach->dmabuf->priv;
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
-	int npages = PFN_UP(bo->tbo.base.size);
 
-	return drm_prime_pages_to_sg(obj->dev, bo->tbo.ttm->pages, npages);
+	/* pin buffer into GTT */
+	return gsgpu_bo_pin(bo, GSGPU_GEM_DOMAIN_GTT);
 }
 
 /**
- * gsgpu_gem_prime_import_sg_table - &drm_driver.gem_prime_import_sg_table
- * implementation
- * @dev: DRM device
- * @attach: DMA-buf attachment
- * @sg: Scatter/gather table
+ * gsgpu_dma_buf_unpin - &dma_buf_ops.unpin implementation
  *
- * Import shared DMA buffer memory exported by another device.
+ * @attach: attachment to unpin
  *
- * Returns:
- * A new GEM buffer object of the given DRM device, representing the memory
- * described by the given DMA-buf attachment and scatter/gather table.
+ * Unpin a previously pinned BO to make it movable again.
  */
-struct drm_gem_object *
-gsgpu_gem_prime_import_sg_table(struct drm_device *dev,
-				 struct dma_buf_attachment *attach,
-				 struct sg_table *sg)
+static void gsgpu_dma_buf_unpin(struct dma_buf_attachment *attach)
 {
-	struct dma_resv *resv = attach->dmabuf->resv;
-	struct gsgpu_device *adev = dev->dev_private;
-	struct gsgpu_bo *bo;
-	struct gsgpu_bo_param bp;
-	int ret;
-
-	memset(&bp, 0, sizeof(bp));
-	bp.size = attach->dmabuf->size;
-	bp.byte_align = PAGE_SIZE;
-	bp.domain = GSGPU_GEM_DOMAIN_CPU;
-	bp.flags = 0;
-	bp.type = ttm_bo_type_sg;
-	bp.resv = resv;
-	ww_mutex_lock(&resv->lock, NULL);
-	ret = gsgpu_bo_create(adev, &bp, &bo);
-	if (ret)
-		goto error;
-
-	bo->tbo.sg = sg;
-	bo->tbo.ttm->sg = sg;
-	bo->allowed_domains = GSGPU_GEM_DOMAIN_GTT;
-	bo->preferred_domains = GSGPU_GEM_DOMAIN_GTT;
-
-	ww_mutex_unlock(&resv->lock);
-	bo->tbo.base.funcs = &gsgpu_gem_object_funcs;
-	return &bo->tbo.base;
+	struct drm_gem_object *obj = attach->dmabuf->priv;
+	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
 
-error:
-	ww_mutex_unlock(&resv->lock);
-	return ERR_PTR(ret);
+	gsgpu_bo_unpin(bo);
 }
 
 /**
- * gsgpu_gem_map_attach - &dma_buf_ops.attach implementation
- * @dma_buf: shared DMA buffer
+ * gsgpu_dma_buf_map - &dma_buf_ops.map_dma_buf implementation
  * @attach: DMA-buf attachment
+ * @dir: DMA direction
  *
  * Makes sure that the shared DMA buffer can be accessed by the target device.
  * For now, simply pins it to the GTT domain, where it should be accessible by
  * all DMA devices.
  *
  * Returns:
- * 0 on success or negative error code.
+ * sg_table filled with the DMA addresses to use or ERR_PRT with negative error
+ * code.
  */
-static int gsgpu_gem_map_attach(struct dma_buf *dma_buf,
-				struct dma_buf_attachment *attach)
+static struct sg_table *gsgpu_dma_buf_map(struct dma_buf_attachment *attach,
+					  enum dma_data_direction dir)
 {
+	struct dma_buf *dma_buf = attach->dmabuf;
 	struct drm_gem_object *obj = dma_buf->priv;
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
+	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
+	struct sg_table *sgt;
 	long r;
 
-	r = drm_gem_map_attach(dma_buf, attach);
-	if (r)
-		return r;
+	if (!bo->tbo.pin_count) {
+		/* move buffer into GTT */
+		struct ttm_operation_ctx ctx = { false, false };
+		gsgpu_bo_placement_from_domain(bo, GSGPU_GEM_DOMAIN_GTT);
+		r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
+		if (r)
+			return ERR_PTR(r);
+	} else if (!(gsgpu_mem_type_to_domain(bo->tbo.resource->mem_type) &
+		     GSGPU_GEM_DOMAIN_GTT)) {
+		return ERR_PTR(-EBUSY);
+	}
 
-	/* pin buffer into GTT */
-	r = gsgpu_bo_pin(bo, GSGPU_GEM_DOMAIN_GTT);
-	if (r)
-		drm_gem_map_detach(dma_buf, attach);
-	return r;
+	switch (bo->tbo.resource->mem_type) {
+	case TTM_PL_TT:
+		sgt = drm_prime_pages_to_sg(obj->dev,
+					    bo->tbo.ttm->pages,
+					    bo->tbo.ttm->num_pages);
+		if (IS_ERR(sgt))
+			return sgt;
+
+		if (dma_map_sgtable(attach->dev, sgt, dir,
+				    DMA_ATTR_SKIP_CPU_SYNC))
+			goto error_free;
+		break;
+
+	case TTM_PL_VRAM:
+		r = gsgpu_vram_mgr_alloc_sgt(adev, bo->tbo.resource, 0,
+					     bo->tbo.base.size, attach->dev,
+					     dir, &sgt);
+		if (r)
+			return ERR_PTR(r);
+		break;
+	default:
+		return ERR_PTR(-EINVAL);
+	}
+
+	return sgt;
+
+error_free:
+	sg_free_table(sgt);
+	kfree(sgt);
+	return ERR_PTR(-EBUSY);
 }
 
 /**
- * gsgpu_gem_map_detach - &dma_buf_ops.detach implementation
- * @dma_buf: shared DMA buffer
+ * gsgpu_dma_buf_unmap - &dma_buf_ops.unmap_dma_buf implementation
  * @attach: DMA-buf attachment
+ * @sgt: sg_table to unmap
+ * @dir: DMA direction
  *
  * This is called when a shared DMA buffer no longer needs to be accessible by
- * the other device. For now, simply unpins the buffer from GTT.
+ * another device. For now, simply unpins the buffer from GTT.
  */
-static void gsgpu_gem_map_detach(struct dma_buf *dma_buf,
-				  struct dma_buf_attachment *attach)
+static void gsgpu_dma_buf_unmap(struct dma_buf_attachment *attach,
+				struct sg_table *sgt,
+				enum dma_data_direction dir)
 {
-	struct drm_gem_object *obj = dma_buf->priv;
+	if (sgt->sgl->page_link) {
+		dma_unmap_sgtable(attach->dev, sgt, dir, 0);
+		sg_free_table(sgt);
+		kfree(sgt);
+	} else {
+		gsgpu_vram_mgr_free_sgt(attach->dev, dir, sgt);
+	}
+}
+
+/**
+ * gsgpu_dma_buf_attach - &dma_buf_ops.attach implementation
+ *
+ * @dmabuf: DMA-buf where we attach to
+ * @attach: attachment to add
+ *
+ * Add the attachment as user to the exported DMA-buf.
+ */
+static int gsgpu_dma_buf_attach(struct dma_buf *dmabuf,
+				struct dma_buf_attachment *attach)
+{
+	struct drm_gem_object *obj = dmabuf->priv;
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
-	int ret = 0;
+	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
+	int r;
 
-	ret = gsgpu_bo_reserve(bo, true);
-	if (unlikely(ret != 0))
-		goto error;
+	if (pci_p2pdma_distance(adev->pdev, attach->dev, false) < 0)
+		attach->peer2peer = false;
 
-	gsgpu_bo_unpin(bo);
-	gsgpu_bo_unreserve(bo);
+	r = pm_runtime_get_sync(adev_to_drm(adev)->dev);
+	if (r < 0)
+		goto out;
+
+	return 0;
 
-error:
-	drm_gem_map_detach(dma_buf, attach);
+out:
+	pm_runtime_put_autosuspend(adev_to_drm(adev)->dev);
+	return r;
+}
+
+/**
+ * gsgpu_dma_buf_detach - &dma_buf_ops.detach implementation
+ *
+ * @dmabuf: DMA-buf where we remove the attachment from
+ * @attach: the attachment to remove
+ *
+ * Called when an attachment is removed from the DMA-buf.
+ */
+static void gsgpu_dma_buf_detach(struct dma_buf *dmabuf,
+				 struct dma_buf_attachment *attach)
+{
+	struct drm_gem_object *obj = dmabuf->priv;
+	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
+	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
+
+	pm_runtime_mark_last_busy(adev_to_drm(adev)->dev);
+	pm_runtime_put_autosuspend(adev_to_drm(adev)->dev);
 }
 
 /**
- * gsgpu_gem_begin_cpu_access - &dma_buf_ops.begin_cpu_access implementation
- * @dma_buf: shared DMA buffer
- * @direction: direction of DMA transfer
+ * gsgpu_dma_buf_begin_cpu_access - &dma_buf_ops.begin_cpu_access implementation
+ * @dma_buf: Shared DMA buffer
+ * @direction: Direction of DMA transfer
  *
  * This is called before CPU access to the shared DMA buffer's memory. If it's
  * a read access, the buffer is moved to the GTT domain if possible, for optimal
  * CPU read performance.
  *
  * Returns:
- * 0 on success or negative error code.
+ * 0 on success or a negative error code on failure.
  */
-static int gsgpu_gem_begin_cpu_access(struct dma_buf *dma_buf,
-				       enum dma_data_direction direction)
+static int gsgpu_dma_buf_begin_cpu_access(struct dma_buf *dma_buf,
+					  enum dma_data_direction direction)
 {
 	struct gsgpu_bo *bo = gem_to_gsgpu_bo(dma_buf->priv);
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
@@ -168,28 +217,29 @@ static int gsgpu_gem_begin_cpu_access(struct dma_buf *dma_buf,
 	return ret;
 }
 
-static const struct dma_buf_ops gsgpu_dmabuf_ops = {
-	.attach = gsgpu_gem_map_attach,
-	.detach = gsgpu_gem_map_detach,
-	.map_dma_buf = drm_gem_map_dma_buf,
-	.unmap_dma_buf = drm_gem_unmap_dma_buf,
+const struct dma_buf_ops gsgpu_dmabuf_ops = {
+	.attach = gsgpu_dma_buf_attach,
+	.detach = gsgpu_dma_buf_detach,
+	.pin = gsgpu_dma_buf_pin,
+	.unpin = gsgpu_dma_buf_unpin,
+	.map_dma_buf = gsgpu_dma_buf_map,
+	.unmap_dma_buf = gsgpu_dma_buf_unmap,
 	.release = drm_gem_dmabuf_release,
-	.begin_cpu_access = gsgpu_gem_begin_cpu_access,
+	.begin_cpu_access = gsgpu_dma_buf_begin_cpu_access,
 	.mmap = drm_gem_dmabuf_mmap,
 	.vmap = drm_gem_dmabuf_vmap,
 	.vunmap = drm_gem_dmabuf_vunmap,
 };
 
 /**
- * gsgpu_gem_prime_export - &drm_gem_object_funcs.gem_prime_export implementation
- * @gobj: GEM buffer object
- * @flags: flags like DRM_CLOEXEC and DRM_RDWR
+ * gsgpu_gem_prime_export - &drm_driver.gem_prime_export implementation
+ * @gobj: GEM BO
+ * @flags: Flags such as DRM_CLOEXEC and DRM_RDWR.
  *
- * The main work is done by the &drm_gem_prime_export helper, which in turn
- * uses &gsgpu_gem_prime_res_obj.
+ * The main work is done by the &drm_gem_prime_export helper.
  *
  * Returns:
- * Shared DMA buffer representing the GEM buffer object from the given device.
+ * Shared DMA buffer representing the GEM BO from the given device.
  */
 struct dma_buf *gsgpu_gem_prime_export(struct drm_gem_object *gobj,
 				       int flags)
@@ -202,10 +252,163 @@ struct dma_buf *gsgpu_gem_prime_export(struct drm_gem_object *gobj,
 		return ERR_PTR(-EPERM);
 
 	buf = drm_gem_prime_export(gobj, flags);
-	if (!IS_ERR(buf)) {
-		buf->file->f_mapping = gobj->dev->anon_inode->i_mapping;
+	if (!IS_ERR(buf))
 		buf->ops = &gsgpu_dmabuf_ops;
-	}
 
 	return buf;
 }
+
+/**
+ * gsgpu_dma_buf_create_obj - create BO for DMA-buf import
+ *
+ * @dev: DRM device
+ * @dma_buf: DMA-buf
+ *
+ * Creates an empty SG BO for DMA-buf import.
+ *
+ * Returns:
+ * A new GEM BO of the given DRM device, representing the memory
+ * described by the given DMA-buf attachment and scatter/gather table.
+ */
+static struct drm_gem_object *
+gsgpu_dma_buf_create_obj(struct drm_device *dev, struct dma_buf *dma_buf)
+{
+	struct dma_resv *resv = dma_buf->resv;
+	struct gsgpu_device *adev = drm_to_adev(dev);
+	uint64_t flags = 0;
+
+	dma_resv_lock(resv, NULL);
+
+	if (dma_buf->ops == &gsgpu_dmabuf_ops) {
+		struct gsgpu_bo *other = gem_to_gsgpu_bo(dma_buf->priv);
+
+		flags = other->flags & GSGPU_GEM_CREATE_CPU_GTT_USWC;
+	}
+
+	struct drm_gem_object *gobj;
+	int ret = gsgpu_gem_object_create(adev, dma_buf->size, PAGE_SIZE,
+					  GSGPU_GEM_DOMAIN_CPU, flags,
+					  ttm_bo_type_sg, resv, &gobj);
+	if (ret)
+		goto out;
+
+	struct gsgpu_bo *bo;
+	bo = gem_to_gsgpu_bo(gobj);
+	bo->allowed_domains = GSGPU_GEM_DOMAIN_GTT;
+	bo->preferred_domains = GSGPU_GEM_DOMAIN_GTT;
+
+out:
+	dma_resv_unlock(resv);
+	return ret ? ERR_PTR(ret) : gobj;
+}
+
+/**
+ * gsgpu_dma_buf_move_notify - &attach.move_notify implementation
+ *
+ * @attach: the DMA-buf attachment
+ *
+ * Invalidate the DMA-buf attachment, making sure that the we re-create the
+ * mapping before the next use.
+ */
+static void gsgpu_dma_buf_move_notify(struct dma_buf_attachment *attach)
+{
+	struct drm_gem_object *obj = attach->importer_priv;
+	struct ww_acquire_ctx *ticket = dma_resv_locking_ctx(obj->resv);
+	struct gsgpu_bo *bo = gem_to_gsgpu_bo(obj);
+	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
+	struct ttm_operation_ctx ctx = { false, false };
+	struct ttm_placement placement = {};
+	int r;
+
+	if (!bo->tbo.resource || bo->tbo.resource->mem_type == TTM_PL_SYSTEM)
+		return;
+
+	r = ttm_bo_validate(&bo->tbo, &placement, &ctx);
+	if (r) {
+		DRM_ERROR("Failed to invalidate DMA-buf import (%d))\n", r);
+		return;
+	}
+
+	struct gsgpu_bo_va *bo_va;
+	list_for_each_entry(bo_va, &bo->va, base.bo_list) {
+		struct gsgpu_vm *vm = bo_va->base.vm;
+		struct dma_resv *resv = vm->root.base.bo->tbo.base.resv;
+
+		if (ticket) {
+			/* When we get an error here it means that somebody
+			 * else is holding the VM lock and updating page tables
+			 * So we can just continue here.
+			 */
+			r = dma_resv_lock(resv, ticket);
+			if (r)
+				continue;
+
+		} else {
+			/* TODO: This is more problematic and we actually need
+			 * to allow page tables updates without holding the
+			 * lock.
+			 */
+			if (!dma_resv_trylock(resv))
+				continue;
+		}
+
+		r = gsgpu_vm_clear_freed(adev, vm, NULL);
+		if (!r)
+			r = gsgpu_vm_handle_moved(adev, vm);
+
+		if (r && r != -EBUSY)
+			DRM_ERROR("Failed to invalidate VM page tables (%d))\n",
+				  r);
+
+		dma_resv_unlock(resv);
+	}
+}
+
+static const struct dma_buf_attach_ops gsgpu_dma_buf_attach_ops = {
+	.allow_peer2peer = false,
+	.move_notify = gsgpu_dma_buf_move_notify
+};
+
+/**
+ * gsgpu_gem_prime_import - &drm_driver.gem_prime_import implementation
+ * @dev: DRM device
+ * @dma_buf: Shared DMA buffer
+ *
+ * Import a dma_buf into a the driver and potentially create a new GEM object.
+ *
+ * Returns:
+ * GEM BO representing the shared DMA buffer for the given device.
+ */
+struct drm_gem_object *gsgpu_gem_prime_import(struct drm_device *dev,
+					      struct dma_buf *dma_buf)
+{
+	struct dma_buf_attachment *attach;
+	struct drm_gem_object *obj;
+
+	if (dma_buf->ops == &gsgpu_dmabuf_ops) {
+		obj = dma_buf->priv;
+		if (obj->dev == dev) {
+			/*
+			 * Importing dmabuf exported from out own gem increases
+			 * refcount on gem itself instead of f_count of dmabuf.
+			 */
+			drm_gem_object_get(obj);
+			return obj;
+		}
+	}
+
+	obj = gsgpu_dma_buf_create_obj(dev, dma_buf);
+	if (IS_ERR(obj))
+		return obj;
+
+	attach = dma_buf_dynamic_attach(dma_buf, dev->dev,
+					&gsgpu_dma_buf_attach_ops, obj);
+	if (IS_ERR(attach)) {
+		drm_gem_object_put(obj);
+		return ERR_CAST(attach);
+	}
+
+	get_dma_buf(dma_buf);
+	obj->import_attach = attach;
+	return obj;
+}
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
index 1c5dd6e6d910..d06741b7f2ed 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
@@ -490,7 +490,7 @@ static struct drm_driver kms_driver = {
 	.dumb_map_offset = gsgpu_mode_dumb_mmap,
 	.fops = &gsgpu_driver_kms_fops,
 
-	.gem_prime_import_sg_table = gsgpu_gem_prime_import_sg_table,
+	.gem_prime_import = gsgpu_gem_prime_import,
 
 	.name = DRIVER_NAME,
 	.desc = DRIVER_DESC,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
index 490ed5c87afc..c403d183c4b6 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
@@ -245,7 +245,6 @@ const struct drm_gem_object_funcs gsgpu_gem_object_funcs = {
 	.free = gsgpu_gem_object_free,
 	.open = gsgpu_gem_object_open,
 	.close = gsgpu_gem_object_close,
-	.get_sg_table = gsgpu_gem_prime_get_sg_table,
 	.export = gsgpu_gem_prime_export,
 	.vmap = drm_gem_ttm_vmap,
 	.vunmap = drm_gem_ttm_vunmap,
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index d5d4cf2601f1..4a32e9540b8e 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -275,11 +275,12 @@ struct gsgpu_clock {
 extern const struct drm_gem_object_funcs gsgpu_gem_object_funcs;
 
 unsigned long gsgpu_gem_timeout(uint64_t timeout_ns);
-struct drm_gem_object *
-gsgpu_gem_prime_import_sg_table(struct drm_device *dev,
-				struct dma_buf_attachment *attach,
-				struct sg_table *sg);
-struct sg_table *gsgpu_gem_prime_get_sg_table(struct drm_gem_object *obj);
+
+/*
+ * DMA-BUF Import and Export
+ */
+struct drm_gem_object *gsgpu_gem_prime_import(struct drm_device *dev,
+					      struct dma_buf *dma_buf);
 struct dma_buf *gsgpu_gem_prime_export(struct drm_gem_object *gobj,
 				       int flags);
 
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
index 99d4a518cb35..2ced17acc988 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
@@ -35,8 +35,6 @@ struct gsgpu_mman {
 	struct gsgpu_gtt_mgr		gtt_mgr;
 };
 
-int gsgpu_vram_mgr_init(struct gsgpu_device *adev);
-void gsgpu_vram_mgr_fini(struct gsgpu_device *adev);
 int gsgpu_gtt_mgr_init(struct gsgpu_device *adev, uint64_t gtt_size);
 void gsgpu_gtt_mgr_fini(struct gsgpu_device *adev);
 
@@ -44,10 +42,6 @@ bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_resource *mem);
 uint64_t gsgpu_gtt_mgr_usage(struct gsgpu_gtt_mgr *man);
 void gsgpu_gtt_mgr_recover(struct gsgpu_gtt_mgr *man);
 
-u64 gsgpu_vram_mgr_bo_visible_size(struct gsgpu_bo *bo);
-uint64_t gsgpu_vram_mgr_usage(struct gsgpu_vram_mgr *man);
-uint64_t gsgpu_vram_mgr_vis_usage(struct gsgpu_vram_mgr *man);
-
 int gsgpu_ttm_init(struct gsgpu_device *adev);
 void gsgpu_ttm_late_init(struct gsgpu_device *adev);
 void gsgpu_ttm_fini(struct gsgpu_device *adev);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_vram_mgr.h b/drivers/gpu/drm/gsgpu/include/gsgpu_vram_mgr.h
index 09e1cb606843..7e7fdf0f8c7b 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_vram_mgr.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_vram_mgr.h
@@ -59,4 +59,19 @@ to_gsgpu_vram_mgr_resource(struct ttm_resource *res)
 	return container_of(res, struct gsgpu_vram_mgr_resource, base);
 }
 
+int gsgpu_vram_mgr_init(struct gsgpu_device *adev);
+void gsgpu_vram_mgr_fini(struct gsgpu_device *adev);
+u64 gsgpu_vram_mgr_bo_visible_size(struct gsgpu_bo *bo);
+uint64_t gsgpu_vram_mgr_usage(struct gsgpu_vram_mgr *man);
+uint64_t gsgpu_vram_mgr_vis_usage(struct gsgpu_vram_mgr *man);
+int gsgpu_vram_mgr_alloc_sgt(struct gsgpu_device *adev,
+			     struct ttm_resource *res,
+			     u64 offset, u64 length,
+			     struct device *dev,
+			     enum dma_data_direction dir,
+			     struct sg_table **sgt);
+void gsgpu_vram_mgr_free_sgt(struct device *dev,
+			     enum dma_data_direction dir,
+			     struct sg_table *sgt);
+
 #endif
-- 
2.43.0


From c484bdf66c35fb107678dad34c9e8c6b0606b759 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Mon, 25 Sep 2023 16:01:28 +0800
Subject: [PATCH] gsgpu: Convert to CRTC VBLANK callbacks.

Following the examples in radeon and i915 driver we convert the
VBLANK callbacks in drm_driver to drm_crtc_funcs.

See patch series: https://patchwork.freedesktop.org/series/71873/
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c |  2 ++
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c  |  7 +++----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c | 20 +++++++++-----------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c     |  2 --
 drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c     |  4 +++-
 drivers/gpu/drm/gsgpu/include/gsgpu.h     |  2 +-
 6 files changed, 18 insertions(+), 19 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c
index 522b670fd936..859cd8a3e373 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c
@@ -542,6 +542,8 @@ static const struct drm_crtc_funcs gsgpu_dc_crtc_funcs = {
 	.atomic_destroy_state = drm_atomic_helper_crtc_destroy_state,
 	.enable_vblank = dc_enable_vblank,
 	.disable_vblank = dc_disable_vblank,
+	.get_vblank_counter = gsgpu_get_vblank_counter_kms,
+	.get_vblank_timestamp = drm_crtc_vblank_helper_get_vblank_timestamp,
 };
 
 int gsgpu_dc_crtc_init(struct gsgpu_device *adev,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
index 2f31d791ac80..7653206a616c 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
@@ -388,7 +388,7 @@ static void gsgpu_dc_do_flip(struct drm_crtc *crtc,
 
 	/* Prepare wait for target vblank early - before the fence-waits */
 	target_vblank = target - (uint32_t)drm_crtc_vblank_count(crtc) +
-			gsgpu_get_vblank_counter_kms(crtc->dev, acrtc->crtc_id);
+			gsgpu_get_vblank_counter_kms(crtc);
 
 	/* TODO This might fail and hence better not used, wait
 	 * explicitly on fences instead
@@ -403,7 +403,7 @@ static void gsgpu_dc_do_flip(struct drm_crtc *crtc,
 
 	/* Wait for all fences on this FB */
 	WARN_ON(dma_resv_wait_timeout_rcu(abo->tbo.resv, true, false,
-								    MAX_SCHEDULE_TIMEOUT) < 0);
+					  MAX_SCHEDULE_TIMEOUT) < 0);
 
 	gsgpu_bo_unreserve(abo);
 
@@ -416,8 +416,7 @@ static void gsgpu_dc_do_flip(struct drm_crtc *crtc,
 						    NULL, &crtc->hwmode)
 		 & (DRM_SCANOUTPOS_VALID | DRM_SCANOUTPOS_IN_VBLANK)) ==
 		(DRM_SCANOUTPOS_VALID | DRM_SCANOUTPOS_IN_VBLANK) &&
-		(int)(target_vblank -
-		  gsgpu_get_vblank_counter_kms(adev->ddev, acrtc->crtc_id)) > 0)) {
+		(int)(target_vblank - gsgpu_get_vblank_counter_kms(crtc)) > 0)) {
 		usleep_range(1000, 1100);
 	}
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
index 75c3f911b773..dd81409e5726 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
@@ -11,7 +11,7 @@
 #include "gsgpu_display.h"
 
 static void gsgpu_display_flip_callback(struct dma_fence *f,
-					 struct dma_fence_cb *cb)
+					struct dma_fence_cb *cb)
 {
 	struct gsgpu_flip_work *work =
 		container_of(cb, struct gsgpu_flip_work, cb);
@@ -21,7 +21,7 @@ static void gsgpu_display_flip_callback(struct dma_fence *f,
 }
 
 static bool gsgpu_display_flip_handle_fence(struct gsgpu_flip_work *work,
-					     struct dma_fence **f)
+					    struct dma_fence **f)
 {
 	struct dma_fence *fence = *f;
 
@@ -68,8 +68,7 @@ static void gsgpu_display_flip_work_func(struct work_struct *__work)
 						&crtc->hwmode)
 	     & (DRM_SCANOUTPOS_VALID | DRM_SCANOUTPOS_IN_VBLANK)) ==
 	    (DRM_SCANOUTPOS_VALID | DRM_SCANOUTPOS_IN_VBLANK) &&
-	    (int)(work->target_vblank -
-		  gsgpu_get_vblank_counter_kms(adev->ddev, gsgpu_crtc->crtc_id)) > 0) {
+	    (int)(work->target_vblank - gsgpu_get_vblank_counter_kms(crtc)) > 0) {
 		schedule_delayed_work(&work->flip_work, usecs_to_jiffies(1000));
 		return;
 	}
@@ -84,9 +83,8 @@ static void gsgpu_display_flip_work_func(struct work_struct *__work)
 	gsgpu_crtc->pflip_status = GSGPU_FLIP_SUBMITTED;
 	spin_unlock_irqrestore(&crtc->dev->event_lock, flags);
 
-
 	DRM_DEBUG_DRIVER("crtc:%d[%p], pflip_stat:GSGPU_FLIP_SUBMITTED, work: %p,\n",
-					 gsgpu_crtc->crtc_id, gsgpu_crtc, work);
+			 gsgpu_crtc->crtc_id, gsgpu_crtc, work);
 
 }
 
@@ -116,10 +114,10 @@ static void gsgpu_display_unpin_work_func(struct work_struct *__work)
 }
 
 int gsgpu_display_crtc_page_flip_target(struct drm_crtc *crtc,
-				struct drm_framebuffer *fb,
-				struct drm_pending_vblank_event *event,
-				uint32_t page_flip_flags, uint32_t target,
-				struct drm_modeset_acquire_ctx *ctx)
+					struct drm_framebuffer *fb,
+					struct drm_pending_vblank_event *event,
+					uint32_t page_flip_flags, uint32_t target,
+					struct drm_modeset_acquire_ctx *ctx)
 {
 	struct drm_device *dev = crtc->dev;
 	struct gsgpu_device *adev = dev->dev_private;
@@ -196,7 +194,7 @@ int gsgpu_display_crtc_page_flip_target(struct drm_crtc *crtc,
 	gsgpu_bo_unreserve(new_abo);
 
 	work->target_vblank = target - (uint32_t)drm_crtc_vblank_count(crtc) +
-		gsgpu_get_vblank_counter_kms(dev, work->crtc_id);
+		gsgpu_get_vblank_counter_kms(crtc);
 
 	/* we borrow the event spin lock for protecting flip_wrok */
 	spin_lock_irqsave(&crtc->dev->event_lock, flags);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
index 38a1dc1d741a..0bb1c6baadc8 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
@@ -483,8 +483,6 @@ static struct drm_driver kms_driver = {
 	.postclose = gsgpu_driver_postclose_kms,
 	.lastclose = gsgpu_driver_lastclose_kms,
 	.unload = gsgpu_driver_unload_kms,
-	.get_vblank_counter = gsgpu_get_vblank_counter_kms,
-	.get_vblank_timestamp = drm_calc_vbltimestamp_from_scanoutpos,
 	.get_scanout_position = gsgpu_get_crtc_scanout_position,
 	.irq_handler = gsgpu_irq_handler,
 	.ioctls = gsgpu_ioctls_kms,
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c
index 3abea3fc19ee..97ea094b214f 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_kms.c
@@ -643,8 +643,10 @@ void gsgpu_driver_postclose_kms(struct drm_device *dev,
  * Gets the frame count on the requested crtc (all asics).
  * Returns frame count on success, -EINVAL on failure.
  */
-u32 gsgpu_get_vblank_counter_kms(struct drm_device *dev, unsigned int pipe)
+u32 gsgpu_get_vblank_counter_kms(struct drm_crtc *crtc)
 {
+	struct drm_device *dev = crtc->dev;
+	unsigned int pipe = crtc->index;
 	struct gsgpu_device *adev = dev->dev_private;
 	int vpos, hpos, stat;
 	u32 count;
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index cd7d8092be00..54297af31bd6 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -1335,7 +1335,7 @@ void gsgpu_driver_postclose_kms(struct drm_device *dev,
 int gsgpu_device_ip_suspend(struct gsgpu_device *adev);
 int gsgpu_device_suspend(struct drm_device *dev, bool suspend, bool fbcon);
 int gsgpu_device_resume(struct drm_device *dev, bool resume, bool fbcon);
-u32 gsgpu_get_vblank_counter_kms(struct drm_device *dev, unsigned int pipe);
+u32 gsgpu_get_vblank_counter_kms(struct drm_crtc *crtc);
 long gsgpu_kms_compat_ioctl(struct file *filp, unsigned int cmd,
 			    unsigned long arg);
 
-- 
2.39.1


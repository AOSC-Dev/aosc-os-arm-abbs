From ee9a0ef1c239aad4415541cec8dd13e5c8ccde86 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Mon, 9 Oct 2023 09:04:09 +0800
Subject: [PATCH] gsgpu: Use %px instead of %p for printing pointers

Bit me in the ass once. Not happening again.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c        |  4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c     |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_irq.c     | 10 +++++-----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_plane.c   |  4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c   |  4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c     |  8 ++++----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c    |  6 +++---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c         |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_fence.c      |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c        |  4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     |  4 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_test.c       | 10 +++++-----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c        |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c         |  2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h |  2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_trace.h  | 12 ++++++------
 16 files changed, 39 insertions(+), 39 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c
index 5cb130a76173..a0d14d38e372 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c
@@ -440,7 +440,7 @@ void gsgpu_ctx_mgr_entity_fini(struct gsgpu_ctx_mgr *mgr)
 			if (kref_read(&ctx->refcount) == 1)
 				drm_sched_entity_fini(&ctx->rings[i].entity);
 			else
-				DRM_ERROR("ctx %p is still alive\n", ctx);
+				DRM_ERROR("ctx 0x%px is still alive\n", ctx);
 		}
 	}
 }
@@ -457,7 +457,7 @@ void gsgpu_ctx_mgr_fini(struct gsgpu_ctx_mgr *mgr)
 
 	idr_for_each_entry(idp, ctx, id) {
 		if (kref_put(&ctx->refcount, gsgpu_ctx_fini) != 1)
-			DRM_ERROR("ctx %p is still alive\n", ctx);
+			DRM_ERROR("ctx 0x%px is still alive\n", ctx);
 	}
 
 	idr_destroy(&mgr->ctx_handles);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
index 6f68a37d6d92..ccf0ff21ab83 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_drv.c
@@ -609,7 +609,7 @@ void gsgpu_dc_atomic_commit_tail(struct drm_atomic_state *state)
 		 * aconnector as needed
 		 */
 		if (modeset_required(new_crtc_state)) {
-			DRM_DEBUG_DRIVER("Atomic commit: SET crtc id %d: [%p]\n", acrtc->crtc_id, acrtc);
+			DRM_DEBUG_DRIVER("Atomic commit: SET crtc id %d: [0x%px]\n", acrtc->crtc_id, acrtc);
 			pm_runtime_get_noresume(dev->dev);
 			acrtc->enabled = true;
 			acrtc->hw_mode = new_crtc_state->mode;
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_irq.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_irq.c
index 450bcc33e6a6..5636511f3d96 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_irq.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_irq.c
@@ -61,7 +61,7 @@ static void dc_handle_vsync_irq(void *interrupt_params)
 	spin_lock_irqsave(&dev->event_lock, flags);
 
 	if (gsgpu_crtc->pflip_status != GSGPU_FLIP_SUBMITTED) {
-		DRM_DEBUG_DRIVER("gsgpu_crtc->pflip_status = %d !=GSGPU_FLIP_SUBMITTED(%d) on crtc:%d[%p] \n",
+		DRM_DEBUG_DRIVER("gsgpu_crtc->pflip_status = %d !=GSGPU_FLIP_SUBMITTED(%d) on crtc:%d[0x%px] \n",
 						 gsgpu_crtc->pflip_status,
 						 GSGPU_FLIP_SUBMITTED,
 						 gsgpu_crtc->crtc_id,
@@ -84,7 +84,7 @@ static void dc_handle_vsync_irq(void *interrupt_params)
 	gsgpu_crtc->pflip_status = GSGPU_FLIP_NONE;
 	spin_unlock_irqrestore(&dev->event_lock, flags);
 
-	DRM_DEBUG_DRIVER("%s - crtc :%d[%p], pflip_stat:GSGPU_FLIP_NONE\n",
+	DRM_DEBUG_DRIVER("%s - crtc :%d[0x%px], pflip_stat:GSGPU_FLIP_NONE\n",
 					__func__, gsgpu_crtc->crtc_id, gsgpu_crtc);
 
 	drm_crtc_vblank_put(&gsgpu_crtc->base);
@@ -251,7 +251,7 @@ static void *dc_irq_register_interrupt(struct gsgpu_device *adev,
 	DM_IRQ_TABLE_UNLOCK(adev, irq_table_flags);
 
 	DRM_DEBUG_KMS(
-		"DC_IRQ: added irq handler: %p for: irq_src=%d, irq context=%d\n",
+		"DC_IRQ: added irq handler: 0x%px for: irq_src=%d, irq context=%d\n",
 		handler_data,
 		irq_source,
 		int_params->int_context);
@@ -389,7 +389,7 @@ static struct list_head *remove_irq_handler(struct gsgpu_device *adev,
 	kfree(handler);
 
 	DRM_DEBUG_KMS(
-	"DC_IRQ: removed irq handler: %p for: irq_src=%d, irq context=%d\n",
+	"DC_IRQ: removed irq handler: 0x%px for: irq_src=%d, irq context=%d\n",
 		ih, int_params->irq_source, int_params->int_context);
 
 	return hnd_list;
@@ -862,7 +862,7 @@ void gsgpu_dc_irq_unregister_interrupt(struct gsgpu_device *adev,
 		/* If we got here, it means we searched all irq contexts
 		 * for this irq source, but the handler was not found. */
 		DRM_ERROR(
-		"DM_IRQ: failed to find irq handler:%p for irq_source:%d!\n",
+		"DM_IRQ: failed to find irq handler:0x%px for irq_source:%d!\n",
 			ih, irq_source);
 	}
 }
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_plane.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_plane.c
index 795bdb87b85c..a41bd7b24445 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_plane.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_plane.c
@@ -56,7 +56,7 @@ static int dc_plane_helper_prepare_fb(struct drm_plane *plane,
 	if (unlikely(r != 0)) {
 		gsgpu_bo_unpin(rbo);
 		gsgpu_bo_unreserve(rbo);
-		DRM_ERROR("%p kmap failed\n", rbo);
+		DRM_ERROR("0x%px kmap failed\n", rbo);
 		return r;
 	}
 
@@ -69,7 +69,7 @@ static int dc_plane_helper_prepare_fb(struct drm_plane *plane,
 	}
 
 	if (plane->type == DRM_PLANE_TYPE_PRIMARY) {
-		DRM_DEBUG_DRIVER("fb kernel virtual addr: %p\n", fb_vaddr);
+		DRM_DEBUG_DRIVER("fb kernel virtual addr: 0x%px\n", fb_vaddr);
 		DRM_DEBUG_DRIVER("fb physical addr: 0x%llx\n", afb->address);
 	}
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c
index ef83f8fb602c..5bbe0219d632 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_vbios.c
@@ -470,7 +470,7 @@ static bool parse_vbios_resource(struct gsgpu_vbios *vbios, struct vbios_desc *d
 		}
 	}
 
-	DRM_ERROR("No parser for descriptor type %d, version %d, data %p.\n",
+	DRM_ERROR("No parser for descriptor type %d, version %d, data 0x%px.\n",
 		  desc->type, desc->ver, data);
 	return false;
 }
@@ -699,7 +699,7 @@ static u8 *read_vbios_from_mapped_io(u64 phy_addr)
 {
 	void *mapped_vbios = ioremap(phy_addr, VBIOS_SIZE);
 	if (!mapped_vbios) {
-		DRM_WARN("Unable to map VBIOS physical address %p.\n",
+		DRM_WARN("Unable to map VBIOS physical address 0x%px.\n",
 			 (void *)(phy_addr));
 		return false;
 	}
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
index 624aa5e17604..c7afa170fcbb 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_device.c
@@ -1984,9 +1984,9 @@ static int gsgpu_device_handle_vram_lost(struct gsgpu_device *adev)
 		if (fence) {
 			r = dma_fence_wait_timeout(fence, false, tmo);
 			if (r == 0)
-				pr_err("wait fence %p[%d] timeout\n", fence, i);
+				pr_err("wait fence 0x%px[%d] timeout\n", fence, i);
 			else if (r < 0)
-				pr_err("wait fence %p[%d] interrupted\n", fence, i);
+				pr_err("wait fence 0x%px[%d] interrupted\n", fence, i);
 			if (r < 1) {
 				dma_fence_put(fence);
 				fence = next;
@@ -2003,9 +2003,9 @@ static int gsgpu_device_handle_vram_lost(struct gsgpu_device *adev)
 	if (fence) {
 		r = dma_fence_wait_timeout(fence, false, tmo);
 		if (r == 0)
-			pr_err("wait fence %p[%d] timeout\n", fence, i);
+			pr_err("wait fence 0x%px[%d] timeout\n", fence, i);
 		else if (r < 0)
-			pr_err("wait fence %p[%d] interrupted\n", fence, i);
+			pr_err("wait fence 0x%px[%d] interrupted\n", fence, i);
 
 	}
 	dma_fence_put(fence);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
index 9a56daa039b7..50a8f815669b 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
@@ -82,7 +82,7 @@ static void gsgpu_display_flip_work_func(struct work_struct *__work)
 	gsgpu_crtc->pflip_status = GSGPU_FLIP_SUBMITTED;
 	spin_unlock_irqrestore(&crtc->dev->event_lock, flags);
 
-	DRM_DEBUG_DRIVER("crtc:%d[%p], pflip_stat:GSGPU_FLIP_SUBMITTED, work: %p,\n",
+	DRM_DEBUG_DRIVER("crtc:%d[0x%px], pflip_stat:GSGPU_FLIP_SUBMITTED, work: 0x%px,\n",
 			 gsgpu_crtc->crtc_id, gsgpu_crtc, work);
 
 }
@@ -163,7 +163,7 @@ int gsgpu_display_crtc_page_flip_target(struct drm_crtc *crtc,
 
 	r = gsgpu_ttm_alloc_gart(&new_abo->tbo);
 	if (unlikely(r != 0)) {
-		DRM_ERROR("%p bind failed\n", new_abo);
+		DRM_ERROR("0x%px bind failed\n", new_abo);
 		goto unpin;
 	}
 
@@ -211,7 +211,7 @@ int gsgpu_display_crtc_page_flip_target(struct drm_crtc *crtc,
 	gsgpu_crtc->pflip_works = work;
 
 
-	DRM_DEBUG_DRIVER("crtc:%d[%p], pflip_stat:GSGPU_FLIP_PENDING, work: %p,\n",
+	DRM_DEBUG_DRIVER("crtc:%d[0x%px], pflip_stat:GSGPU_FLIP_PENDING, work: 0x%px,\n",
 					 gsgpu_crtc->crtc_id, gsgpu_crtc, work);
 	/* update crtc fb */
 	crtc->primary->fb = fb;
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c
index ddde3f4bd755..37379de38a3f 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_fb.c
@@ -136,7 +136,7 @@ static int gsgpufb_create_pinned_object(struct gsgpu_fbdev *rfbdev,
 	ret = gsgpu_ttm_alloc_gart(&abo->tbo);
 	if (ret) {
 		gsgpu_bo_unreserve(abo);
-		dev_err(adev->dev, "%p bind failed\n", abo);
+		dev_err(adev->dev, "0x%px bind failed\n", abo);
 		goto out_unref;
 	}
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_fence.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_fence.c
index 6d55f952edb1..52bc19b0d0f3 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_fence.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_fence.c
@@ -363,7 +363,7 @@ int gsgpu_fence_driver_start_ring(struct gsgpu_ring *ring,
 	ring->fence_drv.initialized = true;
 
 	dev_dbg(adev->dev, "fence driver on ring %d use gpu addr 0x%016llx, "
-		"cpu addr 0x%p\n", ring->idx,
+		"cpu addr 0x0x%px\n", ring->idx,
 		ring->fence_drv.gpu_addr, ring->fence_drv.cpu_addr);
 	return 0;
 }
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
index ba10270040b8..201d107c17cb 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
@@ -866,9 +866,9 @@ static int gsgpu_debugfs_gem_bo_info(int id, void *ptr, void *data)
 	attachment = READ_ONCE(bo->tbo.base.import_attach);
 
 	if (attachment)
-		seq_printf(m, " imported from %p", dma_buf);
+		seq_printf(m, " imported from 0x%px", dma_buf);
 	else if (dma_buf)
-		seq_printf(m, " exported as %p", dma_buf);
+		seq_printf(m, " exported as 0x%px", dma_buf);
 
 	gsgpu_debugfs_gem_bo_print_flag(m, bo, CPU_ACCESS_REQUIRED);
 	gsgpu_debugfs_gem_bo_print_flag(m, bo, NO_CPU_ACCESS);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index a7a2f010bc98..1eae87621c64 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -222,7 +222,7 @@ int gsgpu_bo_create_reserved(struct gsgpu_device *adev,
 
 	r = gsgpu_ttm_alloc_gart(&(*bo_ptr)->tbo);
 	if (r) {
-		dev_err(adev->dev, "%p bind failed\n", *bo_ptr);
+		dev_err(adev->dev, "0x%px bind failed\n", *bo_ptr);
 		goto error_unpin;
 	}
 
@@ -794,7 +794,7 @@ int gsgpu_bo_pin_restricted(struct gsgpu_bo *bo, u32 domain,
 
 	r = ttm_bo_validate(&bo->tbo, &bo->placement, &ctx);
 	if (unlikely(r)) {
-		dev_err(adev->dev, "%p pin failed\n", bo);
+		dev_err(adev->dev, "0x%px pin failed\n", bo);
 		goto error;
 	}
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_test.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_test.c
index 7ddbbafb08f9..4977a030dbcf 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_test.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_test.c
@@ -78,7 +78,7 @@ static void gsgpu_do_test_moves(struct gsgpu_device *adev)
 		}
 		r = gsgpu_ttm_alloc_gart(&gtt_obj[i]->tbo);
 		if (r) {
-			DRM_ERROR("%p bind failed\n", gtt_obj[i]);
+			DRM_ERROR("0x%px bind failed\n", gtt_obj[i]);
 			goto out_lclean_unpin;
 		}
 		gart_addr = gsgpu_bo_gpu_offset(gtt_obj[i]);
@@ -123,8 +123,8 @@ static void gsgpu_do_test_moves(struct gsgpu_device *adev)
 		     vram_start < vram_end;
 		     gart_start++, vram_start++) {
 			if (*vram_start != gart_start) {
-				DRM_ERROR("Incorrect GTT->VRAM copy %d: Got 0x%p, "
-					  "expected 0x%p (GTT/VRAM offset "
+				DRM_ERROR("Incorrect GTT->VRAM copy %d: Got 0x0x%px, "
+					  "expected 0x0x%px (GTT/VRAM offset "
 					  "0x%16llx/0x%16llx)\n",
 					  i, *vram_start, gart_start,
 					  (unsigned long long)
@@ -168,8 +168,8 @@ static void gsgpu_do_test_moves(struct gsgpu_device *adev)
 		     gart_start < gart_end;
 		     gart_start++, vram_start++) {
 			if (*gart_start != vram_start) {
-				DRM_ERROR("Incorrect VRAM->GTT copy %d: Got 0x%p, "
-					  "expected 0x%p (VRAM/GTT offset "
+				DRM_ERROR("Incorrect VRAM->GTT copy %d: Got 0x0x%px, "
+					  "expected 0x0x%px (VRAM/GTT offset "
 					  "0x%16llx/0x%16llx)\n",
 					  i, *gart_start, vram_start,
 					  (unsigned long long)
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
index dc9e1f89aa27..a59cefe37c9d 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
@@ -708,7 +708,7 @@ static int gsgpu_ttm_backend_bind(struct ttm_device *bdev,
 		}
 	}
 	if (!ttm->num_pages) {
-		WARN(1, "nothing to bind %u pages for mreg %p back %p!\n",
+		WARN(1, "nothing to bind %u pages for mreg 0x%px back 0x%px!\n",
 		     ttm->num_pages, bo_mem, ttm);
 	}
 
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
index 6512f1a161f8..a4ac05a855ba 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
@@ -1743,7 +1743,7 @@ int gsgpu_vm_bo_map(struct gsgpu_device *ldev,
 	tmp = gsgpu_vm_it_iter_first(&vm->va, saddr, eaddr);
 	if (tmp) {
 		/* bo and tmp overlap, invalid addr */
-		dev_err(ldev->dev, "bo %p va 0x%010Lx-0x%010Lx conflict with "
+		dev_err(ldev->dev, "bo 0x%px va 0x%010Lx-0x%010Lx conflict with "
 			"0x%010Lx-0x%010Lx\n", bo, saddr, eaddr,
 			tmp->start, tmp->last + 1);
 		return -EINVAL;
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index e3e731cad2da..bf9abd76d661 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -111,7 +111,7 @@ static inline int gsgpu_bo_reserve(struct gsgpu_bo *bo, bool no_intr)
 	int r = ttm_bo_reserve(&bo->tbo, !no_intr, false, NULL);
 	if (unlikely(r != 0)) {
 		if (r != -ERESTARTSYS)
-			dev_err(adev->dev, "%p reserve failed\n", bo);
+			dev_err(adev->dev, "0x%px reserve failed\n", bo);
 		return r;
 	}
 	return 0;
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_trace.h b/drivers/gpu/drm/gsgpu/include/gsgpu_trace.h
index 1516125fd390..5046450a3e63 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_trace.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_trace.h
@@ -110,7 +110,7 @@ TRACE_EVENT(gsgpu_bo_create,
 			   __entry->visible = bo->flags;
 			   ),
 
-	    TP_printk("bo=%p, pages=%u, type=%d, preferred=%d, allowed=%d, visible=%d",
+	    TP_printk("bo=0x%px, pages=%u, type=%d, preferred=%d, allowed=%d, visible=%d",
 		       __entry->bo, __entry->pages, __entry->type,
 		       __entry->prefer, __entry->allow, __entry->visible)
 );
@@ -132,7 +132,7 @@ TRACE_EVENT(gsgpu_cs,
 			   __entry->fences = gsgpu_fence_count_emitted(
 				p->ring);
 			   ),
-	    TP_printk("bo_list=%p, ring=%u, dw=%u, fences=%u",
+	    TP_printk("bo_list=0x%px, ring=%u, dw=%u, fences=%u",
 		      __entry->bo_list, __entry->ring, __entry->dw,
 		      __entry->fences)
 );
@@ -234,7 +234,7 @@ TRACE_EVENT(gsgpu_vm_bo_map,
 			   __entry->offset = mapping->offset;
 			   __entry->flags = mapping->flags;
 			   ),
-	    TP_printk("bo=%p, start=%lx, last=%lx, offset=%010llx, flags=%llx",
+	    TP_printk("bo=0x%px, start=%lx, last=%lx, offset=%010llx, flags=%llx",
 		      __entry->bo, __entry->start, __entry->last,
 		      __entry->offset, __entry->flags)
 );
@@ -258,7 +258,7 @@ TRACE_EVENT(gsgpu_vm_bo_unmap,
 			   __entry->offset = mapping->offset;
 			   __entry->flags = mapping->flags;
 			   ),
-	    TP_printk("bo=%p, start=%lx, last=%lx, offset=%010llx, flags=%llx",
+	    TP_printk("bo=0x%px, start=%lx, last=%lx, offset=%010llx, flags=%llx",
 		      __entry->bo, __entry->start, __entry->last,
 		      __entry->offset, __entry->flags)
 );
@@ -396,7 +396,7 @@ TRACE_EVENT(gsgpu_bo_list_set,
 			   __entry->bo = bo;
 			   __entry->bo_size = gsgpu_bo_size(bo);
 			   ),
-	    TP_printk("list=%p, bo=%p, bo_size=%Ld",
+	    TP_printk("list=0x%px, bo=0x%px, bo_size=%Ld",
 		      __entry->list,
 		      __entry->bo,
 		      __entry->bo_size)
@@ -434,7 +434,7 @@ TRACE_EVENT(gsgpu_bo_move,
 			__entry->new_placement = new_placement;
 			__entry->old_placement = old_placement;
 			),
-	    TP_printk("bo=%p, from=%d, to=%d, size=%Ld",
+	    TP_printk("bo=0x%px, from=%d, to=%d, size=%Ld",
 			__entry->bo, __entry->old_placement,
 			__entry->new_placement, __entry->bo_size)
 );
-- 
2.39.1


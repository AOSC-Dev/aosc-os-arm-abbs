From 98417de344cf5011112f23dca38cebaafd40b6ad Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Thu, 28 Sep 2023 17:57:42 +0800
Subject: [PATCH] gsgpu: misc fixes

Copy commit 0e10e9a1db230ae98c8ccfeaf0734545421c3995 and commit
d4e8ad908b2095388a300b19d76b78c170052a8a. Drop RAM vendor reporting
since this is not supported by HW.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c       |  4 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_job.c      |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c | 43 ----------------------
 drivers/gpu/drm/gsgpu/include/gsgpu.h      |  2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h  | 24 +++++++-----
 5 files changed, 19 insertions(+), 56 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
index 730ff478bc23..a71e055b2a46 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_cs.c
@@ -911,7 +911,7 @@ static int gsgpu_syncobj_lookup_and_add_to_sync(struct gsgpu_cs_parser *p,
 {
 	int r;
 	struct dma_fence *fence;
-	r = drm_syncobj_find_fence(p->filp, handle, &fence);
+	r = drm_syncobj_find_fence(p->filp, handle, 0, 0, &fence);
 	if (r)
 		return r;
 
@@ -1067,7 +1067,7 @@ static int gsgpu_cs_submit(struct gsgpu_cs_parser *p,
 	trace_gsgpu_cs_ioctl(job);
 	gsgpu_vm_bo_trace_cs(&fpriv->vm, &p->ticket);
 	priority = job->base.s_priority;
-	drm_sched_entity_push_job(&job->base, entity);
+	drm_sched_entity_push_job(&job->base);
 
 	ring = to_gsgpu_ring(entity->rq->sched);
 	gsgpu_ring_priority_get(ring, priority);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_job.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_job.c
index eb8af918b71e..8c0adee23abd 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_job.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_job.c
@@ -118,7 +118,7 @@ int gsgpu_job_submit(struct gsgpu_job *job, struct drm_sched_entity *entity,
 	*f = dma_fence_get(&job->base.s_fence->finished);
 	gsgpu_job_free_resources(job);
 	priority = job->base.s_priority;
-	drm_sched_entity_push_job(&job->base, entity);
+	drm_sched_entity_push_job(&job->base);
 
 	ring = to_gsgpu_ring(entity->rq->sched);
 	gsgpu_ring_priority_get(ring, priority);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
index 0a36be18fc79..dc2bcb74f8a4 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
@@ -149,47 +149,6 @@ static ssize_t gsgpu_mem_info_vis_vram_used_show(struct device *dev,
 			  gsgpu_vram_mgr_vis_usage(&adev->mman.vram_mgr));
 }
 
-/**
- * DOC: mem_info_vram_vendor
- *
- * The gsgpu driver provides a sysfs API for reporting the vendor of the
- * installed VRAM
- * The file mem_info_vram_vendor is used for this and returns the name of the
- * vendor.
- */
-static ssize_t gsgpu_mem_info_vram_vendor(struct device *dev,
-					  struct device_attribute *attr,
-					  char *buf)
-{
-	struct drm_device *ddev = dev_get_drvdata(dev);
-	struct gsgpu_device *adev = drm_to_adev(ddev);
-
-	switch (adev->gmc.vram_vendor) {
-	case SAMSUNG:
-		return sysfs_emit(buf, "samsung\n");
-	case INFINEON:
-		return sysfs_emit(buf, "infineon\n");
-	case ELPIDA:
-		return sysfs_emit(buf, "elpida\n");
-	case ETRON:
-		return sysfs_emit(buf, "etron\n");
-	case NANYA:
-		return sysfs_emit(buf, "nanya\n");
-	case HYNIX:
-		return sysfs_emit(buf, "hynix\n");
-	case MOSEL:
-		return sysfs_emit(buf, "mosel\n");
-	case WINBOND:
-		return sysfs_emit(buf, "winbond\n");
-	case ESMT:
-		return sysfs_emit(buf, "esmt\n");
-	case MICRON:
-		return sysfs_emit(buf, "micron\n");
-	default:
-		return sysfs_emit(buf, "unknown\n");
-	}
-}
-
 static DEVICE_ATTR(mem_info_vram_total, S_IRUGO,
 		   gsgpu_mem_info_vram_total_show, NULL);
 static DEVICE_ATTR(mem_info_vis_vram_total, S_IRUGO,
@@ -198,8 +157,6 @@ static DEVICE_ATTR(mem_info_vram_used, S_IRUGO,
 		   gsgpu_mem_info_vram_used_show, NULL);
 static DEVICE_ATTR(mem_info_vis_vram_used, S_IRUGO,
 		   gsgpu_mem_info_vis_vram_used_show, NULL);
-static DEVICE_ATTR(mem_info_vram_vendor, S_IRUGO,
-		   gsgpu_mem_info_vram_vendor, NULL);
 
 static struct attribute *gsgpu_vram_mgr_attributes[] = {
 	&dev_attr_mem_info_vram_total.attr,
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index 263be39aeddb..e33f0431db0d 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -32,8 +32,8 @@
 #include "gsgpu_mode.h"
 #include "gsgpu_ih.h"
 #include "gsgpu_irq.h"
-#include "gsgpu_ttm.h"
 #include "gsgpu_vram_mgr.h"
+#include "gsgpu_ttm.h"
 #include "gsgpu_sync.h"
 #include "gsgpu_ring.h"
 #include "gsgpu_vm.h"
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
index 876132a4cd92..85def07aebb2 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
@@ -7,6 +7,12 @@
 #define GSGPU_GTT_MAX_TRANSFER_SIZE	512
 #define GSGPU_GTT_NUM_TRANSFER_WINDOWS	2
 
+struct gsgpu_gtt_mgr {
+        struct ttm_resource_manager manager;
+        struct drm_mm mm;
+        spinlock_t lock;
+};
+
 struct gsgpu_mman {
 	struct ttm_device		bdev;
 	bool				initialized;
@@ -18,12 +24,15 @@ struct gsgpu_mman {
 
 	/* buffer handling */
 	const struct gsgpu_buffer_funcs	*buffer_funcs;
-	struct gsgpu_ring			*buffer_funcs_ring;
-	bool					buffer_funcs_enabled;
+	struct gsgpu_ring		*buffer_funcs_ring;
+	bool				buffer_funcs_enabled;
 
-	struct mutex				gtt_window_lock;
+	struct mutex			gtt_window_lock;
 	/* Scheduler entity for buffer moves */
-	struct drm_sched_entity			entity;
+	struct drm_sched_entity		entity;
+
+	struct gsgpu_vram_mgr		vram_mgr;
+	struct gsgpu_gtt_mgr		gtt_mgr;
 };
 
 struct gsgpu_copy_mem {
@@ -32,17 +41,14 @@ struct gsgpu_copy_mem {
 	unsigned long			offset;
 };
 
-extern const struct ttm_resource_manager_func gsgpu_gtt_mgr_func;
-extern const struct ttm_resource_manager_func gsgpu_vram_mgr_func;
-
 int gsgpu_vram_mgr_init(struct gsgpu_device *adev);
 void gsgpu_vram_mgr_fini(struct gsgpu_device *adev);
 int gsgpu_gtt_mgr_init(struct gsgpu_device *adev, uint64_t gtt_size);
-int gsgpu_gtt_mgr_fini(struct gsgpu_device *adev);
+void gsgpu_gtt_mgr_fini(struct gsgpu_device *adev);
 
 bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_resource *mem);
 uint64_t gsgpu_gtt_mgr_usage(struct ttm_resource_manager *man);
-int gsgpu_gtt_mgr_recover(struct ttm_resource_manager *man);
+void gsgpu_gtt_mgr_recover(struct ttm_resource_manager *man);
 
 u64 gsgpu_vram_mgr_bo_visible_size(struct gsgpu_bo *bo);
 uint64_t gsgpu_vram_mgr_usage(struct ttm_resource_manager *man);
-- 
2.43.0


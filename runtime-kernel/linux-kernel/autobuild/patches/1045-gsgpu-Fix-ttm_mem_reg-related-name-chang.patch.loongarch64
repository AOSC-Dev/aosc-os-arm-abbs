From 961884ee138a21db1b0f2341928e51be77e80a54 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Sun, 24 Sep 2023 20:01:21 +0800
Subject: [PATCH] gsgpu: Fix ttm_mem_reg related name changes

ttm_mem_reg and related objects have been changed to ttm_resource.
This include the field in ttm_buffer_object.

Fixes: 9de59bc201496f28bb8835c2bcbae3ddb186b548
Fixes: 2966141ad2dda23d1b37997de6a4389b7864c169
Fixes: d3116756a710e3cd51293a9d58b525957ab7e784
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c        | 20 ++++-----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c    |  8 ++--
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     |  4 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c        | 46 ++++++++++----------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c         |  2 +-
 drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c   |  6 +--
 drivers/gpu/drm/gsgpu/include/gsgpu.h        |  1 +
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h | 24 +++++-----
 drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h    |  6 +--
 9 files changed, 56 insertions(+), 61 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
index 9c676fd52d94..56f7da09139d 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_drv.c
@@ -237,7 +237,7 @@ static int gsgpu_kick_out_firmware_fb(struct pci_dev *pdev)
 }
 
 static int gsgpu_pci_probe(struct pci_dev *pdev,
-			    const struct pci_device_id *ent)
+			   const struct pci_device_id *ent)
 {
 	struct drm_device *dev;
 	unsigned long flags = ent->driver_data;
@@ -270,7 +270,7 @@ static int gsgpu_pci_probe(struct pci_dev *pdev,
 	ret = drm_dev_register(dev, ent->driver_data);
 	if (ret == -EAGAIN && ++retry <= 3) {
 		DRM_INFO("retry init %d\n", retry);
-		/* Don't request EX mode too frequently which is attacking */
+		/* Don't request EX mode too frequently */
 		msleep(5000);
 		goto retry_init;
 	} else if (ret)
@@ -285,8 +285,7 @@ static int gsgpu_pci_probe(struct pci_dev *pdev,
 	return ret;
 }
 
-static void
-gsgpu_pci_remove(struct pci_dev *pdev)
+static void gsgpu_pci_remove(struct pci_dev *pdev)
 {
 	struct drm_device *dev = pci_get_drvdata(pdev);
 
@@ -296,17 +295,14 @@ gsgpu_pci_remove(struct pci_dev *pdev)
 	pci_set_drvdata(pdev, NULL);
 }
 
-static void
-gsgpu_pci_shutdown(struct pci_dev *pdev)
+static void gsgpu_pci_shutdown(struct pci_dev *pdev)
 {
 	struct drm_device *dev = pci_get_drvdata(pdev);
 	struct gsgpu_device *adev = dev->dev_private;
 
-	/* if we are running in a VM, make sure the device
-	 * torn down properly on reboot/shutdown.
-	 * unfortunately we can't detect certain
-	 * hypervisors so just do this all the time.
-	 */
+	/* If we are running in a VM, we need to make sure the device
+	 * tears down properly on reboot/shutdown. Unfortunately we
+	 * can't detect certain hypervisors so just do this all the time. */
 	gsgpu_device_ip_suspend(adev);
 }
 
@@ -396,7 +392,7 @@ long gsgpu_drm_ioctl(struct file *filp,
 /**
  * loongson_vga_pci_devices  -- pci device id info
  *
- * __u32 vendor, device            Vendor and device ID or PCI_ANY_ID
+ * __u32 vendor, device           Vendor and device ID or PCI_ANY_ID
  * __u32 subvendor, subdevice     Subsystem ID's or PCI_ANY_ID
  * __u32 class, class_mask        (class,subclass,prog-if) triplet
  * kernel_ulong_t driver_data     Data private to the driver
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c
index 4af125f09766..2d3206ec95f3 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gtt_mgr.c
@@ -66,7 +66,7 @@ static int gsgpu_gtt_mgr_fini(struct ttm_resource_manager *man)
  *
  * Check if a mem object has already address space allocated.
  */
-bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_mem_reg *mem)
+bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_resource *mem)
 {
 	struct gsgpu_gtt_node *node = mem->mm_node;
 
@@ -86,7 +86,7 @@ bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_mem_reg *mem)
 static int gsgpu_gtt_mgr_alloc(struct ttm_resource_manager *man,
 				struct ttm_buffer_object *tbo,
 				const struct ttm_place *place,
-				struct ttm_mem_reg *mem)
+				struct ttm_resource *mem)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(man->bdev);
 	struct gsgpu_gtt_mgr *mgr = man->priv;
@@ -137,7 +137,7 @@ static int gsgpu_gtt_mgr_alloc(struct ttm_resource_manager *man,
 static int gsgpu_gtt_mgr_new(struct ttm_resource_manager *man,
 			      struct ttm_buffer_object *tbo,
 			      const struct ttm_place *place,
-			      struct ttm_mem_reg *mem)
+			      struct ttm_resource *mem)
 {
 	struct gsgpu_gtt_mgr *mgr = man->priv;
 	struct gsgpu_gtt_node *node;
@@ -193,7 +193,7 @@ static int gsgpu_gtt_mgr_new(struct ttm_resource_manager *man,
  * Free the allocated GTT again.
  */
 static void gsgpu_gtt_mgr_del(struct ttm_resource_manager *man,
-			       struct ttm_mem_reg *mem)
+			       struct ttm_resource *mem)
 {
 	struct gsgpu_gtt_mgr *mgr = man->priv;
 	struct gsgpu_gtt_node *node = mem->mm_node;
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index 2bfd0e90950b..5cf99bd0be4c 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -1172,11 +1172,11 @@ int gsgpu_bo_get_metadata(struct gsgpu_bo *bo, void *buffer,
  */
 void gsgpu_bo_move_notify(struct ttm_buffer_object *bo,
 			   bool evict,
-			   struct ttm_mem_reg *new_mem)
+			   struct ttm_resource *new_mem)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->bdev);
 	struct gsgpu_bo *abo;
-	struct ttm_mem_reg *old_mem = &bo->mem;
+	struct ttm_resource *old_mem = &bo->mem;
 
 	if (!gsgpu_bo_is_gsgpu_bo(bo))
 		return;
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
index ca5e0eac91bb..a46c956af78f 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ttm.c
@@ -25,7 +25,7 @@
 #define DRM_FILE_PAGE_OFFSET (0x100000000ULL >> PAGE_SHIFT)
 
 static int gsgpu_map_buffer(struct ttm_buffer_object *bo,
-			     struct ttm_mem_reg *mem, unsigned num_pages,
+			     struct ttm_resource *mem, unsigned num_pages,
 			     uint64_t offset, unsigned window,
 			     struct gsgpu_ring *ring,
 			     uint64_t *addr);
@@ -183,9 +183,9 @@ static int gsgpu_verify_access(struct ttm_buffer_object *bo, struct file *filp)
  * Assign the memory from new_mem to the memory of the buffer object bo.
  */
 static void gsgpu_move_null(struct ttm_buffer_object *bo,
-			     struct ttm_mem_reg *new_mem)
+			     struct ttm_resource *new_mem)
 {
-	struct ttm_mem_reg *old_mem = &bo->mem;
+	struct ttm_resource *old_mem = &bo->mem;
 
 	BUG_ON(old_mem->mm_node != NULL);
 	*old_mem = *new_mem;
@@ -201,8 +201,8 @@ static void gsgpu_move_null(struct ttm_buffer_object *bo,
  *
  */
 static uint64_t gsgpu_mm_node_addr(struct ttm_buffer_object *bo,
-				    struct drm_mm_node *mm_node,
-				    struct ttm_mem_reg *mem)
+				   struct drm_mm_node *mm_node,
+				   struct ttm_resource *mem)
 {
 	uint64_t addr = 0;
 
@@ -221,7 +221,7 @@ static uint64_t gsgpu_mm_node_addr(struct ttm_buffer_object *bo,
  * @offset: The offset that drm_mm_node is used for finding.
  *
  */
-static struct drm_mm_node *gsgpu_find_mm_node(struct ttm_mem_reg *mem,
+static struct drm_mm_node *gsgpu_find_mm_node(struct ttm_resource *mem,
 					       unsigned long *offset)
 {
 	struct drm_mm_node *mm_node = mem->mm_node;
@@ -366,8 +366,8 @@ int gsgpu_ttm_copy_mem_to_mem(struct gsgpu_device *adev,
  */
 static int gsgpu_move_blit(struct ttm_buffer_object *bo,
 			    bool evict, bool no_wait_gpu,
-			    struct ttm_mem_reg *new_mem,
-			    struct ttm_mem_reg *old_mem)
+			    struct ttm_resource *new_mem,
+			    struct ttm_resource *old_mem)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->bdev);
 	struct gsgpu_copy_mem src, dst;
@@ -405,11 +405,11 @@ static int gsgpu_move_blit(struct ttm_buffer_object *bo,
  */
 static int gsgpu_move_vram_ram(struct ttm_buffer_object *bo, bool evict,
 				struct ttm_operation_ctx *ctx,
-				struct ttm_mem_reg *new_mem)
+				struct ttm_resource *new_mem)
 {
 	struct gsgpu_device *adev;
-	struct ttm_mem_reg *old_mem = &bo->mem;
-	struct ttm_mem_reg tmp_mem;
+	struct ttm_resource *old_mem = &bo->mem;
+	struct ttm_resource tmp_mem;
 	struct ttm_place placements;
 	struct ttm_placement placement;
 	int r;
@@ -463,11 +463,11 @@ static int gsgpu_move_vram_ram(struct ttm_buffer_object *bo, bool evict,
  */
 static int gsgpu_move_ram_vram(struct ttm_buffer_object *bo, bool evict,
 				struct ttm_operation_ctx *ctx,
-				struct ttm_mem_reg *new_mem)
+				struct ttm_resource *new_mem)
 {
 	struct gsgpu_device *adev;
-	struct ttm_mem_reg *old_mem = &bo->mem;
-	struct ttm_mem_reg tmp_mem;
+	struct ttm_resource *old_mem = &bo->mem;
+	struct ttm_resource tmp_mem;
 	struct ttm_placement placement;
 	struct ttm_place placements;
 	int r;
@@ -512,11 +512,11 @@ static int gsgpu_move_ram_vram(struct ttm_buffer_object *bo, bool evict,
  */
 static int gsgpu_bo_move(struct ttm_buffer_object *bo, bool evict,
 			  struct ttm_operation_ctx *ctx,
-			  struct ttm_mem_reg *new_mem)
+			  struct ttm_resource *new_mem)
 {
 	struct gsgpu_device *adev;
 	struct gsgpu_bo *abo;
-	struct ttm_mem_reg *old_mem = &bo->mem;
+	struct ttm_resource *old_mem = &bo->mem;
 	int r;
 
 	/* Can't move a pinned BO */
@@ -580,7 +580,7 @@ static int gsgpu_bo_move(struct ttm_buffer_object *bo, bool evict,
  *
  * Called by ttm_mem_io_reserve() ultimately via ttm_bo_vm_fault()
  */
-static int gsgpu_ttm_io_mem_reserve(struct ttm_device *bdev, struct ttm_mem_reg *mem)
+static int gsgpu_ttm_io_mem_reserve(struct ttm_device *bdev, struct ttm_resource *mem)
 {
 	struct ttm_resource_manager *man = &bdev->man[mem->mem_type];
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bdev);
@@ -606,7 +606,7 @@ static int gsgpu_ttm_io_mem_reserve(struct ttm_device *bdev, struct ttm_mem_reg
 			return -EINVAL;
 		/* Only physically contiguous buffers apply. In a contiguous
 		 * buffer, size of the first mm_node would match the number of
-		 * pages in ttm_mem_reg.
+		 * pages in ttm_resource.
 		 */
 		if (adev->mman.aper_base_kaddr &&
 		    (mm_node->size == mem->num_pages))
@@ -622,7 +622,7 @@ static int gsgpu_ttm_io_mem_reserve(struct ttm_device *bdev, struct ttm_mem_reg
 	return 0;
 }
 
-static void gsgpu_ttm_io_mem_free(struct ttm_device *bdev, struct ttm_mem_reg *mem)
+static void gsgpu_ttm_io_mem_free(struct ttm_device *bdev, struct ttm_resource *mem)
 {
 }
 
@@ -868,7 +868,7 @@ int gsgpu_ttm_gart_bind(struct gsgpu_device *adev,
  * This handles binding GTT memory to the device address space.
  */
 static int gsgpu_ttm_backend_bind(struct ttm_tt *ttm,
-				   struct ttm_mem_reg *bo_mem)
+				   struct ttm_resource *bo_mem)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(ttm->bdev);
 	struct gsgpu_ttm_tt *gtt = (void *)ttm;
@@ -914,7 +914,7 @@ int gsgpu_ttm_alloc_gart(struct ttm_buffer_object *bo)
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->bdev);
 	struct ttm_operation_ctx ctx = { false, false };
 	struct gsgpu_ttm_tt *gtt = (void *)bo->ttm;
-	struct ttm_mem_reg tmp;
+	struct ttm_resource tmp;
 	struct ttm_placement placement;
 	struct ttm_place placements;
 	uint64_t flags;
@@ -1268,7 +1268,7 @@ bool gsgpu_ttm_tt_is_readonly(struct ttm_tt *ttm)
  * @mem: The memory registry backing this ttm_tt object
  */
 uint64_t gsgpu_ttm_tt_pte_flags(struct gsgpu_device *adev, struct ttm_tt *ttm,
-				 struct ttm_mem_reg *mem)
+				 struct ttm_resource *mem)
 {
 	uint64_t flags = 0;
 
@@ -1716,7 +1716,7 @@ int gsgpu_mmap(struct file *filp, struct vm_area_struct *vma)
 }
 
 static int gsgpu_map_buffer(struct ttm_buffer_object *bo,
-			     struct ttm_mem_reg *mem, unsigned num_pages,
+			     struct ttm_resource *mem, unsigned num_pages,
 			     uint64_t offset, unsigned window,
 			     struct gsgpu_ring *ring,
 			     uint64_t *addr)
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
index 0a3e7c0e2b2c..0fdee7317498 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vm.c
@@ -1428,7 +1428,7 @@ int gsgpu_vm_bo_update(struct gsgpu_device *ldev,
 	struct gsgpu_vm *vm = bo_va->base.vm;
 	struct gsgpu_bo_va_mapping *mapping;
 	dma_addr_t *pages_addr = NULL;
-	struct ttm_mem_reg *mem;
+	struct ttm_resource *mem;
 	struct drm_mm_node *nodes;
 	struct dma_fence *exclusive, **last_update;
 	u64 flags;
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
index 2469f86ef70e..d26f88d3aadc 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_vram_mgr.c
@@ -83,7 +83,7 @@ static u64 gsgpu_vram_mgr_vis_size(struct gsgpu_device *adev,
 u64 gsgpu_vram_mgr_bo_visible_size(struct gsgpu_bo *bo)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
-	struct ttm_mem_reg *mem = &bo->tbo.mem;
+	struct ttm_resource *mem = &bo->tbo.mem;
 	struct drm_mm_node *nodes = mem->mm_node;
 	unsigned pages = mem->num_pages;
 	u64 usage;
@@ -113,7 +113,7 @@ u64 gsgpu_vram_mgr_bo_visible_size(struct gsgpu_bo *bo)
 static int gsgpu_vram_mgr_new(struct ttm_resource_manager *man,
 			       struct ttm_buffer_object *tbo,
 			       const struct ttm_place *place,
-			       struct ttm_mem_reg *mem)
+			       struct ttm_resource *mem)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(man->bdev);
 	struct gsgpu_vram_mgr *mgr = man->priv;
@@ -210,7 +210,7 @@ static int gsgpu_vram_mgr_new(struct ttm_resource_manager *man,
  * Free the allocated VRAM again.
  */
 static void gsgpu_vram_mgr_del(struct ttm_resource_manager *man,
-				struct ttm_mem_reg *mem)
+				struct ttm_resource *mem)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(man->bdev);
 	struct gsgpu_vram_mgr *mgr = man->priv;
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index a1b42d8e0579..cd7d8092be00 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -11,6 +11,7 @@
 #include <linux/pci.h>
 
 #include <drm/ttm/ttm_bo.h>
+#include <drm/ttm/ttm_tt.h>
 #include <drm/ttm/ttm_placement.h>
 #include <drm/ttm/ttm_execbuf_util.h>
 
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index 36a0835c115d..d5766c3844f8 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -105,9 +105,7 @@ static inline unsigned gsgpu_mem_type_to_domain(u32 mem_type)
 static inline int gsgpu_bo_reserve(struct gsgpu_bo *bo, bool no_intr)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
-	int r;
-
-	r = ttm_bo_reserve(&bo->tbo, !no_intr, false, NULL);
+	int r = ttm_bo_reserve(&bo->tbo, !no_intr, false, NULL);
 	if (unlikely(r != 0)) {
 		if (r != -ERESTARTSYS)
 			dev_err(adev->dev, "%p reserve failed\n", bo);
@@ -123,17 +121,17 @@ static inline void gsgpu_bo_unreserve(struct gsgpu_bo *bo)
 
 static inline unsigned long gsgpu_bo_size(struct gsgpu_bo *bo)
 {
-	return bo->tbo.num_pages << PAGE_SHIFT;
+	return bo->tbo.ttm->num_pages << PAGE_SHIFT;
 }
 
 static inline unsigned gsgpu_bo_ngpu_pages(struct gsgpu_bo *bo)
 {
-	return (bo->tbo.num_pages << PAGE_SHIFT) / GSGPU_GPU_PAGE_SIZE;
+	return (bo->tbo.ttm->num_pages << PAGE_SHIFT) / GSGPU_GPU_PAGE_SIZE;
 }
 
 static inline unsigned gsgpu_bo_gpu_page_alignment(struct gsgpu_bo *bo)
 {
-	return (bo->tbo.mem.page_alignment << PAGE_SHIFT) / GSGPU_GPU_PAGE_SIZE;
+	return (bo->tbo.page_alignment << PAGE_SHIFT) / GSGPU_GPU_PAGE_SIZE;
 }
 
 /**
@@ -144,7 +142,7 @@ static inline unsigned gsgpu_bo_gpu_page_alignment(struct gsgpu_bo *bo)
  */
 static inline u64 gsgpu_bo_mmap_offset(struct gsgpu_bo *bo)
 {
-	return drm_vma_node_offset_addr(&bo->tbo.vma_node);
+	return drm_vma_node_offset_addr(&bo->tbo.base.vma_node);
 }
 
 /**
@@ -153,8 +151,8 @@ static inline u64 gsgpu_bo_mmap_offset(struct gsgpu_bo *bo)
  */
 static inline bool gsgpu_bo_gpu_accessible(struct gsgpu_bo *bo)
 {
-	switch (bo->tbo.mem.mem_type) {
-	case TTM_PL_TT: return gsgpu_gtt_mgr_has_gart_addr(&bo->tbo.mem);
+	switch (bo->tbo.resource->mem_type) {
+	case TTM_PL_TT: return gsgpu_gtt_mgr_has_gart_addr(bo->tbo.resource);
 	case TTM_PL_VRAM: return true;
 	default: return false;
 	}
@@ -167,13 +165,13 @@ static inline bool gsgpu_bo_in_cpu_visible_vram(struct gsgpu_bo *bo)
 {
 	struct gsgpu_device *adev = gsgpu_ttm_adev(bo->tbo.bdev);
 	unsigned fpfn = adev->gmc.visible_vram_size >> PAGE_SHIFT;
-	struct drm_mm_node *node = bo->tbo.mem.mm_node;
+	struct drm_mm_node *node = bo->tbo.resource->mm_node;
 	unsigned long pages_left;
 
-	if (bo->tbo.mem.mem_type != TTM_PL_VRAM)
+	if (bo->tbo.resource->mem_type != TTM_PL_VRAM)
 		return false;
 
-	for (pages_left = bo->tbo.mem.num_pages; pages_left;
+	for (pages_left = bo->tbo.ttm->num_pages; pages_left;
 	     pages_left -= node->size, node++)
 		if (node->start < fpfn)
 			return true;
@@ -229,7 +227,7 @@ int gsgpu_bo_get_metadata(struct gsgpu_bo *bo, void *buffer,
 			   uint64_t *flags);
 void gsgpu_bo_move_notify(struct ttm_buffer_object *bo,
 			   bool evict,
-			   struct ttm_mem_reg *new_mem);
+			   struct ttm_resource *new_mem);
 int gsgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo);
 void gsgpu_bo_fence(struct gsgpu_bo *bo, struct dma_fence *fence,
 		     bool shared);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
index 04354ff8adec..80b47a849d07 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_ttm.h
@@ -28,14 +28,14 @@ struct gsgpu_mman {
 
 struct gsgpu_copy_mem {
 	struct ttm_buffer_object	*bo;
-	struct ttm_mem_reg		*mem;
+	struct ttm_resource		*mem;
 	unsigned long			offset;
 };
 
 extern const struct ttm_resource_manager_func gsgpu_gtt_mgr_func;
 extern const struct ttm_resource_manager_func gsgpu_vram_mgr_func;
 
-bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_mem_reg *mem);
+bool gsgpu_gtt_mgr_has_gart_addr(struct ttm_resource *mem);
 uint64_t gsgpu_gtt_mgr_usage(struct ttm_resource_manager *man);
 int gsgpu_gtt_mgr_recover(struct ttm_resource_manager *man);
 
@@ -83,6 +83,6 @@ bool gsgpu_ttm_tt_userptr_invalidated(struct ttm_tt *ttm,
 bool gsgpu_ttm_tt_userptr_needs_pages(struct ttm_tt *ttm);
 bool gsgpu_ttm_tt_is_readonly(struct ttm_tt *ttm);
 uint64_t gsgpu_ttm_tt_pte_flags(struct gsgpu_device *adev, struct ttm_tt *ttm,
-				struct ttm_mem_reg *mem);
+				struct ttm_resource *mem);
 
 #endif /* __GSGPU_TTM_H__ */
-- 
2.43.0


From 99c099ae09b48770acf38a9e39ab8fa20eae8ed6 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Mon, 2 Oct 2023 23:10:00 +0800
Subject: [PATCH] gsgpu: use embedded gem object in ttb_buffer_object

Forgot to merge commit c105de2828e13931cd218e8b801cd6762b618992.
Silly me :>!
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c        |  8 ++++----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c     | 10 +++++-----
 drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c      |  2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu.h        |  2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_object.h |  1 -
 5 files changed, 11 insertions(+), 12 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
index ab96986ce6ac..ba10270040b8 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_gem.c
@@ -97,7 +97,7 @@ int gsgpu_gem_object_create(struct gsgpu_device *adev, unsigned long size,
 		}
 		return r;
 	}
-	*obj = &bo->gem_base;
+	*obj = &bo->tbo.base;
 
 	return 0;
 }
@@ -746,7 +746,7 @@ int gsgpu_gem_op_ioctl(struct drm_device *dev, void *data,
 		struct drm_gsgpu_gem_create_in info;
 		void __user *out = u64_to_user_ptr(args->value);
 
-		info.bo_size = robj->gem_base.size;
+		info.bo_size = robj->tbo.base.size;
 		info.alignment = robj->tbo.page_alignment << PAGE_SHIFT;
 		info.domains = robj->preferred_domains;
 		info.domain_flags = robj->flags;
@@ -862,8 +862,8 @@ static int gsgpu_debugfs_gem_bo_info(int id, void *ptr, void *data)
 	if (pin_count)
 		seq_printf(m, " pin count %d", pin_count);
 
-	dma_buf = READ_ONCE(bo->gem_base.dma_buf);
-	attachment = READ_ONCE(bo->gem_base.import_attach);
+	dma_buf = READ_ONCE(bo->tbo.base.dma_buf);
+	attachment = READ_ONCE(bo->tbo.base.import_attach);
 
 	if (attachment)
 		seq_printf(m, " imported from %p", dma_buf);
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
index e31dd6ad2e58..a7a2f010bc98 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_object.c
@@ -61,9 +61,9 @@ static void gsgpu_bo_destroy(struct ttm_buffer_object *tbo)
 
 	gsgpu_bo_kunmap(bo);
 
-	if (bo->gem_base.import_attach)
-		drm_prime_gem_destroy(&bo->gem_base, bo->tbo.sg);
-	drm_gem_object_release(&bo->gem_base);
+	if (bo->tbo.base.import_attach)
+		drm_prime_gem_destroy(&bo->tbo.base, bo->tbo.sg);
+	drm_gem_object_release(&bo->tbo.base);
 	gsgpu_bo_unref(&bo->parent);
 	if (!list_empty(&bo->shadow_list)) {
 		mutex_lock(&adev->shadow_list_lock);
@@ -383,7 +383,7 @@ static int gsgpu_bo_do_create(struct gsgpu_device *adev,
 	bo = kzalloc(sizeof(struct gsgpu_bo), GFP_KERNEL);
 	if (bo == NULL)
 		return -ENOMEM;
-	drm_gem_private_object_init(adev->ddev, &bo->gem_base, size);
+	drm_gem_private_object_init(adev->ddev, &bo->tbo.base, size);
 	INIT_LIST_HEAD(&bo->shadow_list);
 	INIT_LIST_HEAD(&bo->va);
 	bo->preferred_domains = bp->preferred_domain ? bp->preferred_domain :
@@ -409,7 +409,7 @@ static int gsgpu_bo_do_create(struct gsgpu_device *adev,
 	if (unlikely(r != 0))
 		return r;
 
-	bo->gem_base.resv = bo->tbo.base.resv;
+	bo->tbo.base.resv = bo->tbo.base.resv;
 
 	if (!gsgpu_gmc_vram_full_visible(&adev->gmc) &&
 	    bo->tbo.resource->mem_type == TTM_PL_VRAM &&
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
index 1691118b2c5b..45a8e1f5770c 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_prime.c
@@ -66,7 +66,7 @@ gsgpu_gem_prime_import_sg_table(struct drm_device *dev,
 		bo->prime_shared_count = 1;
 
 	ww_mutex_unlock(&resv->lock);
-	return &bo->gem_base;
+	return &bo->tbo.base;
 
 error:
 	ww_mutex_unlock(&resv->lock);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index 93467e762526..f4078d98ed10 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -269,7 +269,7 @@ struct gsgpu_clock {
  */
 
 #define GSGPU_GEM_DOMAIN_MAX		0x3
-#define gem_to_gsgpu_bo(gobj) container_of((gobj), struct gsgpu_bo, gem_base)
+#define gem_to_gsgpu_bo(gobj) container_of((gobj), struct gsgpu_bo, tbo.base)
 
 unsigned long gsgpu_gem_timeout(uint64_t timeout_ns);
 struct drm_gem_object *
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
index 264955fad276..e3e731cad2da 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_object.h
@@ -55,7 +55,6 @@ struct gsgpu_bo {
 	/* list of all virtual address to which this bo is associated to */
 	struct list_head		va;
 	/* Constant after initialization */
-	struct drm_gem_object		gem_base;
 	struct gsgpu_bo		*parent;
 	struct gsgpu_bo		*shadow;
 
-- 
2.43.0


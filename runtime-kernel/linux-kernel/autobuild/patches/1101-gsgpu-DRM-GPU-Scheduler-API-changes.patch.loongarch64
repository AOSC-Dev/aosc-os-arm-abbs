From a76e6d2175be175a939243fb25e9e34fcf82ea31 Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Thu, 28 Sep 2023 20:55:13 +0800
Subject: [PATCH] gsgpu: DRM GPU Scheduler API changes

Copy commit e2d732fdb7a9e421720a644580cd6a9400f97f60 and commit
9af5e21dace795891544042abda877ada39abacc
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c   | 12 ++++--------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_sched.c | 10 +++++-----
 2 files changed, 9 insertions(+), 13 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c
index 7905f539f9e9..5cb130a76173 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_ctx.c
@@ -234,21 +234,17 @@ static int gsgpu_ctx_query2(struct gsgpu_device *adev,
 int gsgpu_ctx_ioctl(struct drm_device *dev, void *data,
 		     struct drm_file *filp)
 {
-	int r;
-	uint32_t id;
-	enum drm_sched_priority priority;
-
 	union drm_gsgpu_ctx *args = data;
 	struct gsgpu_device *adev = dev->dev_private;
 	struct gsgpu_fpriv *fpriv = filp->driver_priv;
 
-	r = 0;
-	id = args->in.ctx_id;
-	priority = gsgpu_to_sched_priority(args->in.priority);
+	int r = 0;
+	uint32_t id = args->in.ctx_id;
+	enum drm_sched_priority priority = gsgpu_to_sched_priority(args->in.priority);
 
 	/* For backwards compatibility reasons, we need to accept
 	 * ioctls with garbage in the priority field */
-	if (priority == DRM_SCHED_PRIORITY_INVALID)
+	if (priority == -EINVAL)
 		priority = DRM_SCHED_PRIORITY_NORMAL;
 
 	switch (args->in.op) {
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_sched.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_sched.c
index 70adf7fe6c75..c4030173da7e 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_sched.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_sched.c
@@ -9,19 +9,19 @@ enum drm_sched_priority gsgpu_to_sched_priority(int gsgpu_priority)
 {
 	switch (gsgpu_priority) {
 	case GSGPU_CTX_PRIORITY_VERY_HIGH:
-		return DRM_SCHED_PRIORITY_HIGH_HW;
+		return DRM_SCHED_PRIORITY_HIGH;
 	case GSGPU_CTX_PRIORITY_HIGH:
-		return DRM_SCHED_PRIORITY_HIGH_SW;
+		return DRM_SCHED_PRIORITY_HIGH;
 	case GSGPU_CTX_PRIORITY_NORMAL:
 		return DRM_SCHED_PRIORITY_NORMAL;
 	case GSGPU_CTX_PRIORITY_LOW:
 	case GSGPU_CTX_PRIORITY_VERY_LOW:
-		return DRM_SCHED_PRIORITY_LOW;
+		return DRM_SCHED_PRIORITY_MIN;
 	case GSGPU_CTX_PRIORITY_UNSET:
 		return DRM_SCHED_PRIORITY_UNSET;
 	default:
 		WARN(1, "Invalid context priority %d\n", gsgpu_priority);
-		return DRM_SCHED_PRIORITY_INVALID;
+		return -EINVAL;
 	}
 }
 
@@ -57,7 +57,7 @@ int gsgpu_sched_ioctl(struct drm_device *dev, void *data,
 	int r;
 
 	priority = gsgpu_to_sched_priority(args->in.priority);
-	if (args->in.flags || priority == DRM_SCHED_PRIORITY_INVALID)
+	if (args->in.flags || priority == -EINVAL)
 		return -EINVAL;
 
 	switch (args->in.op) {
-- 
2.43.0


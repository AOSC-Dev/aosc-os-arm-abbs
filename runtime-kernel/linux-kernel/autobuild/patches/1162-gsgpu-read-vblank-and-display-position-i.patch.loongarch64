From 19228d4240e71abdabef57134fe718f5f975ce6b Mon Sep 17 00:00:00 2001
From: "Dr. Chang Liu, PhD" <cl91tp@gmail.com>
Date: Sun, 22 Oct 2023 14:46:31 +0800
Subject: [PATCH] gsgpu: read vblank and display position info from hw

The vendor driver code doesn't seem to read the correct vblank
and position information from the hardware. We read them from
the HW regs provided on the vendor manual.
---
 drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c     | 23 +++++++------------
 drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c     | 22 +++++++-----------
 drivers/gpu/drm/gsgpu/include/gsgpu.h         |  2 +-
 drivers/gpu/drm/gsgpu/include/gsgpu_dc_crtc.h |  3 ++-
 drivers/gpu/drm/gsgpu/include/gsgpu_dc_reg.h  |  7 +++++-
 drivers/gpu/drm/gsgpu/include/gsgpu_mode.h    |  2 +-
 6 files changed, 26 insertions(+), 33 deletions(-)

diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c
index a1da898eea7a..d0b93215434e 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_dc_crtc.c
@@ -315,11 +315,9 @@ u32 dc_vblank_get_counter(struct gsgpu_device *adev, int crtc_num)
 }
 
 int dc_crtc_get_scanoutpos(struct gsgpu_device *adev, int crtc_num,
-				  u32 *vbl, u32 *position)
+			   int *vbl_start, int *vbl_end, int *hpos, int *vpos)
 {
 	struct gsgpu_dc *dc = adev->dc;
-	uint32_t v_blank_start, v_blank_end, h_position, v_position;
-	int reg_val = 0;
 
 	if (IS_ERR_OR_NULL(dc) || (crtc_num >= dc->links))
 		return false;
@@ -330,18 +328,13 @@ int dc_crtc_get_scanoutpos(struct gsgpu_device *adev, int crtc_num,
 	if ((crtc_num < 0) || (crtc_num >= adev->mode_info.num_crtc))
 		return -EINVAL;
 	else {
-		reg_val = dc_readl(adev, DC_CRTC_DISPLAY_POS_REG + (0x10 * crtc_num));
-//		DRM_INFO("dc_crtc_get_scanoutpos reg_val 0x%x\n", reg_val);
-
-		v_blank_start = 0;
-		v_blank_end = 0;
-		h_position = (reg_val & 0xffff);
-		v_position = (reg_val >> 16);
-
-//		position = v_position | (h_position << 16);
-//		vbl = v_blank_start | (v_blank_end << 16);
-		position = 0;
-		vbl = 0;
+		u32 vsync_reg = dc_readl(adev, DC_CRTC_VSYNC_REG + (0x10 * crtc_num));
+		u32 pos_reg = dc_readl(adev, DC_CRTC_DISPLAY_POS_REG + (0x10 * crtc_num));
+
+		*vbl_start = (vsync_reg >> CRTC_VSYNC_START_SHIFT) & CRTC_VSYNC_START_MASK;
+		*vbl_end = (vsync_reg >> CRTC_VSYNC_END_SHIFT) & CRTC_VSYNC_END_MASK;
+		*hpos = (pos_reg >> CRTC_DISPLAY_POS_X_SHIFT) & CRTC_DISPLAY_POS_X_MASK;
+		*vpos = (pos_reg >> CRTC_DISPLAY_POS_Y_SHIFT) & CRTC_DISPLAY_POS_Y_MASK;
 	}
 
 	return 0;
diff --git a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
index 50a8f815669b..35571781f35b 100644
--- a/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
+++ b/drivers/gpu/drm/gsgpu/gpu/gsgpu_display.c
@@ -339,12 +339,11 @@ void gsgpu_display_update_priority(struct gsgpu_device *adev)
 
 }
 
-int gsgpu_display_get_crtc_scanoutpos(struct drm_device *dev,
-			unsigned int pipe, unsigned int flags, int *vpos,
-			int *hpos, ktime_t *stime, ktime_t *etime,
-			const struct drm_display_mode *mode)
+int gsgpu_display_get_crtc_scanoutpos(struct drm_device *dev, unsigned int pipe,
+				      unsigned int flags, int *vpos,
+				      int *hpos, ktime_t *stime, ktime_t *etime,
+				      const struct drm_display_mode *mode)
 {
-	u32 vbl = 0, position = 0;
 	int vbl_start, vbl_end, vtotal, ret = 0;
 	bool in_vbl = true;
 
@@ -356,7 +355,8 @@ int gsgpu_display_get_crtc_scanoutpos(struct drm_device *dev,
 	if (stime)
 		*stime = ktime_get();
 
-	if (gsgpu_display_page_flip_get_scanoutpos(adev, pipe, &vbl, &position) == 0)
+	if (gsgpu_display_page_flip_get_scanoutpos(adev, pipe, &vbl_start,
+						   &vbl_end, hpos, vpos) == 0)
 		ret |= DRM_SCANOUTPOS_VALID;
 
 	/* Get optional system timestamp after query. */
@@ -365,16 +365,10 @@ int gsgpu_display_get_crtc_scanoutpos(struct drm_device *dev,
 
 	/* preempt_enable_rt() should go right here in PREEMPT_RT patchset. */
 
-	/* Decode into vertical and horizontal scanout position. */
-	*vpos = position & 0x1fff;
-	*hpos = (position >> 16) & 0x1fff;
-
 	/* Valid vblank area boundaries from gpu retrieved? */
-	if (vbl > 0) {
-		/* Yes: Decode. */
+	if (vbl_start < 0xffff && vbl_end < 0xffff) {
+		/* Yes. */
 		ret |= DRM_SCANOUTPOS_ACCURATE;
-		vbl_start = vbl & 0x1fff;
-		vbl_end = (vbl >> 16) & 0x1fff;
 	} else {
 		/* No: Fake something reasonable which gives at least ok results. */
 		vbl_start = mode->crtc_vdisplay;
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu.h b/drivers/gpu/drm/gsgpu/include/gsgpu.h
index 04df236564bd..1b60c5af8316 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu.h
@@ -1280,7 +1280,7 @@ gsgpu_get_xdma_instance(struct gsgpu_ring *ring)
 #define gsgpu_display_hpd_sense(adev, h) ((adev)->mode_info.funcs->hpd_sense((adev), (h)))
 #define gsgpu_display_hpd_set_polarity(adev, h) ((adev)->mode_info.funcs->hpd_set_polarity((adev), (h)))
 #define gsgpu_display_page_flip(adev, crtc, base, async) ((adev)->mode_info.funcs->page_flip((adev), (crtc), (base), (async)))
-#define gsgpu_display_page_flip_get_scanoutpos(adev, crtc, vbl, pos) ((adev)->mode_info.funcs->page_flip_get_scanoutpos((adev), (crtc), (vbl), (pos)))
+#define gsgpu_display_page_flip_get_scanoutpos(adev, crtc, vbl_start, vbl_end, hpos, vpos) ((adev)->mode_info.funcs->page_flip_get_scanoutpos((adev), (crtc), (vbl_start), (vbl_end), (hpos), (vpos)))
 #define gsgpu_emit_copy_buffer(adev, ib, s, d, b) ((adev)->mman.buffer_funcs->emit_copy_buffer((ib),  (s), (d), (b)))
 #define gsgpu_emit_fill_buffer(adev, ib, s, d, b) ((adev)->mman.buffer_funcs->emit_fill_buffer((ib), (s), (d), (b)))
 #define gsgpu_gfx_get_gpu_clock_counter(adev) ((adev)->gfx.funcs->get_gpu_clock_counter((adev)))
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_dc_crtc.h b/drivers/gpu/drm/gsgpu/include/gsgpu_dc_crtc.h
index 9ca47babc22c..c729186cdea3 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_dc_crtc.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_dc_crtc.h
@@ -35,7 +35,8 @@ struct gsgpu_dc_crtc *dc_crtc_construct(struct gsgpu_dc *dc, struct crtc_resourc
 int gsgpu_dc_crtc_init(struct gsgpu_device *adev,
 		       struct drm_plane *plane, uint32_t crtc_index);
 u32 dc_vblank_get_counter(struct gsgpu_device *adev, int crtc_num);
-int dc_crtc_get_scanoutpos(struct gsgpu_device *adev, int crtc_num, u32 *vbl, u32 *position);
+int dc_crtc_get_scanoutpos(struct gsgpu_device *adev, int crtc_num,
+			   int *vbl_start, int *vbl_end, int *hpos, int *vpos);
 
 void dc_crtc_destroy(struct gsgpu_dc_crtc *crtc);
 bool dc_crtc_enable(struct gsgpu_crtc *acrtc, bool enable);
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_dc_reg.h b/drivers/gpu/drm/gsgpu/include/gsgpu_dc_reg.h
index fa59625e38de..197c98427809 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_dc_reg.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_dc_reg.h
@@ -78,6 +78,12 @@
 #define CRTC_VSYNC_POLSE	BIT(30)
 #define CRTC_VSYNC_POL		BIT(31)
 
+#define DC_CRTC_DISPLAY_POS_REG		(0x14C0)
+#define CRTC_DISPLAY_POS_X_SHIFT	16
+#define CRTC_DISPLAY_POS_X_MASK		0xFFFF
+#define CRTC_DISPLAY_POS_Y_SHIFT	0
+#define CRTC_DISPLAY_POS_Y_MASK		0xFFFF
+
 #define DC_CRTC_GAMINDEX_REG		(0x14E0)
 #define DC_CRTC_GAMDATA_REG		(0x1500)
 #define CRTC_GAMMA_BLUE_SHIFT	0
@@ -88,7 +94,6 @@
 #define CRTC_GAMMA_RED_MASK	0xFF
 
 #define DC_CRTC_SYNCDEV_REG		(0x1B80)
-#define DC_CRTC_DISPLAY_POS_REG		(0x14C0)
 #define DC_VSYNC_COUNTER_REG		(0x1A00)
 
 #define DC_INT_REG			(0x1570)
diff --git a/drivers/gpu/drm/gsgpu/include/gsgpu_mode.h b/drivers/gpu/drm/gsgpu/include/gsgpu_mode.h
index 632dcb8af889..fa90c6783621 100644
--- a/drivers/gpu/drm/gsgpu/include/gsgpu_mode.h
+++ b/drivers/gpu/drm/gsgpu/include/gsgpu_mode.h
@@ -54,7 +54,7 @@ struct gsgpu_display_funcs {
 	void (*page_flip)(struct gsgpu_device *adev,
 			  int crtc_id, u64 crtc_base, bool async);
 	int (*page_flip_get_scanoutpos)(struct gsgpu_device *adev, int crtc,
-					u32 *vbl, u32 *position);
+					int *vbl_start, int *vbl_end, int *hpos, int *vpos);
 };
 
 struct gsgpu_framebuffer {
-- 
2.43.0


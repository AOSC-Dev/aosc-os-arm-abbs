From 31c4787cf5d80abc988615d855d2c9691e6ae01a Mon Sep 17 00:00:00 2001
From: Michael Webster <miketwebster@gmail.com>
Date: Thu, 4 May 2017 22:59:05 -0400
Subject: [PATCH] mimetypes: Add new metadata tag for marking desktop files as
 trusted.

Requires a metadata flag to be set to allow launching desktop files
as well as displaying them differently (icon and removed extension.)

Untrusted launchers, as well as previously-trusted launchers (those with
their exec bit set) will both be treated as untrusted, until our new
trust flag is set.

From some limited testing, moving the file in nemo resets the metadata,
requiring re-confirmation, although renaming does now.

Also added an option to view the file contents, in addition to trust
and cancel.

Ref: https://github.com/linuxmint/nemo/issues/1404

Adapted from https://bugzilla.gnome.org/show_bug.cgi?id=777991
---
 libnemo-private/nemo-directory-async.c |  17 ++--
 libnemo-private/nemo-file-operations.c | 156 +++++++++------------------------
 libnemo-private/nemo-file-operations.h |  11 ++-
 libnemo-private/nemo-metadata.c        |   1 +
 libnemo-private/nemo-metadata.h        |   1 +
 src/nemo-mime-actions.c                | 143 ++++++++++++++++++------------
 6 files changed, 145 insertions(+), 184 deletions(-)

diff --git a/libnemo-private/nemo-directory-async.c b/libnemo-private/nemo-directory-async.c
index d918dfc89..ffeadb873 100644
--- a/libnemo-private/nemo-directory-async.c
+++ b/libnemo-private/nemo-directory-async.c
@@ -28,6 +28,7 @@
 #include "nemo-directory-private.h"
 #include "nemo-file-attributes.h"
 #include "nemo-file-private.h"
+#include "nemo-metadata.h"
 #include "nemo-file-utilities.h"
 #include "nemo-signaller.h"
 #include "nemo-global-preferences.h"
@@ -3312,14 +3313,20 @@ is_link_trusted (NemoFile *file,
 {
 	GFile *location;
 	gboolean res;
-	
+    gchar *trusted;
+
 	if (!is_launcher) {
 		return TRUE;
 	}
-	
-	if (nemo_file_can_execute (file)) {
-		return TRUE;
-	}
+
+    trusted = nemo_file_get_metadata (file,
+                                      NEMO_METADATA_KEY_DESKTOP_FILE_TRUSTED,
+                                      NULL);
+
+    if (nemo_file_can_execute (file) && trusted != NULL) {
+        g_free (trusted);
+        return TRUE;
+    }
 
 	res = FALSE;
 	
diff --git a/libnemo-private/nemo-file-operations.c b/libnemo-private/nemo-file-operations.c
index 78cd2921e..54465102b 100644
--- a/libnemo-private/nemo-file-operations.c
+++ b/libnemo-private/nemo-file-operations.c
@@ -155,7 +155,7 @@ typedef struct {
 	gboolean interactive;
 	NemoOpCallback done_callback;
 	gpointer done_callback_data;
-} MarkTrustedJob;
+} MarkExecutableJob;
 
 typedef struct {
 	CommonJob common;
@@ -207,10 +207,10 @@ static void add_job_to_job_queue (GIOSchedulerJobFunc job_func,
                                               OpKind  kind);
 
 static void
-mark_desktop_file_trusted (CommonJob *common,
-			   GCancellable *cancellable,
-			   GFile *file,
-			   gboolean interactive);
+mark_desktop_file_executable (CommonJob    *common,
+                              GCancellable *cancellable,
+                              GFile        *file,
+                              gboolean      interactive);
 
 static gboolean
 is_all_button_text (const char *button_text)
@@ -4337,10 +4337,10 @@ copy_move_file (CopyMoveJob *copy_job,
 		if (copy_job->desktop_location != NULL &&
 		    g_file_equal (copy_job->desktop_location, dest_dir) &&
 		    is_trusted_desktop_file (src, job->cancellable)) {
-			mark_desktop_file_trusted (job,
-						   job->cancellable,
-						   dest,
-						   FALSE);
+            mark_desktop_file_executable (job,
+                                          job->cancellable,
+                                          dest,
+                                          FALSE);
 		}
 
 		if (job->undo_info != NULL) {
@@ -6555,9 +6555,9 @@ nemo_file_operations_empty_trash (GtkWidget *parent_view)
 }
 
 static gboolean
-mark_trusted_job_done (gpointer user_data)
+mark_executable_job_done (gpointer user_data)
 {
-	MarkTrustedJob *job = user_data;
+	MarkExecutableJob *job = user_data;
 	
 	g_object_unref (job->file);
 
@@ -6570,95 +6570,19 @@ mark_trusted_job_done (gpointer user_data)
 	return FALSE;
 }
 
-#define TRUSTED_SHEBANG "#!/usr/bin/env xdg-open\n"
-
 static void
-mark_desktop_file_trusted (CommonJob *common,
-			   GCancellable *cancellable,
-			   GFile *file,
-			   gboolean interactive)
+mark_desktop_file_executable (CommonJob    *common,
+                              GCancellable *cancellable,
+                              GFile        *file,
+                              gboolean      interactive)
 {
-	char *contents, *new_contents;
-	gsize length, new_length;
 	GError *error;
 	guint32 current_perms, new_perms;
 	int response;
 	GFileInfo *info;
 	
  retry:
-	error = NULL;
-	if (!g_file_load_contents (file,
-				  cancellable,
-				  &contents, &length,
-				  NULL, &error)) {
-		if (interactive) {
-			response = run_error (common,
-					      g_strdup (_("Unable to mark launcher trusted (executable)")),
-					      error->message,
-					      NULL,
-					      FALSE,
-					      GTK_STOCK_CANCEL, RETRY,
-					      NULL);
-		} else {
-			response = 0;
-		}
-		
-
-		if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT) {
-			abort_job (common);
-		} else if (response == 1) {
-			goto retry;
-		} else {
-			g_assert_not_reached ();
-		}
-
-		goto out;
-	}
-
-	if (!g_str_has_prefix (contents, "#!")) {
-		new_length = length + strlen (TRUSTED_SHEBANG);
-		new_contents = g_malloc (new_length);
-		
-		strcpy (new_contents, TRUSTED_SHEBANG);
-		memcpy (new_contents + strlen (TRUSTED_SHEBANG),
-			contents, length);
-		
-		if (!g_file_replace_contents (file,
-					      new_contents,
-					      new_length,
-					      NULL,
-					      FALSE, 0,
-					      NULL, cancellable, &error)) {
-			g_free (contents);
-			g_free (new_contents);
-			
-			if (interactive) {
-				response = run_error (common,
-						      g_strdup (_("Unable to mark launcher trusted (executable)")),
-						      error->message,
-						      NULL,
-						      FALSE,
-						      GTK_STOCK_CANCEL, RETRY,
-						      NULL);
-			} else {
-				response = 0;
-			}
-
-			if (response == 0 || response == GTK_RESPONSE_DELETE_EVENT) {
-				abort_job (common);
-			} else if (response == 1) {
-				goto retry;
-			} else {
-				g_assert_not_reached ();
-			}
-			
-			goto out;
-		}
-		g_free (new_contents);
-		
-	}
-	g_free (contents);
-	
+    error = NULL;
 	info = g_file_query_info (file,
 				  G_FILE_ATTRIBUTE_STANDARD_TYPE","
 				  G_FILE_ATTRIBUTE_UNIX_MODE,
@@ -6731,11 +6655,11 @@ mark_desktop_file_trusted (CommonJob *common,
 }
 
 static gboolean
-mark_trusted_job (GIOSchedulerJob *io_job,
+mark_executable_job (GIOSchedulerJob *io_job,
 		  GCancellable *cancellable,
 		  gpointer user_data)
 {
-	MarkTrustedJob *job = user_data;
+	MarkExecutableJob *job = user_data;
 	CommonJob *common;
 	
 	common = (CommonJob *)job;
@@ -6743,35 +6667,35 @@ mark_trusted_job (GIOSchedulerJob *io_job,
 
     nemo_progress_info_start (common->progress);
 
-	mark_desktop_file_trusted (common,
-				   cancellable,
-				   job->file,
-				   job->interactive);
-	
+	mark_desktop_file_executable (common,
+                                  cancellable,
+                                  job->file,
+                                  job->interactive);
+
 	g_io_scheduler_job_send_to_mainloop_async (io_job,
-						   mark_trusted_job_done,
-						   job,
-						   NULL);
+                                               mark_executable_job_done,
+                                               job,
+                                               NULL);
 
 	return FALSE;
 }
 
 void
-nemo_file_mark_desktop_file_trusted (GFile *file,
-					 GtkWindow *parent_window,
-					 gboolean interactive,
-					 NemoOpCallback done_callback,
-					 gpointer done_callback_data)
+nemo_file_mark_desktop_file_executable (GFile         *file,
+                                        GtkWindow     *parent_window,
+                                        gboolean       interactive,
+                                        NemoOpCallback done_callback,
+                                        gpointer       done_callback_data)
 {
-	MarkTrustedJob *job;
-	
-	job = op_job_new (MarkTrustedJob, parent_window);
-	job->file = g_object_ref (file);
-	job->interactive = interactive;
-	job->done_callback = done_callback;
-	job->done_callback_data = done_callback_data;
-	
-    add_job_to_job_queue (mark_trusted_job, job, job->common.cancellable, job->common.progress, OP_KIND_PERMISSIONS);
+    MarkExecutableJob *job;
+
+    job = op_job_new (MarkExecutableJob, parent_window);
+    job->file = g_object_ref (file);
+    job->interactive = interactive;
+    job->done_callback = done_callback;
+    job->done_callback_data = done_callback_data;
+
+    add_job_to_job_queue (mark_executable_job, job, job->common.cancellable, job->common.progress, OP_KIND_PERMISSIONS);
 }
 
 #if 0
diff --git a/libnemo-private/nemo-file-operations.h b/libnemo-private/nemo-file-operations.h
index 04924bd84..09c337c94 100644
--- a/libnemo-private/nemo-file-operations.h
+++ b/libnemo-private/nemo-file-operations.h
@@ -142,11 +142,10 @@ void nemo_file_operations_link      (GList                *files,
 					 GtkWindow            *parent_window,
 					 NemoCopyCallback  done_callback,
 					 gpointer              done_callback_data);
-void nemo_file_mark_desktop_file_trusted (GFile           *file,
-					      GtkWindow        *parent_window,
-					      gboolean          interactive,
-					      NemoOpCallback done_callback,
-					      gpointer          done_callback_data);
-
+void nemo_file_mark_desktop_file_executable (GFile            *file,
+                                             GtkWindow        *parent_window,
+                                             gboolean          interactive,
+                                             NemoOpCallback    done_callback,
+                                             gpointer          done_callback_data);
 
 #endif /* NEMO_FILE_OPERATIONS_H */
diff --git a/libnemo-private/nemo-metadata.c b/libnemo-private/nemo-metadata.c
index 6a2fbd3e2..595f5e414 100644
--- a/libnemo-private/nemo-metadata.c
+++ b/libnemo-private/nemo-metadata.c
@@ -59,6 +59,7 @@ static char *used_metadata_names[] = {
   NEMO_METADATA_KEY_EMBLEMS,
   NEMO_METADATA_KEY_MONITOR,
   NEMO_METADATA_KEY_DESKTOP_GRID_HORIZONTAL,
+  NEMO_METADATA_KEY_DESKTOP_FILE_TRUSTED,
   NULL
 };
 
diff --git a/libnemo-private/nemo-metadata.h b/libnemo-private/nemo-metadata.h
index 1c32eced7..8a3389e21 100644
--- a/libnemo-private/nemo-metadata.h
+++ b/libnemo-private/nemo-metadata.h
@@ -75,6 +75,7 @@
 #define NEMO_METADATA_KEY_EMBLEMS				"emblems"
 #define NEMO_METADATA_KEY_MONITOR               "monitor"
 #define NEMO_METADATA_KEY_DESKTOP_GRID_HORIZONTAL  "desktop-horizontal"
+#define NEMO_METADATA_KEY_DESKTOP_FILE_TRUSTED              "trusted"
 
 guint nemo_metadata_get_id (const char *metadata);
 
diff --git a/src/nemo-mime-actions.c b/src/nemo-mime-actions.c
index 223d349e7..2ba428c11 100644
--- a/src/nemo-mime-actions.c
+++ b/src/nemo-mime-actions.c
@@ -102,7 +102,6 @@ typedef struct {
 #define RESPONSE_RUN 1000
 #define RESPONSE_DISPLAY 1001
 #define RESPONSE_RUN_IN_TERMINAL 1002
-#define RESPONSE_MARK_TRUSTED 1003
 #define RESPONSE_OPEN_WITH 1004
 
 #define SILENT_WINDOW_OPEN_LIMIT 5
@@ -1276,29 +1275,58 @@ untrusted_launcher_response_callback (GtkDialog *dialog,
 	GFile *file;
 	
 	switch (response_id) {
-	case RESPONSE_RUN:
-		screen = gtk_widget_get_screen (GTK_WIDGET (parameters->parent_window));
-		uri = nemo_file_get_uri (parameters->file);
-		DEBUG ("Launching untrusted launcher %s", uri);
-		nemo_launch_desktop_file (screen, uri, NULL,
-					      parameters->parent_window);
-		g_free (uri);
-		break;
-	case RESPONSE_MARK_TRUSTED:
-		file = nemo_file_get_location (parameters->file);
-		nemo_file_mark_desktop_file_trusted (file,
-							 parameters->parent_window,
-							 TRUE, 
-							 NULL, NULL);
-		g_object_unref (file);
-		break;
-	default:
-		/* Just destroy dialog */
-		break;
-	}
-	
-	gtk_widget_destroy (GTK_WIDGET (dialog));
-	activate_parameters_special_free (parameters);
+        case GTK_RESPONSE_OK:
+        {
+            file = nemo_file_get_location (parameters->file);
+
+             /* https://github.com/linuxmint/nemo/issues/1404 */
+            nemo_file_set_metadata (parameters->file, NEMO_METADATA_KEY_DESKTOP_FILE_TRUSTED,
+                                    NULL,
+                                    "yes");
+
+            nemo_file_mark_desktop_file_executable (file,
+                                                    parameters->parent_window,
+                                                    TRUE,
+                                                    NULL, NULL);
+
+            /* Need to force a reload of the attributes so is_trusted is marked
+             * correctly. Not sure why the general monitor doesn't fire in this
+             * case when setting the metadata
+             */
+            nemo_file_invalidate_all_attributes (parameters->file);
+
+            screen = gtk_widget_get_screen (GTK_WIDGET (parameters->parent_window));
+            uri = nemo_file_get_uri (parameters->file);
+            DEBUG ("Launching untrusted launcher %s", uri);
+            nemo_launch_desktop_file (screen, uri, NULL,
+                                      parameters->parent_window);
+
+            g_free (uri);
+            g_object_unref (file);
+            break;
+        }
+        case RESPONSE_DISPLAY:
+        {
+            GAppInfo *info;
+            GList *launch_list;
+
+            file = nemo_file_get_location (parameters->file);
+            launch_list = g_list_append (launch_list, file);
+            info = g_app_info_get_default_for_type ("text/plain", FALSE);
+
+            g_app_info_launch (info, launch_list, NULL, NULL);
+
+            g_list_free (launch_list);
+            g_object_unref (file);
+            break;
+        }
+        default:
+        /* Just destroy dialog */
+        break;
+    }
+
+    gtk_widget_destroy (GTK_WIDGET (dialog));
+    activate_parameters_special_free (parameters);
 }
 
 static void
@@ -1322,40 +1350,41 @@ activate_desktop_file (ActivateParameters *parameters,
 		}
 		parameters_special->file = nemo_file_ref (file);
 
-		primary = _("Untrusted application launcher");
-		display_name = nemo_file_get_display_name (file);
-		secondary =
-			g_strdup_printf (_("The application launcher \"%s\" has not been marked as trusted (executable). "
-					   "If you do not know the source of this file, launching it may be unsafe."
-					   ),
-					 display_name);
-		
-		dialog = gtk_message_dialog_new (parameters->parent_window,
-						 0,
-						 GTK_MESSAGE_WARNING,
-						 GTK_BUTTONS_NONE,
-						 NULL);
-		g_object_set (dialog,
-			      "text", primary,
-			      "secondary-text", secondary,
-			      NULL);
-
-		gtk_dialog_add_button (GTK_DIALOG (dialog),
-				       _("_Launch Anyway"), RESPONSE_RUN);
-		if (nemo_file_can_set_permissions (file)) {
-			gtk_dialog_add_button (GTK_DIALOG (dialog),
-					       _("Mark as _Trusted"), RESPONSE_MARK_TRUSTED);
-		}
-
-		gtk_dialog_add_button (GTK_DIALOG (dialog),
-				       GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL);
-		gtk_dialog_set_default_response (GTK_DIALOG (dialog), GTK_RESPONSE_CANCEL);
+        primary = _("Untrusted application launcher");
+        display_name = nemo_file_get_display_name (file);
+        secondary = g_strdup_printf (_("The application launcher \"%s\" has not been marked as trusted (executable). "
+                                     "If you do not know the source of this file, launching it may be unsafe."),
+                                     display_name);
+
+        dialog = gtk_message_dialog_new (parameters->parent_window,
+                                         0,
+                                         GTK_MESSAGE_WARNING,
+                                         GTK_BUTTONS_NONE,
+                                         NULL);
+        g_object_set (dialog,
+                      "text", primary,
+                      "secondary-text", secondary,
+                      NULL);
+
+        gtk_dialog_add_button (GTK_DIALOG (dialog),
+                               GTK_STOCK_CANCEL,
+                               GTK_RESPONSE_CANCEL);
+
+        gtk_dialog_add_button (GTK_DIALOG (dialog),
+                               _("View file contents"),
+                               RESPONSE_DISPLAY);
+
+        if (nemo_file_can_set_permissions (file)) {
+            gtk_dialog_add_button (GTK_DIALOG (dialog),
+                                   _("Trust and _launch"),
+                                   GTK_RESPONSE_OK);
+        }
+
+        g_signal_connect (dialog, "response",
+                          G_CALLBACK (untrusted_launcher_response_callback),
+                          parameters_special);
+        gtk_widget_show (dialog);
 
-		g_signal_connect (dialog, "response",
-				  G_CALLBACK (untrusted_launcher_response_callback),
-				  parameters_special);
-		gtk_widget_show (dialog);
-		
 		g_free (display_name);
 		g_free (secondary);
 		return;

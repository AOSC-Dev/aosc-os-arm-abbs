From 6164b6dcbf3159b512c00c927122533c59e90dff Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <icenowy@aosc.io>
Date: Sun, 6 Sep 2020 23:09:34 +0800
Subject: [PATCH] Restore no_integrated_as

Signed-off-by: Icenowy Zheng <icenowy@aosc.io>
---
 src/librustc_codegen_llvm/back/write.rs       | 63 +++++++++++--------
 src/librustc_codegen_ssa/back/link.rs         |  4 +-
 src/librustc_codegen_ssa/back/write.rs        | 60 +++++++++++++++++-
 src/librustc_interface/tests.rs               |  1 +
 src/librustc_session/options.rs               |  2 +
 .../no-integrated-as/Makefile                 |  8 +++
 .../no-integrated-as/hello.rs                 |  3 +
 7 files changed, 113 insertions(+), 28 deletions(-)
 create mode 100644 src/test/run-make-fulldeps/no-integrated-as/Makefile
 create mode 100644 src/test/run-make-fulldeps/no-integrated-as/hello.rs

diff --git a/src/librustc_codegen_llvm/back/write.rs b/src/librustc_codegen_llvm/back/write.rs
index 02a9294930d..35caaaa8b6b 100644
--- a/src/librustc_codegen_llvm/back/write.rs
+++ b/src/librustc_codegen_llvm/back/write.rs
@@ -12,7 +12,9 @@ use crate::type_::Type;
 use crate::LlvmCodegenBackend;
 use crate::ModuleLlvm;
 use log::debug;
-use rustc_codegen_ssa::back::write::{BitcodeSection, CodegenContext, EmitObj, ModuleConfig};
+use rustc_codegen_ssa::back::write::{
+    run_assembler, BitcodeSection, CodegenContext, EmitObj, ModuleConfig,
+};
 use rustc_codegen_ssa::traits::*;
 use rustc_codegen_ssa::{CompiledModule, ModuleCodegen};
 use rustc_data_structures::small_c_str::SmallCStr;
@@ -733,21 +735,18 @@ pub(crate) unsafe fn codegen(
             })?;
         }
 
-        if config.emit_asm {
+        let config_emit_object_code = matches!(config.emit_obj, EmitObj::ObjectCode(_));
+
+        if config.emit_asm || (config_emit_object_code && config.no_integrated_as) {
             let _timer = cgcx
                 .prof
                 .generic_activity_with_arg("LLVM_module_codegen_emit_asm", &module.name[..]);
             let path = cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);
 
-            // We can't use the same module for asm and object code output,
-            // because that triggers various errors like invalid IR or broken
-            // binaries. So we must clone the module to produce the asm output
-            // if we are also producing object code.
-            let llmod = if let EmitObj::ObjectCode(_) = config.emit_obj {
-                llvm::LLVMCloneModule(llmod)
-            } else {
-                llmod
-            };
+            // We can't use the same module for asm and binary output, because that triggers
+            // various errors like invalid IR or broken binaries, so we might have to clone the
+            // module to produce the asm output
+            let llmod = if config_emit_object_code { llvm::LLVMCloneModule(llmod) } else { llmod };
             with_codegen(tm, llmod, config.no_builtins, |cpm| {
                 write_output_file(diag_handler, tm, cpm, llmod, &path, llvm::FileType::AssemblyFile)
             })?;
@@ -755,19 +754,34 @@ pub(crate) unsafe fn codegen(
 
         match config.emit_obj {
             EmitObj::ObjectCode(_) => {
-                let _timer = cgcx
-                    .prof
-                    .generic_activity_with_arg("LLVM_module_codegen_emit_obj", &module.name[..]);
-                with_codegen(tm, llmod, config.no_builtins, |cpm| {
-                    write_output_file(
-                        diag_handler,
-                        tm,
-                        cpm,
-                        llmod,
-                        &obj_out,
-                        llvm::FileType::ObjectFile,
-                    )
-                })?;
+                if !config.no_integrated_as {
+                    let _timer = cgcx.prof.generic_activity_with_arg(
+                        "LLVM_module_codegen_emit_obj",
+                        &module.name[..],
+                    );
+                    with_codegen(tm, llmod, config.no_builtins, |cpm| {
+                        write_output_file(
+                            diag_handler,
+                            tm,
+                            cpm,
+                            llmod,
+                            &obj_out,
+                            llvm::FileType::ObjectFile,
+                        )
+                    })?;
+                } else {
+                    let _timer = cgcx.prof.generic_activity_with_arg(
+                        "LLVM_module_codegen_asm_to_obj",
+                        &module.name[..],
+                    );
+                    let assembly =
+                        cgcx.output_filenames.temp_path(OutputType::Assembly, module_name);
+                    run_assembler(cgcx, diag_handler, &assembly, &obj_out);
+
+                    if !config.emit_asm && !cgcx.save_temps {
+                        drop(fs::remove_file(&assembly));
+                    }
+                }
             }
 
             EmitObj::Bitcode => {
@@ -789,7 +803,6 @@ pub(crate) unsafe fn codegen(
 
         drop(handlers);
     }
-
     Ok(module.into_compiled_module(
         config.emit_obj != EmitObj::None,
         config.emit_bc,
diff --git a/src/librustc_codegen_ssa/back/link.rs b/src/librustc_codegen_ssa/back/link.rs
index dcce1d45298..9bc0a362892 100644
--- a/src/librustc_codegen_ssa/back/link.rs
+++ b/src/librustc_codegen_ssa/back/link.rs
@@ -146,7 +146,7 @@ pub fn link_binary<'a, B: ArchiveBuilder<'a>>(
 // The third parameter is for env vars, used on windows to set up the
 // path for MSVC to find its DLLs, and gcc to find its bundled
 // toolchain
-fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {
+pub fn get_linker(sess: &Session, linker: &Path, flavor: LinkerFlavor) -> Command {
     let msvc_tool = windows_registry::find_tool(&sess.opts.target_triple.triple(), "link.exe");
 
     // If our linker looks like a batch script on Windows then to execute this
@@ -779,7 +779,7 @@ pub fn ignored_for_lto(sess: &Session, info: &CrateInfo, cnum: CrateNum) -> bool
         && (info.compiler_builtins == Some(cnum) || info.is_no_builtins.contains(&cnum))
 }
 
-fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {
+pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {
     fn infer_from(
         sess: &Session,
         linker: Option<PathBuf>,
diff --git a/src/librustc_codegen_ssa/back/write.rs b/src/librustc_codegen_ssa/back/write.rs
index cb5c95c11fa..905881c4899 100644
--- a/src/librustc_codegen_ssa/back/write.rs
+++ b/src/librustc_codegen_ssa/back/write.rs
@@ -1,4 +1,5 @@
-use super::link::{self, remove};
+use super::command::Command;
+use super::link::{self, get_linker, remove};
 use super::linker::LinkerInfo;
 use super::lto::{self, SerializedModule};
 use super::symbol_export::symbol_name_for_instance_in_crate;
@@ -111,6 +112,7 @@ pub struct ModuleConfig {
     pub inline_threshold: Option<usize>,
     pub new_llvm_pass_manager: bool,
     pub emit_lifetime_markers: bool,
+    pub no_integrated_as: bool,
 }
 
 impl ModuleConfig {
@@ -260,6 +262,7 @@ impl ModuleConfig {
             inline_threshold: sess.opts.cg.inline_threshold,
             new_llvm_pass_manager: sess.opts.debugging_opts.new_llvm_pass_manager,
             emit_lifetime_markers: sess.emit_lifetime_markers(),
+            no_integrated_as: sess.opts.cg.no_integrated_as,
         }
     }
 
@@ -270,6 +273,11 @@ impl ModuleConfig {
     }
 }
 
+/// Assembler name and command used by codegen when no_integrated_as is enabled
+pub struct AssemblerCommand {
+    cmd: Command,
+}
+
 // HACK(eddyb) work around `#[derive]` producing wrong bounds for `Clone`.
 pub struct TargetMachineFactory<B: WriteBackendMethods>(
     pub Arc<dyn Fn() -> Result<B::TargetMachine, String> + Send + Sync>,
@@ -322,6 +330,8 @@ pub struct CodegenContext<B: WriteBackendMethods> {
     pub cgu_reuse_tracker: CguReuseTracker,
     // Channel back to the main control thread to send messages to
     pub coordinator_send: Sender<Box<dyn Any + Send>>,
+    // The assembler command if no_integrated_as option is enabled, None otherwise
+    pub assembler_cmd: Option<Arc<AssemblerCommand>>,
 }
 
 impl<B: WriteBackendMethods> CodegenContext<B> {
@@ -981,6 +991,17 @@ fn start_executing_work<B: ExtraBackendMethods>(
         each_linked_rlib_for_lto.push((cnum, path.to_path_buf()));
     }));
 
+    let assembler_cmd = if tcx.sess.opts.cg.no_integrated_as {
+        // HACK: currently we use linker (gcc) as our assembler
+        let (linker, flavor) = link::linker_and_flavor(sess);
+
+        let mut cmd = get_linker(sess, &linker, flavor);
+        cmd.args(&sess.target.target.options.asm_args);
+        Some(Arc::new(AssemblerCommand { cmd }))
+    } else {
+        None
+    };
+
     let ol = if tcx.sess.opts.debugging_opts.no_codegen
         || !tcx.sess.opts.output_types.should_codegen()
     {
@@ -1016,6 +1037,7 @@ fn start_executing_work<B: ExtraBackendMethods>(
         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),
         target_arch: tcx.sess.target.target.arch.clone(),
         debuginfo: tcx.sess.opts.debuginfo,
+        assembler_cmd,
     };
 
     // This is the "main loop" of parallel work happening for parallel codegen.
@@ -1549,6 +1571,42 @@ fn spawn_work<B: ExtraBackendMethods>(cgcx: CodegenContext<B>, work: WorkItem<B>
     });
 }
 
+pub fn run_assembler<B: ExtraBackendMethods>(
+    cgcx: &CodegenContext<B>,
+    handler: &Handler,
+    assembly: &Path,
+    object: &Path,
+) {
+    let assembler = cgcx.assembler_cmd.as_ref().expect("cgcx.assembler_cmd is missing?");
+
+    let mut cmd = assembler.cmd.clone();
+    cmd.arg("-c").arg("-o").arg(object).arg(assembly);
+    debug!("{:?}", cmd);
+
+    match cmd.output() {
+        Ok(prog) => {
+            if !prog.status.success() {
+                let mut note = prog.stderr.clone();
+                note.extend_from_slice(&prog.stdout);
+
+                handler
+                    .struct_err(&format!(
+                        "linking with external linker failed: {}",
+                        prog.status
+                    ))
+                    .note(&format!("{:?}", &cmd))
+                    .note(str::from_utf8(&note[..]).unwrap())
+                    .emit();
+                handler.abort_if_errors();
+            }
+        }
+        Err(e) => {
+            handler.err(&format!("could not exec the linker: {}", e));
+            handler.abort_if_errors();
+        }
+    }
+}
+
 enum SharedEmitterMessage {
     Diagnostic(Diagnostic),
     InlineAsmError(u32, String, Option<(String, Vec<InnerSpan>)>),
diff --git a/src/librustc_interface/tests.rs b/src/librustc_interface/tests.rs
index 18cbea858d4..ff10b941b9b 100644
--- a/src/librustc_interface/tests.rs
+++ b/src/librustc_interface/tests.rs
@@ -429,6 +429,7 @@ fn test_codegen_options_tracking_hash() {
     tracked!(lto, LtoCli::Fat);
     tracked!(metadata, vec![String::from("A"), String::from("B")]);
     tracked!(no_prepopulate_passes, true);
+    tracked!(no_integrated_as, true);
     tracked!(no_redzone, Some(true));
     tracked!(no_vectorize_loops, true);
     tracked!(no_vectorize_slp, true);
diff --git a/src/librustc_session/options.rs b/src/librustc_session/options.rs
index a38e7f063d7..0f2eb5ad61d 100644
--- a/src/librustc_session/options.rs
+++ b/src/librustc_session/options.rs
@@ -727,6 +727,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,
         "perform LLVM link-time optimizations"),
     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],
         "metadata to mangle symbol names with"),
+    no_integrated_as: bool = (false, parse_bool, [TRACKED],
+        "use an external assembler rather than LLVM's integrated one"),
     no_prepopulate_passes: bool = (false, parse_no_flag, [TRACKED],
         "give an empty list of passes to the pass manager"),
     no_redzone: Option<bool> = (None, parse_opt_bool, [TRACKED],
diff --git a/src/test/run-make-fulldeps/no-integrated-as/Makefile b/src/test/run-make-fulldeps/no-integrated-as/Makefile
new file mode 100644
index 00000000000..1567b325d4f
--- /dev/null
+++ b/src/test/run-make-fulldeps/no-integrated-as/Makefile
@@ -0,0 +1,8 @@
+-include ../tools.mk
+
+# only-linux
+# only-x86_64
+
+all:
+	$(RUSTC) hello.rs -C no_integrated_as
+	$(call RUN,hello)
diff --git a/src/test/run-make-fulldeps/no-integrated-as/hello.rs b/src/test/run-make-fulldeps/no-integrated-as/hello.rs
new file mode 100644
index 00000000000..e7a11a969c0
--- /dev/null
+++ b/src/test/run-make-fulldeps/no-integrated-as/hello.rs
@@ -0,0 +1,3 @@
+fn main() {
+    println!("Hello, world!");
+}
-- 
2.27.0


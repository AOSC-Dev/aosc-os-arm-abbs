diff -Naur acbs.o4vnggv2/idlib/math/Simd.cpp acbs.o4vnggv2-new/idlib/math/Simd.cpp
--- acbs.o4vnggv2/idlib/math/Simd.cpp	2020-06-27 15:09:56.827318500 -0500
+++ acbs.o4vnggv2-new/idlib/math/Simd.cpp	2021-02-15 23:34:02.469142129 -0600
@@ -24,9 +24,9 @@
 //#include "Simd_MMX.h"
 #include "Simd_SSE.h"
 #include "Simd_SSE2.h"
-#include "Simd_SSE3.h"
-#include "Simd_AVX.h"
-#include "Simd_AVX2.h"
+//#include "Simd_SSE3.h"
+//#include "Simd_AVX.h"
+//#include "Simd_AVX2.h"
 #if defined(_MSC_VER) && defined(_WIN64)
 #include <intrin.h>
 #endif
@@ -145,13 +145,13 @@
 	bool upToSSE41 = upToSSSE3 && ( cpuid & CPUID_SSE41 );
 	bool upToAVX = upToSSE41 && ( cpuid & CPUID_AVX );
 	bool upToAVX2 = upToAVX && ( cpuid & CPUID_AVX2 ) && ( cpuid & CPUID_FMA3 );
-	if ( upToAVX2 && (!forceImpl || idStr::Icmp(forceImpl, "AVX2") == 0) ) {
+	/*if ( upToAVX2 && (!forceImpl || idStr::Icmp(forceImpl, "AVX2") == 0) ) {
 		processor = new idSIMD_AVX2;
 	} else if ( upToAVX && (!forceImpl || idStr::Icmp(forceImpl, "AVX") == 0) ) {
 		processor = new idSIMD_AVX;
 	} else if ( upToSSE3 && (!forceImpl || idStr::Icmp(forceImpl, "SSE3") == 0) ) {
 		processor = new idSIMD_SSE3;
-	} else if ( upToSSE2 && (!forceImpl || idStr::Icmp(forceImpl, "SSE2") == 0) ) {
+	} else */if ( upToSSE2 && (!forceImpl || idStr::Icmp(forceImpl, "SSE2") == 0) ) {
 		processor = new idSIMD_SSE2;
 	} else if ( upToSSE && (!forceImpl || idStr::Icmp(forceImpl, "SSE") == 0) ) {
 		processor = new idSIMD_SSE;
@@ -4013,7 +4013,7 @@
 				return;
 			}
 			p_simd = new idSIMD_SSE2;
-		} else if ( idStr::Icmp( argString, "SSE3" ) == 0 ) {
+		/*} else if ( idStr::Icmp( argString, "SSE3" ) == 0 ) {
 			if ( !( cpuid & CPUID_SSE ) || !( cpuid & CPUID_SSE2 ) || !( cpuid & CPUID_SSE3 ) ) {
 				common->Printf( "CPU does not support SSE & SSE2 & SSE3\n" );
 				return;
@@ -4030,7 +4030,7 @@
 				common->Printf( "CPU does not support SSE* & AVX & AVX2 & FMA3\n" );
 				return;
 			}
-			p_simd = new idSIMD_AVX2();
+			p_simd = new idSIMD_AVX2();*/
 		} else {
 			common->Printf( "invalid argument, use: SSE, SSE2, SSE3, AVX, AVX2\n" );
 			return;
diff -Naur acbs.o4vnggv2/idlib/math/Simd_SSE.h acbs.o4vnggv2-new/idlib/math/Simd_SSE.h
--- acbs.o4vnggv2/idlib/math/Simd_SSE.h	2020-06-27 15:10:15.966640800 -0500
+++ acbs.o4vnggv2-new/idlib/math/Simd_SSE.h	2021-02-15 23:23:36.637990035 -0600
@@ -16,6 +16,7 @@
 #ifndef __MATH_SIMD_SSE_H__
 #define __MATH_SIMD_SSE_H__
 
+#include <emmintrin.h>
 /*
 ===============================================================================
 
diff -Naur acbs.o4vnggv2/idlib/math/Simd_SSE2.h acbs.o4vnggv2-new/idlib/math/Simd_SSE2.h
--- acbs.o4vnggv2/idlib/math/Simd_SSE2.h	2020-06-27 15:10:15.978644400 -0500
+++ acbs.o4vnggv2-new/idlib/math/Simd_SSE2.h	2021-02-15 23:24:16.933790124 -0600
@@ -15,7 +15,7 @@
 
 #ifndef __MATH_SIMD_SSE2_H__
 #define __MATH_SIMD_SSE2_H__
-
+#include <emmintrin.h>
 /*
 ===============================================================================
 
diff -Naur acbs.o4vnggv2/idlib/sys/sys_defines.h acbs.o4vnggv2-new/idlib/sys/sys_defines.h
--- acbs.o4vnggv2/idlib/sys/sys_defines.h	2020-06-27 15:10:16.009651100 -0500
+++ acbs.o4vnggv2-new/idlib/sys/sys_defines.h	2021-02-15 23:06:56.986252828 -0600
@@ -115,6 +115,8 @@
 #define CPUSTRING						"x86_64"
 #elif defined(__e2k__)
 #define CPUSTRING						"e2k"
+#elif defined(__powerpc64__)
+#define CPUSTRING						"ppc64"
 #else
 #error unknown CPU
 #endif
@@ -294,4 +296,4 @@
 
 #endif // ifdef _MSV_VER
 
-#define ID_LITTLE_ENDIAN
\ No newline at end of file
+#define ID_LITTLE_ENDIAN
--- a/CMakeLists.txt	2021-02-23 03:31:26.936496390 -0600
+++ b/CMakeLists.txt	2021-02-23 03:41:01.916466444 -0600
@@ -43,7 +43,6 @@
 			-fvisibility=hidden
 			-fno-unsafe-math-optimizations
 			-std=c++14
-			-msse2
 	)
 	# TODO: do we really want to keep using this
 	# use old ABI for std::string and std::list to allow TDM to run on distros with old
@@ -141,6 +140,9 @@
 		"game/MultiplayerGame.cpp"
 		"game/gamesys/Callbacks.cpp"
 		"idlib/math/Simd_AltiVec.cpp"
+                "idlib/math/Simd_AVX.cpp"
+                "idlib/math/Simd_AVX2.cpp"
+                "idlib/math/Simd_SSE3.cpp"
 		"renderer/draw_exp.cpp"
 		"sys/win32/win_gamma.cpp"
 		FROM TDM_SOURCE_FILES

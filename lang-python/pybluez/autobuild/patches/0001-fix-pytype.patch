From fabc59ad0f33cd1cc2ff8b14cfd9df140e51df60 Mon Sep 17 00:00:00 2001
From: Ola Tuvesson <196348+clickworkorange@users.noreply.github.com>
Date: Wed, 19 Apr 2023 21:54:11 +0100
Subject: [PATCH] Replace Py_TYPE(obj)=type with Py_SET_TYPE()

Since Py_TYPE() was changed to an inline static function in PEP670, `Py_TYPE(obj) = new_type` must be replaced with the new function `Py_SET_TYPE(obj, new_type)`, available since Python 3.9. For backward compatibility, this macro can be used:
````c++
#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE)
static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type)
{ ob->ob_type = type; }
#define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type)
#endif
````
See https://github.com/python/cpython/issues/83754
---
 bluetooth/linux/bluez/btmodule.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/bluetooth/linux/bluez/btmodule.c b/bluetooth/linux/bluez/btmodule.c
index af8a3d0d..b0306f65 100644
--- a/bluetooth/linux/bluez/btmodule.c
+++ b/bluetooth/linux/bluez/btmodule.c
@@ -3038,8 +3038,8 @@ static struct PyModuleDef moduledef = {
 PyMODINIT_FUNC
 PyInit__bluetooth(void)
 {
-    Py_TYPE(&sock_type) = &PyType_Type;
-    Py_TYPE(&sdp_session_type) = &PyType_Type;
+    Py_SET_TYPE(&sock_type, &PyType_Type);
+    Py_SET_TYPE(&sdp_session_type, &PyType_Type);
     PyObject *m = PyModule_Create(&moduledef);
     if (m == NULL)
         INITERROR;

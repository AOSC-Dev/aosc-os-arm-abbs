From 7f72ad27209daea97abf5421b0ba91f52a2f3e76 Mon Sep 17 00:00:00 2001
From: alwu <alwu@mozilla.com>
Date: Tue, 28 Jan 2025 23:15:28 +0000
Subject: [PATCH 11/22] BACKPORT: Bug 1942404 - part1 : make SPSIterator find
 the SPS in the ctor. r=padenot

The current implementation of SPSIterator is incorrect; it requires
calling the `++` operator before accessing any SPS. The `*` operator
should allow access to the SPS immediately after the SPSIterator is created.

Differential Revision: https://phabricator.services.mozilla.com/D235526
---
 .../platforms/agnostic/bytestreams/H265.cpp   | 43 +++++++++++++------
 1 file changed, 31 insertions(+), 12 deletions(-)

diff --git a/dom/media/platforms/agnostic/bytestreams/H265.cpp b/dom/media/platforms/agnostic/bytestreams/H265.cpp
index fad917488a59..53fbe3bb8f5f 100644
--- a/dom/media/platforms/agnostic/bytestreams/H265.cpp
+++ b/dom/media/platforms/agnostic/bytestreams/H265.cpp
@@ -1222,27 +1222,46 @@ already_AddRefed<mozilla::MediaByteBuffer> H265::ExtractHVCCExtraData(
 
 class SPSIterator final {
  public:
-  explicit SPSIterator(const HVCCConfig& aConfig) : mConfig(aConfig) {}
+  explicit SPSIterator(const HVCCConfig& aConfig)
+      : mCurrentIdx(0), mConfig(aConfig) {
+    FindSPS();
+  }
 
   SPSIterator& operator++() {
-    size_t idx = 0;
-    for (idx = mNextIdx; idx < mConfig.mNALUs.Length(); idx++) {
+    mCurrentIdx++;
+    FindSPS();
+    return *this;
+  }
+
+  explicit operator bool() const { return IsValid(); }
+
+  const H265NALU* operator*() const {
+    if (!IsValid()) {
+      return nullptr;
+    }
+    if (!mConfig.mNALUs[mCurrentIdx].IsSPS()) {
+      return nullptr;
+    }
+    return &mConfig.mNALUs[mCurrentIdx];
+  }
+
+ private:
+  void FindSPS() {
+    Maybe<size_t> spsIdx;
+    for (auto idx = mCurrentIdx; idx < mConfig.mNALUs.Length(); idx++) {
       if (mConfig.mNALUs[idx].IsSPS()) {
-        mSPS = &mConfig.mNALUs[idx];
+        spsIdx = Some(idx);
         break;
       }
     }
-    mNextIdx = idx + 1;
-    return *this;
+    if (spsIdx) {
+      mCurrentIdx = *spsIdx;
+    }
   }
 
-  explicit operator bool() const { return mNextIdx < mConfig.mNALUs.Length(); }
+  bool IsValid() const { return mCurrentIdx < mConfig.mNALUs.Length(); }
 
-  const H265NALU* operator*() const { return mSPS ? mSPS : nullptr; }
-
- private:
-  size_t mNextIdx = 0;
-  const H265NALU* mSPS = nullptr;
+  size_t mCurrentIdx;
   const HVCCConfig& mConfig;
 };
 
-- 
2.48.1


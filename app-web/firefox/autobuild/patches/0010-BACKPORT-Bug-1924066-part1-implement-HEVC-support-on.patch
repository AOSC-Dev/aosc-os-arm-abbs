From 637365a1204324587e8cd6ec9360adcd9a277a36 Mon Sep 17 00:00:00 2001
From: alwu <alwu@mozilla.com>
Date: Wed, 22 Jan 2025 22:35:17 +0000
Subject: [PATCH 10/22] BACKPORT: Bug 1924066 - part1 : implement HEVC support
 on MacOS by using the platform decoder. r=media-playback-reviewers,padenot

We use the videotoolbox video decoder to support HEVC SW and HW decoding
on MacOS. The input data needs to be feeding in HVCC format.

Differential Revision: https://phabricator.services.mozilla.com/D234235
---
 dom/media/ipc/MediaIPCUtils.h                 |  2 +-
 dom/media/ipc/RemoteDecoderManagerChild.cpp   |  4 +-
 dom/media/platforms/PlatformDecoderModule.h   |  1 +
 .../platforms/agnostic/bytestreams/H265.cpp   | 64 +++++++++++++
 .../platforms/agnostic/bytestreams/H265.h     |  9 ++
 .../platforms/apple/AppleDecoderModule.cpp    | 90 ++++++++++++-------
 dom/media/platforms/apple/AppleVTDecoder.cpp  | 65 ++++++++++----
 dom/media/platforms/apple/AppleVTDecoder.h    | 15 +++-
 .../platforms/wrappers/MediaChangeMonitor.cpp |  8 +-
 9 files changed, 205 insertions(+), 53 deletions(-)

diff --git a/dom/media/ipc/MediaIPCUtils.h b/dom/media/ipc/MediaIPCUtils.h
index ffacd0fa35a0..ee618ddbeeb6 100644
--- a/dom/media/ipc/MediaIPCUtils.h
+++ b/dom/media/ipc/MediaIPCUtils.h
@@ -215,7 +215,7 @@ struct ParamTraits<mozilla::MediaDataDecoder::ConversionRequired>
           mozilla::MediaDataDecoder::ConversionRequired,
           mozilla::MediaDataDecoder::ConversionRequired(0),
           mozilla::MediaDataDecoder::ConversionRequired(
-              mozilla::MediaDataDecoder::ConversionRequired::kNeedAnnexB)> {};
+              mozilla::MediaDataDecoder::ConversionRequired::kNeedHVCC)> {};
 
 template <>
 struct ParamTraits<mozilla::media::TimeUnit> {
diff --git a/dom/media/ipc/RemoteDecoderManagerChild.cpp b/dom/media/ipc/RemoteDecoderManagerChild.cpp
index 002cdfd3e303..6d51f954eef8 100644
--- a/dom/media/ipc/RemoteDecoderManagerChild.cpp
+++ b/dom/media/ipc/RemoteDecoderManagerChild.cpp
@@ -278,8 +278,10 @@ bool RemoteDecoderManagerChild::Supports(
         }
         return aLocation == RemoteDecodeIn::UtilityProcess_MFMediaEngineCDM ||
                aLocation == RemoteDecodeIn::GpuProcess;
+#elif defined(MOZ_APPLEMEDIA)
+        return trackSupport.contains(TrackSupport::Video);
 #else
-        // TODO : in the future, we need to add HEVC check on other platforms.
+        // TODO : still need to add support on Android and Linux.
         return false;
 #endif
       }
diff --git a/dom/media/platforms/PlatformDecoderModule.h b/dom/media/platforms/PlatformDecoderModule.h
index 31bef53a6f83..a81bc19ab114 100644
--- a/dom/media/platforms/PlatformDecoderModule.h
+++ b/dom/media/platforms/PlatformDecoderModule.h
@@ -621,6 +621,7 @@ class MediaDataDecoder : public DecoderDoctorLifeLogger<MediaDataDecoder> {
     kNeedNone = 0,
     kNeedAVCC = 1,
     kNeedAnnexB = 2,
+    kNeedHVCC = 3,
   };
 
   // Indicates that the decoder requires a specific format.
diff --git a/dom/media/platforms/agnostic/bytestreams/H265.cpp b/dom/media/platforms/agnostic/bytestreams/H265.cpp
index bf2fe4b6b22b..fad917488a59 100644
--- a/dom/media/platforms/agnostic/bytestreams/H265.cpp
+++ b/dom/media/platforms/agnostic/bytestreams/H265.cpp
@@ -1294,6 +1294,70 @@ bool H265::CompareExtraData(const mozilla::MediaByteBuffer* aExtraData1,
   return true;
 }
 
+/* static */
+uint32_t H265::ComputeMaxRefFrames(const mozilla::MediaByteBuffer* aExtraData) {
+  auto rv = DecodeSPSFromHVCCExtraData(aExtraData);
+  if (rv.isErr()) {
+    return 0;
+  }
+  return rv.unwrap().sps_max_dec_pic_buffering_minus1[0] + 1;
+}
+
+/* static */
+already_AddRefed<mozilla::MediaByteBuffer> H265::CreateFakeExtraData() {
+  // Create fake VPS, SPS, PPS and append them into HVCC box
+  static const uint8_t sFakeVPS[] = {
+      0x40, 0x01, 0x0C, 0x01, 0xFF, 0xFF, 0x01, 0x60, 0x00, 0x00, 0x03, 0x00,
+      0x90, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x3F, 0x95, 0x98, 0x09};
+  static const uint8_t sFakeSPS[] = {
+      0x42, 0x01, 0x01, 0x01, 0x60, 0x00, 0x00, 0x03, 0x00, 0x90, 0x00,
+      0x00, 0x03, 0x00, 0x00, 0x03, 0x00, 0x3F, 0xA0, 0x05, 0x02, 0x01,
+      0x69, 0x65, 0x95, 0x9A, 0x49, 0x32, 0xBC, 0x04, 0x04, 0x00, 0x00,
+      0x03, 0x00, 0x04, 0x00, 0x00, 0x03, 0x00, 0x78, 0x20};
+  static const uint8_t sFakePPS[] = {0x44, 0x01, 0xC1, 0x72, 0xB4, 0x62, 0x40};
+  nsTArray<H265NALU> nalus;
+  nalus.AppendElement(H265NALU{sFakeVPS, sizeof(sFakeVPS)});
+  nalus.AppendElement(H265NALU{sFakeSPS, sizeof(sFakeSPS)});
+  nalus.AppendElement(H265NALU{sFakePPS, sizeof(sFakePPS)});
+
+  // HEVCDecoderConfigurationRecord (HVCC) is in ISO/IEC 14496-15 8.3.2.1.2
+  const uint8_t nalLenSize = 4;
+  auto extradata = MakeRefPtr<mozilla::MediaByteBuffer>();
+  BitWriter writer(extradata);
+  writer.WriteBits(1, 8);               // version
+  writer.WriteBits(0, 2);               // general_profile_space
+  writer.WriteBits(0, 1);               // general_tier_flag
+  writer.WriteBits(1 /* main */, 5);    // general_profile_idc
+  writer.WriteU32(0);                   // general_profile_compatibility_flags
+  writer.WriteBits(0, 48);              // general_constraint_indicator_flags
+  writer.WriteU8(1 /* level 1 */);      // general_level_idc
+  writer.WriteBits(0, 4);               // reserved
+  writer.WriteBits(0, 12);              // min_spatial_segmentation_idc
+  writer.WriteBits(0, 6);               // reserved
+  writer.WriteBits(0, 2);               // parallelismType
+  writer.WriteBits(0, 6);               // reserved
+  writer.WriteBits(0, 2);               // chroma_format_idc
+  writer.WriteBits(0, 5);               // reserved
+  writer.WriteBits(0, 3);               // bit_depth_luma_minus8
+  writer.WriteBits(0, 5);               // reserved
+  writer.WriteBits(0, 3);               // bit_depth_chroma_minus8
+  writer.WriteBits(0, 22);              // avgFrameRate + constantFrameRate +
+                                        // numTemporalLayers + temporalIdNested
+  writer.WriteBits(nalLenSize - 1, 2);  // lengthSizeMinusOne
+  writer.WriteU8(nalus.Length());       // numOfArrays
+  for (auto& nalu : nalus) {
+    writer.WriteBits(0, 2);                     // array_completeness + reserved
+    writer.WriteBits(nalu.mNalUnitType, 6);     // NAL_unit_type
+    writer.WriteBits(1, 16);                    // numNalus
+    writer.WriteBits(nalu.mNALU.Length(), 16);  // nalUnitLength
+    MOZ_ASSERT(writer.BitCount() % 8 == 0);
+    extradata->AppendElements(nalu.mNALU.Elements(), nalu.mNALU.Length());
+    writer.AdvanceBytes(nalu.mNALU.Length());
+  }
+  MOZ_ASSERT(HVCCConfig::Parse(extradata).isOk());
+  return extradata.forget();
+}
+
 #undef LOG
 #undef LOGV
 
diff --git a/dom/media/platforms/agnostic/bytestreams/H265.h b/dom/media/platforms/agnostic/bytestreams/H265.h
index 5aca28e5cb6f..4f46ee8af28b 100644
--- a/dom/media/platforms/agnostic/bytestreams/H265.h
+++ b/dom/media/platforms/agnostic/bytestreams/H265.h
@@ -318,6 +318,15 @@ class H265 final {
   static bool CompareExtraData(const mozilla::MediaByteBuffer* aExtraData1,
                                const mozilla::MediaByteBuffer* aExtraData2);
 
+  // Return the value of sps_max_dec_pic_buffering_minus1[0] + 1 from a valid
+  // SPS in the extradata, otherwise return 0.
+  static uint32_t ComputeMaxRefFrames(
+      const mozilla::MediaByteBuffer* aExtraData);
+
+  // Create a dummy extradata, useful to create a decoder and test the
+  // capabilities of the decoder.
+  static already_AddRefed<mozilla::MediaByteBuffer> CreateFakeExtraData();
+
  private:
   // Return RAW BYTE SEQUENCE PAYLOAD (rbsp) from NAL content.
   static already_AddRefed<mozilla::MediaByteBuffer> DecodeNALUnit(
diff --git a/dom/media/platforms/apple/AppleDecoderModule.cpp b/dom/media/platforms/apple/AppleDecoderModule.cpp
index b92369601ce1..5f46160aebe1 100644
--- a/dom/media/platforms/apple/AppleDecoderModule.cpp
+++ b/dom/media/platforms/apple/AppleDecoderModule.cpp
@@ -10,6 +10,7 @@
 
 #include "AppleATDecoder.h"
 #include "AppleVTDecoder.h"
+#include "H265.h"
 #include "MP4Decoder.h"
 #include "VideoUtils.h"
 #include "VPXDecoder.h"
@@ -33,9 +34,20 @@ using media::DecodeSupportSet;
 using media::MCSInfo;
 using media::MediaCodec;
 
-bool AppleDecoderModule::sInitialized = false;
-bool AppleDecoderModule::sCanUseVP9Decoder = false;
-bool AppleDecoderModule::sCanUseAV1Decoder = false;
+static inline CMVideoCodecType GetCMVideoCodecType(const MediaCodec& aCodec) {
+  switch (aCodec) {
+    case MediaCodec::H264:
+      return kCMVideoCodecType_H264;
+    case MediaCodec::AV1:
+      return kCMVideoCodecType_AV1;
+    case MediaCodec::VP9:
+      return kCMVideoCodecType_VP9;
+    case MediaCodec::HEVC:
+      return kCMVideoCodecType_HEVC;
+    default:
+      return static_cast<CMVideoCodecType>(0);
+  }
+}
 
 /* static */
 void AppleDecoderModule::Init() {
@@ -43,6 +55,24 @@ void AppleDecoderModule::Init() {
     return;
   }
 
+  // Initialize all values to false first.
+  for (auto& support : sCanUseHWDecoder) {
+    support = false;
+  }
+
+  // H264 HW is supported since 10.6.
+  sCanUseHWDecoder[MediaCodec::H264] = CanCreateHWDecoder(MediaCodec::H264);
+  // HEVC HW is supported since 10.13.
+  sCanUseHWDecoder[MediaCodec::HEVC] = CanCreateHWDecoder(MediaCodec::HEVC);
+  // VP9 HW is supported since 11.0 on Apple silicon.
+  sCanUseHWDecoder[MediaCodec::VP9] =
+      RegisterSupplementalDecoder(MediaCodec::VP9) &&
+      CanCreateHWDecoder(MediaCodec::VP9);
+  // AV1 HW is supported since 14.0 on Apple silicon.
+  sCanUseHWDecoder[MediaCodec::AV1] =
+      RegisterSupplementalDecoder(MediaCodec::AV1) &&
+      CanCreateHWDecoder(MediaCodec::AV1);
+
   sInitialized = true;
   if (RegisterSupplementalVP9Decoder()) {
     sCanUseVP9Decoder = CanCreateHWDecoder(MediaCodec::VP9);
@@ -84,10 +114,10 @@ already_AddRefed<MediaDataDecoder> AppleDecoderModule::CreateAudioDecoder(
 
 DecodeSupportSet AppleDecoderModule::SupportsMimeType(
     const nsACString& aMimeType, DecoderDoctorDiagnostics* aDiagnostics) const {
-  bool checkSupport = aMimeType.EqualsLiteral("audio/mp4a-latm") ||
-                      MP4Decoder::IsH264(aMimeType) ||
-                      VPXDecoder::IsVP9(aMimeType) ||
-                      AOMDecoder::IsAV1(aMimeType);
+  bool checkSupport =
+      aMimeType.EqualsLiteral("audio/mp4a-latm") ||
+      MP4Decoder::IsH264(aMimeType) || VPXDecoder::IsVP9(aMimeType) ||
+      AOMDecoder::IsAV1(aMimeType) || MP4Decoder::IsHEVC(aMimeType);
   DecodeSupportSet supportType{};
 
   if (checkSupport) {
@@ -146,6 +176,9 @@ bool AppleDecoderModule::IsVideoSupported(
   if (MP4Decoder::IsH264(aConfig.mMimeType)) {
     return true;
   }
+  if (MP4Decoder::IsHEVC(aConfig.mMimeType)) {
+    return true;
+  }
   if (AOMDecoder::IsAV1(aConfig.mMimeType)) {
     if (!sCanUseAV1Decoder ||
         aOptions.contains(
@@ -250,29 +283,26 @@ bool AppleDecoderModule::CanCreateHWDecoder(MediaCodec aCodec) {
       vtReportsSupport = false;
       break;
   }
-  // VT reports HW decode is supported -- verify by creating an actual decoder
-  if (vtReportsSupport) {
-    RefPtr<AppleVTDecoder> decoder =
-        new AppleVTDecoder(info, nullptr, {}, nullptr, Nothing());
-    MediaResult rv = decoder->InitializeSession();
-    if (!NS_SUCCEEDED(rv)) {
-      MOZ_LOG(
-          sPDMLog, LogLevel::Debug,
-          ("Apple HW decode failure while initializing VT decoder session"));
-      return false;
-    }
-    nsAutoCString failureReason;
-    // IsHardwareAccelerated appears to return invalid results for H.264 so
-    // we assume that the earlier VTIsHardwareDecodeSupported call is correct.
-    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1716196#c7
-    bool hwSupport = decoder->IsHardwareAccelerated(failureReason) ||
-                     aCodec == MediaCodec::H264;
-    if (!hwSupport) {
-      MOZ_LOG(sPDMLog, LogLevel::Debug,
-              ("Apple HW decode failure: '%s'", failureReason.BeginReading()));
-    }
-    decoder->Shutdown();
-    return hwSupport;
+
+  // Build up a fake extradata to create an actual decoder to verify
+  VideoInfo info(1920, 1080);
+  if (aCodec == MediaCodec::AV1) {
+    info.mMimeType = "video/av1";
+    bool hasSeqHdr;
+    AOMDecoder::AV1SequenceInfo seqInfo;
+    AOMDecoder::OperatingPoint op;
+    seqInfo.mOperatingPoints.AppendElement(op);
+    seqInfo.mImage = {1920, 1080};
+    AOMDecoder::WriteAV1CBox(seqInfo, info.mExtraData, hasSeqHdr);
+  } else if (aCodec == MediaCodec::VP9) {
+    info.mMimeType = "video/vp9";
+    VPXDecoder::GetVPCCBox(info.mExtraData, VPXDecoder::VPXStreamInfo());
+  } else if (aCodec == MediaCodec::HEVC) {
+    // Although HEVC hardware decoding is supported starting with macOS 10.13
+    // and we only support macOS 10.15+, Intel GPUs (Skylake and later, 2015)
+    // that support HEVC are not old enough to skip verification.
+    info.mMimeType = "video/hevc";
+    info.mExtraData = H265::CreateFakeExtraData();
   }
   return false;
 }
diff --git a/dom/media/platforms/apple/AppleVTDecoder.cpp b/dom/media/platforms/apple/AppleVTDecoder.cpp
index 6c937eace9c1..f78de7fb9092 100644
--- a/dom/media/platforms/apple/AppleVTDecoder.cpp
+++ b/dom/media/platforms/apple/AppleVTDecoder.cpp
@@ -15,6 +15,7 @@
 #include "AppleUtils.h"
 #include "CallbackThreadRegistry.h"
 #include "H264.h"
+#include "H265.h"
 #include "MP4Decoder.h"
 #include "MacIOSurfaceImage.h"
 #include "MediaData.h"
@@ -54,18 +55,12 @@ AppleVTDecoder::AppleVTDecoder(const VideoInfo& aConfig,
                             : gfx::TransferFunction::BT709),
       mColorRange(aConfig.mColorRange),
       mColorDepth(aConfig.mColorDepth),
-      mStreamType(MP4Decoder::IsH264(aConfig.mMimeType)  ? StreamType::H264
-                  : VPXDecoder::IsVP9(aConfig.mMimeType) ? StreamType::VP9
-                  : AOMDecoder::IsAV1(aConfig.mMimeType) ? StreamType::AV1
-                                                         : StreamType::Unknown),
+      mStreamType(AppleVTDecoder::GetStreamType(aConfig.mMimeType)),
       mTaskQueue(TaskQueue::Create(
           GetMediaThreadPool(MediaThreadType::PLATFORM_DECODER),
           "AppleVTDecoder")),
-      mMaxRefFrames(
-          mStreamType != StreamType::H264 ||
-                  aOptions.contains(CreateDecoderParams::Option::LowLatency)
-              ? 0
-              : H264::ComputeMaxRefFrames(aConfig.mExtraData)),
+      mMaxRefFrames(GetMaxRefFrames(
+          aOptions.contains(CreateDecoderParams::Option::LowLatency))),
       mImageContainer(aImageContainer),
       mKnowsCompositor(aKnowsCompositor)
 #ifdef MOZ_WIDGET_UIKIT
@@ -89,9 +84,9 @@ AppleVTDecoder::AppleVTDecoder(const VideoInfo& aConfig,
       mIsHardwareAccelerated(false) {
   MOZ_COUNT_CTOR(AppleVTDecoder);
   MOZ_ASSERT(mStreamType != StreamType::Unknown);
-  // TODO: Verify aConfig.mime_type.
-  LOG("Creating AppleVTDecoder for %dx%d %s video", mDisplayWidth,
-      mDisplayHeight, EnumValueToString(mStreamType));
+  LOG("Creating AppleVTDecoder for %dx%d %s video, mMaxRefFrames=%u",
+      mDisplayWidth, mDisplayHeight, EnumValueToString(mStreamType),
+      mMaxRefFrames);
 }
 
 AppleVTDecoder::~AppleVTDecoder() { MOZ_COUNT_DTOR(AppleVTDecoder); }
@@ -182,6 +177,9 @@ void AppleVTDecoder::ProcessDecode(MediaRawData* aSample) {
       case StreamType::AV1:
         flag |= MediaInfoFlag::VIDEO_AV1;
         break;
+      case StreamType::HEVC:
+        flag |= MediaInfoFlag::VIDEO_HEVC;
+        break;
       default:
         break;
     }
@@ -603,6 +601,8 @@ MediaResult AppleVTDecoder::InitializeSession() {
     streamType = kCMVideoCodecType_H264;
   } else if (mStreamType == StreamType::VP9) {
     streamType = CMVideoCodecType(AppleDecoderModule::kCMVideoCodecType_VP9);
+  } else if (mStreamType == StreamType::HEVC) {
+    streamType = kCMVideoCodecType_HEVC;
   } else {
     streamType = kCMVideoCodecType_AV1;
   }
@@ -661,10 +661,16 @@ CFDictionaryRef AppleVTDecoder::CreateDecoderExtensions() {
                    AssertedCast<CFIndex>(mExtraData->Length()));
 
   const void* atomsKey[1];
-  atomsKey[0] = mStreamType == StreamType::H264  ? CFSTR("avcC")
-                : mStreamType == StreamType::VP9 ? CFSTR("vpcC")
-                                                 : CFSTR("av1C");
-  ;
+  if (mStreamType == StreamType::H264) {
+    atomsKey[0] = CFSTR("avcC");
+  } else if (mStreamType == StreamType::VP9) {
+    atomsKey[0] = CFSTR("vpcC");
+  } else if (mStreamType == StreamType::HEVC) {
+    atomsKey[0] = CFSTR("hvcC");
+  } else {
+    atomsKey[0] = CFSTR("av1C");
+  }
+
   const void* atomsValue[] = {data};
   static_assert(std::size(atomsKey) == std::size(atomsValue),
                 "Non matching keys/values array size");
@@ -759,6 +765,33 @@ CFDictionaryRef AppleVTDecoder::CreateOutputConfiguration() {
       &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
 }
 
+AppleVTDecoder::StreamType AppleVTDecoder::GetStreamType(
+    const nsCString& aMimeType) const {
+  if (MP4Decoder::IsH264(aMimeType)) {
+    return StreamType::H264;
+  }
+  if (MP4Decoder::IsHEVC(aMimeType)) {
+    return StreamType::HEVC;
+  }
+  if (VPXDecoder::IsVP9(aMimeType)) {
+    return StreamType::VP9;
+  }
+  if (AOMDecoder::IsAV1(aMimeType)) {
+    return StreamType::AV1;
+  }
+  return StreamType::Unknown;
+}
+
+uint32_t AppleVTDecoder::GetMaxRefFrames(bool aIsLowLatency) const {
+  if (mStreamType == StreamType::H264 && !aIsLowLatency) {
+    return H264::ComputeMaxRefFrames(mExtraData);
+  }
+  if (mStreamType == StreamType::HEVC && !aIsLowLatency) {
+    return H265::ComputeMaxRefFrames(mExtraData);
+  }
+  return 0;
+}
+
 }  // namespace mozilla
 
 #undef LOG
diff --git a/dom/media/platforms/apple/AppleVTDecoder.h b/dom/media/platforms/apple/AppleVTDecoder.h
index 970f71d4c707..c7e5a783f79c 100644
--- a/dom/media/platforms/apple/AppleVTDecoder.h
+++ b/dom/media/platforms/apple/AppleVTDecoder.h
@@ -71,7 +71,13 @@ class AppleVTDecoder final : public MediaDataDecoder,
   nsCString GetCodecName() const override;
 
   ConversionRequired NeedsConversion() const override {
-    return ConversionRequired::kNeedAVCC;
+    if (mStreamType == StreamType::H264) {
+      return ConversionRequired::kNeedAVCC;
+    }
+    if (mStreamType == StreamType::HEVC) {
+      return ConversionRequired::kNeedHVCC;
+    }
+    return ConversionRequired::kNeedNone;
   }
 
   // Access from the taskqueue and the decoder's thread.
@@ -113,7 +119,12 @@ class AppleVTDecoder final : public MediaDataDecoder,
   CFDictionaryRef CreateDecoderExtensions();
 
   MOZ_DEFINE_ENUM_CLASS_WITH_TOSTRING_AT_CLASS_SCOPE(StreamType,
-                                                     (Unknown, H264, VP9, AV1));
+                                                     (Unknown, H264, VP9, AV1,
+                                                      HEVC));
+
+  StreamType GetStreamType(const nsCString& aMimeType) const;
+  uint32_t GetMaxRefFrames(bool aIsLowLatency) const;
+
   const StreamType mStreamType;
   const RefPtr<TaskQueue> mTaskQueue;
   const uint32_t mMaxRefFrames;
diff --git a/dom/media/platforms/wrappers/MediaChangeMonitor.cpp b/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
index 981d1bb23550..aa346d6ecb32 100644
--- a/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
+++ b/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
@@ -246,13 +246,15 @@ class HEVCChangeMonitor : public MediaChangeMonitor::CodecChangeMonitor {
   MediaResult PrepareSample(MediaDataDecoder::ConversionRequired aConversion,
                             MediaRawData* aSample,
                             bool aNeedKeyFrame) override {
-    MOZ_DIAGNOSTIC_ASSERT(aConversion ==
-                          MediaDataDecoder::ConversionRequired::kNeedAnnexB);
+    MOZ_DIAGNOSTIC_ASSERT(
+        aConversion == MediaDataDecoder::ConversionRequired::kNeedAnnexB ||
+        aConversion == MediaDataDecoder::ConversionRequired::kNeedHVCC);
+    MOZ_DIAGNOSTIC_ASSERT(AnnexB::IsHVCC(aSample));
 
     aSample->mExtraData = mCurrentConfig.mExtraData;
     aSample->mTrackInfo = mTrackInfo;
 
-    if (AnnexB::IsHVCC(aSample)) {
+    if (aConversion == MediaDataDecoder::ConversionRequired::kNeedAnnexB) {
       auto res = AnnexB::ConvertHVCCSampleToAnnexB(aSample, aNeedKeyFrame);
       if (res.isErr()) {
         return MediaResult(res.unwrapErr(),
-- 
2.48.1


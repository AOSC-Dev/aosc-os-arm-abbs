From ca9cf02649e1738e9c06f407a6dd787d8aa7f72c Mon Sep 17 00:00:00 2001
From: Xuan Chen <chenx97@aosc.io>
Date: Tue, 14 Jan 2025 21:41:32 +0000
Subject: [PATCH 9/9] Bug 1938855 - [MIPS] Replace BytecodeOffset with
 TrapSiteDesc. r=rhunt

Differential Revision: https://phabricator.services.mozilla.com/D232815
---
 .../mips-shared/CodeGenerator-mips-shared.cpp | 24 +++++++--------
 js/src/jit/mips-shared/LIR-mips-shared.h      |  6 ++--
 js/src/jit/mips32/CodeGenerator-mips32.cpp    | 30 +++++++++----------
 js/src/jit/mips32/LIR-mips32.h                | 12 ++++----
 js/src/jit/mips64/CodeGenerator-mips64.cpp    |  6 ++--
 js/src/jit/mips64/LIR-mips64.h                | 12 ++++----
 6 files changed, 45 insertions(+), 45 deletions(-)

diff --git a/js/src/jit/mips-shared/CodeGenerator-mips-shared.cpp b/js/src/jit/mips-shared/CodeGenerator-mips-shared.cpp
index 7a4047efb4..d36678a5e6 100644
--- a/js/src/jit/mips-shared/CodeGenerator-mips-shared.cpp
+++ b/js/src/jit/mips-shared/CodeGenerator-mips-shared.cpp
@@ -440,7 +440,7 @@ void CodeGenerator::visitDivI(LDivI* ins) {
     if (mir->trapOnError()) {
       Label nonZero;
       masm.ma_b(rhs, rhs, &nonZero, Assembler::NonZero);
-      masm.wasmTrap(wasm::Trap::IntegerDivideByZero, mir->bytecodeOffset());
+      masm.wasmTrap(wasm::Trap::IntegerDivideByZero, mir->trapSiteDesc());
       masm.bind(&nonZero);
     } else if (mir->canTruncateInfinities()) {
       // Truncated division by zero is zero (Infinity|0 == 0)
@@ -465,7 +465,7 @@ void CodeGenerator::visitDivI(LDivI* ins) {
     if (mir->trapOnError()) {
       Label ok;
       masm.ma_b(rhs, temp, &ok, Assembler::NotEqual);
-      masm.wasmTrap(wasm::Trap::IntegerOverflow, mir->bytecodeOffset());
+      masm.wasmTrap(wasm::Trap::IntegerOverflow, mir->trapSiteDesc());
       masm.bind(&ok);
     } else if (mir->canTruncateOverflow()) {
       // (-INT32_MIN)|0 == INT32_MIN
@@ -596,7 +596,7 @@ void CodeGenerator::visitModI(LModI* ins) {
       if (mir->trapOnError()) {
         Label nonZero;
         masm.ma_b(rhs, rhs, &nonZero, Assembler::NonZero);
-        masm.wasmTrap(wasm::Trap::IntegerDivideByZero, mir->bytecodeOffset());
+        masm.wasmTrap(wasm::Trap::IntegerDivideByZero, mir->trapSiteDesc());
         masm.bind(&nonZero);
       } else {
         Label skip;
@@ -1086,14 +1086,14 @@ void CodeGeneratorMIPSShared::visitOutOfLineBailout(OutOfLineBailout* ool) {
 void CodeGeneratorMIPSShared::visitOutOfLineWasmTruncateCheck(
     OutOfLineWasmTruncateCheck* ool) {
   if (ool->toType() == MIRType::Int32) {
-    masm.outOfLineWasmTruncateToInt32Check(
-        ool->input(), ool->output(), ool->fromType(), ool->flags(),
-        ool->rejoin(), ool->bytecodeOffset());
+    masm.outOfLineWasmTruncateToInt32Check(ool->input(), ool->output(),
+                                           ool->fromType(), ool->flags(),
+                                           ool->rejoin(), ool->trapSiteDesc());
   } else {
     MOZ_ASSERT(ool->toType() == MIRType::Int64);
-    masm.outOfLineWasmTruncateToInt64Check(
-        ool->input(), ool->output64(), ool->fromType(), ool->flags(),
-        ool->rejoin(), ool->bytecodeOffset());
+    masm.outOfLineWasmTruncateToInt64Check(ool->input(), ool->output64(),
+                                           ool->fromType(), ool->flags(),
+                                           ool->rejoin(), ool->trapSiteDesc());
   }
 }
 
@@ -1788,7 +1788,7 @@ void CodeGenerator::visitUDivOrMod(LUDivOrMod* ins) {
       if (ins->trapOnError()) {
         Label nonZero;
         masm.ma_b(rhs, rhs, &nonZero, Assembler::NonZero);
-        masm.wasmTrap(wasm::Trap::IntegerDivideByZero, ins->bytecodeOffset());
+        masm.wasmTrap(wasm::Trap::IntegerDivideByZero, ins->trapSiteDesc());
         masm.bind(&nonZero);
       } else {
         // Infinity|0 == 0
@@ -1875,7 +1875,7 @@ void CodeGenerator::visitWasmAddOffset(LWasmAddOffset* lir) {
   Label ok;
   masm.ma_add32TestCarry(Assembler::CarryClear, out, base, Imm32(mir->offset()),
                          &ok);
-  masm.wasmTrap(wasm::Trap::OutOfBounds, mir->bytecodeOffset());
+  masm.wasmTrap(wasm::Trap::OutOfBounds, mir->trapSiteDesc());
   masm.bind(&ok);
 }
 
@@ -1887,7 +1887,7 @@ void CodeGenerator::visitWasmAddOffset64(LWasmAddOffset64* lir) {
   Label ok;
   masm.ma_addPtrTestCarry(Assembler::CarryClear, out.reg, base.reg,
                           ImmWord(mir->offset()), &ok);
-  masm.wasmTrap(wasm::Trap::OutOfBounds, mir->bytecodeOffset());
+  masm.wasmTrap(wasm::Trap::OutOfBounds, mir->trapSiteDesc());
   masm.bind(&ok);
 }
 
diff --git a/js/src/jit/mips-shared/LIR-mips-shared.h b/js/src/jit/mips-shared/LIR-mips-shared.h
index a302be061e..9ca426b00c 100644
--- a/js/src/jit/mips-shared/LIR-mips-shared.h
+++ b/js/src/jit/mips-shared/LIR-mips-shared.h
@@ -192,12 +192,12 @@ class LUDivOrMod : public LBinaryMath<0> {
     return mir_->toDiv()->trapOnError();
   }
 
-  wasm::BytecodeOffset bytecodeOffset() const {
+  wasm::TrapSiteDesc trapSiteDesc() const {
     MOZ_ASSERT(mir_->isDiv() || mir_->isMod());
     if (mir_->isMod()) {
-      return mir_->toMod()->bytecodeOffset();
+      return mir_->toMod()->trapSiteDesc();
     }
-    return mir_->toDiv()->bytecodeOffset();
+    return mir_->toDiv()->trapSiteDesc();
   }
 };
 
diff --git a/js/src/jit/mips32/CodeGenerator-mips32.cpp b/js/src/jit/mips32/CodeGenerator-mips32.cpp
index 9efe8828fa..3fe833ee1b 100644
--- a/js/src/jit/mips32/CodeGenerator-mips32.cpp
+++ b/js/src/jit/mips32/CodeGenerator-mips32.cpp
@@ -81,7 +81,7 @@ void CodeGenerator::visitDivOrModI64(LDivOrModI64* lir) {
   if (lir->canBeDivideByZero()) {
     Label nonZero;
     masm.branchTest64(Assembler::NonZero, rhs, rhs, InvalidReg, &nonZero);
-    masm.wasmTrap(wasm::Trap::IntegerDivideByZero, lir->bytecodeOffset());
+    masm.wasmTrap(wasm::Trap::IntegerDivideByZero, lir->trapSiteDesc());
     masm.bind(&nonZero);
   }
 
@@ -93,7 +93,7 @@ void CodeGenerator::visitDivOrModI64(LDivOrModI64* lir) {
     if (lir->mir()->isMod()) {
       masm.xor64(output, output);
     } else {
-      masm.wasmTrap(wasm::Trap::IntegerOverflow, lir->bytecodeOffset());
+      masm.wasmTrap(wasm::Trap::IntegerOverflow, lir->trapSiteDesc());
     }
     masm.jump(&done);
     masm.bind(&notOverflow);
@@ -107,9 +107,9 @@ void CodeGenerator::visitDivOrModI64(LDivOrModI64* lir) {
 
   MOZ_ASSERT(gen->compilingWasm());
   if (lir->mir()->isMod()) {
-    masm.callWithABI(lir->bytecodeOffset(), wasm::SymbolicAddress::ModI64);
+    masm.callWithABI(lir->trapSiteDesc(), wasm::SymbolicAddress::ModI64);
   } else {
-    masm.callWithABI(lir->bytecodeOffset(), wasm::SymbolicAddress::DivI64);
+    masm.callWithABI(lir->trapSiteDesc(), wasm::SymbolicAddress::DivI64);
   }
   MOZ_ASSERT(ReturnReg64 == output);
 
@@ -126,7 +126,7 @@ void CodeGenerator::visitUDivOrModI64(LUDivOrModI64* lir) {
   if (lir->canBeDivideByZero()) {
     Label nonZero;
     masm.branchTest64(Assembler::NonZero, rhs, rhs, InvalidReg, &nonZero);
-    masm.wasmTrap(wasm::Trap::IntegerDivideByZero, lir->bytecodeOffset());
+    masm.wasmTrap(wasm::Trap::IntegerDivideByZero, lir->trapSiteDesc());
     masm.bind(&nonZero);
   }
 
@@ -138,9 +138,9 @@ void CodeGenerator::visitUDivOrModI64(LUDivOrModI64* lir) {
 
   MOZ_ASSERT(gen->compilingWasm());
   if (lir->mir()->isMod()) {
-    masm.callWithABI(lir->bytecodeOffset(), wasm::SymbolicAddress::UModI64);
+    masm.callWithABI(lir->trapSiteDesc(), wasm::SymbolicAddress::UModI64);
   } else {
-    masm.callWithABI(lir->bytecodeOffset(), wasm::SymbolicAddress::UDivI64);
+    masm.callWithABI(lir->trapSiteDesc(), wasm::SymbolicAddress::UDivI64);
   }
 }
 
@@ -305,10 +305,10 @@ void CodeGenerator::visitWasmTruncateToInt64(LWasmTruncateToInt64* lir) {
     masm.passABIArg(arg, ABIType::Float64);
 
     if (lir->mir()->isUnsigned()) {
-      masm.callWithABI(mir->bytecodeOffset(),
+      masm.callWithABI(mir->trapSiteDesc(),
                        wasm::SymbolicAddress::TruncateDoubleToUint64);
     } else {
-      masm.callWithABI(mir->bytecodeOffset(),
+      masm.callWithABI(mir->trapSiteDesc(),
                        wasm::SymbolicAddress::TruncateDoubleToInt64);
     }
 
@@ -323,10 +323,10 @@ void CodeGenerator::visitWasmTruncateToInt64(LWasmTruncateToInt64* lir) {
     masm.setupWasmABICall();
     masm.passABIArg(arg, ABIType::Float64);
     if (lir->mir()->isUnsigned()) {
-      masm.callWithABI(mir->bytecodeOffset(),
+      masm.callWithABI(mir->trapSiteDesc(),
                        wasm::SymbolicAddress::SaturatingTruncateDoubleToUint64);
     } else {
-      masm.callWithABI(mir->bytecodeOffset(),
+      masm.callWithABI(mir->trapSiteDesc(),
                        wasm::SymbolicAddress::SaturatingTruncateDoubleToInt64);
     }
   }
@@ -347,19 +347,19 @@ void CodeGenerator::visitInt64ToFloatingPoint(LInt64ToFloatingPoint* lir) {
 
   if (lir->mir()->isUnsigned()) {
     if (toType == MIRType::Double) {
-      masm.callWithABI(mir->bytecodeOffset(),
+      masm.callWithABI(mir->trapSiteDesc(),
                        wasm::SymbolicAddress::Uint64ToDouble, ABIType::Float64);
     } else {
-      masm.callWithABI(mir->bytecodeOffset(),
+      masm.callWithABI(mir->trapSiteDesc(),
                        wasm::SymbolicAddress::Uint64ToFloat32,
                        ABIType::Float32);
     }
   } else {
     if (toType == MIRType::Double) {
-      masm.callWithABI(mir->bytecodeOffset(),
+      masm.callWithABI(mir->trapSiteDesc(),
                        wasm::SymbolicAddress::Int64ToDouble, ABIType::Float64);
     } else {
-      masm.callWithABI(mir->bytecodeOffset(),
+      masm.callWithABI(mir->trapSiteDesc(),
                        wasm::SymbolicAddress::Int64ToFloat32, ABIType::Float32);
     }
   }
diff --git a/js/src/jit/mips32/LIR-mips32.h b/js/src/jit/mips32/LIR-mips32.h
index da68ad7464..12ba54ed6e 100644
--- a/js/src/jit/mips32/LIR-mips32.h
+++ b/js/src/jit/mips32/LIR-mips32.h
@@ -88,12 +88,12 @@ class LDivOrModI64
     }
     return mir_->toDiv()->canBeNegativeOverflow();
   }
-  wasm::BytecodeOffset bytecodeOffset() const {
+  wasm::TrapSiteDesc trapSiteDesc() const {
     MOZ_ASSERT(mir_->isDiv() || mir_->isMod());
     if (mir_->isMod()) {
-      return mir_->toMod()->bytecodeOffset();
+      return mir_->toMod()->trapSiteDesc();
     }
-    return mir_->toDiv()->bytecodeOffset();
+    return mir_->toDiv()->trapSiteDesc();
   }
 };
 
@@ -127,12 +127,12 @@ class LUDivOrModI64
     }
     return mir_->toDiv()->canBeNegativeOverflow();
   }
-  wasm::BytecodeOffset bytecodeOffset() const {
+  wasm::TrapSiteDesc trapSiteDesc() const {
     MOZ_ASSERT(mir_->isDiv() || mir_->isMod());
     if (mir_->isMod()) {
-      return mir_->toMod()->bytecodeOffset();
+      return mir_->toMod()->trapSiteDesc();
     }
-    return mir_->toDiv()->bytecodeOffset();
+    return mir_->toDiv()->trapSiteDesc();
   }
 };
 
diff --git a/js/src/jit/mips64/CodeGenerator-mips64.cpp b/js/src/jit/mips64/CodeGenerator-mips64.cpp
index b1afee8181..03363e6fc2 100644
--- a/js/src/jit/mips64/CodeGenerator-mips64.cpp
+++ b/js/src/jit/mips64/CodeGenerator-mips64.cpp
@@ -139,7 +139,7 @@ void CodeGenerator::visitDivOrModI64(LDivOrModI64* lir) {
   if (lir->canBeDivideByZero()) {
     Label nonZero;
     masm.ma_b(rhs, rhs, &nonZero, Assembler::NonZero);
-    masm.wasmTrap(wasm::Trap::IntegerDivideByZero, lir->bytecodeOffset());
+    masm.wasmTrap(wasm::Trap::IntegerDivideByZero, lir->trapSiteDesc());
     masm.bind(&nonZero);
   }
 
@@ -151,7 +151,7 @@ void CodeGenerator::visitDivOrModI64(LDivOrModI64* lir) {
     if (lir->mir()->isMod()) {
       masm.ma_xor(output, output);
     } else {
-      masm.wasmTrap(wasm::Trap::IntegerOverflow, lir->bytecodeOffset());
+      masm.wasmTrap(wasm::Trap::IntegerOverflow, lir->trapSiteDesc());
     }
     masm.jump(&done);
     masm.bind(&notOverflow);
@@ -185,7 +185,7 @@ void CodeGenerator::visitUDivOrModI64(LUDivOrModI64* lir) {
   if (lir->canBeDivideByZero()) {
     Label nonZero;
     masm.ma_b(rhs, rhs, &nonZero, Assembler::NonZero);
-    masm.wasmTrap(wasm::Trap::IntegerDivideByZero, lir->bytecodeOffset());
+    masm.wasmTrap(wasm::Trap::IntegerDivideByZero, lir->trapSiteDesc());
     masm.bind(&nonZero);
   }
 
diff --git a/js/src/jit/mips64/LIR-mips64.h b/js/src/jit/mips64/LIR-mips64.h
index 4d8228418c..176c526106 100644
--- a/js/src/jit/mips64/LIR-mips64.h
+++ b/js/src/jit/mips64/LIR-mips64.h
@@ -72,12 +72,12 @@ class LDivOrModI64 : public LBinaryMath<1> {
     }
     return mir_->toDiv()->canBeNegativeOverflow();
   }
-  wasm::BytecodeOffset bytecodeOffset() const {
+  wasm::TrapSiteDesc trapSiteDesc() const {
     MOZ_ASSERT(mir_->isDiv() || mir_->isMod());
     if (mir_->isMod()) {
-      return mir_->toMod()->bytecodeOffset();
+      return mir_->toMod()->trapSiteDesc();
     }
-    return mir_->toDiv()->bytecodeOffset();
+    return mir_->toDiv()->trapSiteDesc();
   }
 };
 
@@ -108,12 +108,12 @@ class LUDivOrModI64 : public LBinaryMath<1> {
     }
     return mir_->toDiv()->canBeDivideByZero();
   }
-  wasm::BytecodeOffset bytecodeOffset() const {
+  wasm::TrapSiteDesc trapSiteDesc() const {
     MOZ_ASSERT(mir_->isDiv() || mir_->isMod());
     if (mir_->isMod()) {
-      return mir_->toMod()->bytecodeOffset();
+      return mir_->toMod()->trapSiteDesc();
     }
-    return mir_->toDiv()->bytecodeOffset();
+    return mir_->toDiv()->trapSiteDesc();
   }
 };
 
-- 
2.48.1


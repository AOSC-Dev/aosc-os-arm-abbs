From 6ca643db02a382577bdd6368202c96d0cb8fd4d1 Mon Sep 17 00:00:00 2001
From: alwu <alwu@mozilla.com>
Date: Tue, 28 Jan 2025 23:15:30 +0000
Subject: [PATCH 13/22] BACKPORT: Bug 1942404 - part3 : only update changed
 SPS/PPS/VPS nalu for extradata. r=media-playback-reviewers,padenot

When recreating a decoder, the VideoToolbox decoder requires extradata containing SPS, PPS,
and VPS to successfully initialize a DecompressionSession.

The current implementation replaces the extradata when a different SPS is detected but does
not ensure that all three NALUs (SPS, PPS, and VPS) are present in the new extradata. For
example, in `hevc_white_red_frames.mp4`, the initial extradata contains all required NALUs,
but the inband extradata only includes an SPS without the PPS or VPS. Using such incomplete
extradata to recreate the decoder will result in a failure to create the DecompressionSession.

To resolve this, we should update only the differing NALUs to ensure all essential information
is retained in the extradata.

Differential Revision: https://phabricator.services.mozilla.com/D235528
---
 .../platforms/agnostic/bytestreams/H265.cpp   | 65 ++++++++++++++
 .../platforms/agnostic/bytestreams/H265.h     | 15 +++-
 .../platforms/wrappers/MediaChangeMonitor.cpp | 85 ++++++++++++++-----
 3 files changed, 141 insertions(+), 24 deletions(-)

diff --git a/dom/media/platforms/agnostic/bytestreams/H265.cpp b/dom/media/platforms/agnostic/bytestreams/H265.cpp
index b467f24dec5b..be78ff393c16 100644
--- a/dom/media/platforms/agnostic/bytestreams/H265.cpp
+++ b/dom/media/platforms/agnostic/bytestreams/H265.cpp
@@ -199,6 +199,16 @@ bool HVCCConfig::HasSPS() const {
   return hasSPS;
 }
 
+Maybe<H265NALU> HVCCConfig::GetFirstAvaiableNALU(
+    H265NALU::NAL_TYPES aType) const {
+  for (const auto& nalu : mNALUs) {
+    if (nalu.mNalUnitType == aType) {
+      return Some(nalu);
+    }
+  }
+  return Nothing();
+}
+
 /* static */
 Result<H265SPS, nsresult> H265::DecodeSPSFromSPSNALU(const H265NALU& aSPSNALU) {
   MOZ_ASSERT(aSPSNALU.IsSPS());
@@ -1449,6 +1459,61 @@ already_AddRefed<mozilla::MediaByteBuffer> H265::CreateFakeExtraData() {
   return extradata.forget();
 }
 
+/* static */
+already_AddRefed<mozilla::MediaByteBuffer> H265::CreateNewExtraData(
+    const HVCCConfig& aConfig, const Maybe<H265NALU>& aSPS,
+    const Maybe<H265NALU>& aPPS, const Maybe<H265NALU>& aVPS) {
+  // Append essential NALUs if they exist
+  nsTArray<H265NALU> nalus;
+  if (aSPS) {
+    nalus.AppendElement(*aSPS);
+  }
+  if (aPPS) {
+    nalus.AppendElement(*aPPS);
+  }
+  if (aVPS) {
+    nalus.AppendElement(*aVPS);
+  }
+
+  // HEVCDecoderConfigurationRecord (HVCC) is in ISO/IEC 14496-15 8.3.2.1.2
+  auto extradata = MakeRefPtr<mozilla::MediaByteBuffer>();
+  BitWriter writer(extradata);
+  writer.WriteBits(aConfig.configurationVersion, 8);
+  writer.WriteBits(aConfig.general_profile_space, 2);
+  writer.WriteBits(aConfig.general_tier_flag, 1);
+  writer.WriteBits(aConfig.general_profile_idc, 5);
+  writer.WriteU32(aConfig.general_profile_compatibility_flags);
+  writer.WriteBits(aConfig.general_constraint_indicator_flags, 48);
+  writer.WriteU8(aConfig.general_level_idc);
+  writer.WriteBits(0, 4);  // reserved
+  writer.WriteBits(aConfig.min_spatial_segmentation_idc, 12);
+  writer.WriteBits(0, 6);  // reserved
+  writer.WriteBits(aConfig.parallelismType, 2);
+  writer.WriteBits(0, 6);  // reserved
+  writer.WriteBits(aConfig.chroma_format_idc, 2);
+  writer.WriteBits(0, 5);  // reserved
+  writer.WriteBits(aConfig.bit_depth_luma_minus8, 3);
+  writer.WriteBits(0, 5);  // reserved
+  writer.WriteBits(aConfig.bit_depth_chroma_minus8, 3);
+  writer.WriteBits(aConfig.avgFrameRate, 16);
+  writer.WriteBits(aConfig.constantFrameRate, 2);
+  writer.WriteBits(aConfig.numTemporalLayers, 3);
+  writer.WriteBits(aConfig.temporalIdNested, 1);
+  writer.WriteBits(aConfig.lengthSizeMinusOne, 2);
+  writer.WriteU8(nalus.Length());  // numOfArrays
+  for (auto& nalu : nalus) {
+    writer.WriteBits(0, 2);                     // array_completeness + reserved
+    writer.WriteBits(nalu.mNalUnitType, 6);     // NAL_unit_type
+    writer.WriteBits(1, 16);                    // numNalus
+    writer.WriteBits(nalu.mNALU.Length(), 16);  // nalUnitLength
+    MOZ_ASSERT(writer.BitCount() % 8 == 0);
+    extradata->AppendElements(nalu.mNALU.Elements(), nalu.mNALU.Length());
+    writer.AdvanceBytes(nalu.mNALU.Length());
+  }
+  MOZ_ASSERT(HVCCConfig::Parse(extradata).isOk());
+  return extradata.forget();
+}
+
 #undef LOG
 #undef LOGV
 
diff --git a/dom/media/platforms/agnostic/bytestreams/H265.h b/dom/media/platforms/agnostic/bytestreams/H265.h
index 661bc98440f1..ae4bf9e374f1 100644
--- a/dom/media/platforms/agnostic/bytestreams/H265.h
+++ b/dom/media/platforms/agnostic/bytestreams/H265.h
@@ -32,7 +32,9 @@ enum {
   kMaxSubLayers = 7,             // See [v/s]ps_max_sub_layers_minus1
 };
 
-// Spec 7.3.1 NAL unit syntax
+// H265NALU represents NALU data (Spec 7.3.1 NAL unit syntax) for convenient
+// access. In addition, this class does not own the raw RBSP data. Ensure that
+// the original data source remains valid when accessing `mNALU`.
 class H265NALU final {
  public:
   H265NALU(const uint8_t* aData, uint32_t aByteSize);
@@ -281,6 +283,10 @@ struct HVCCConfig final {
   uint32_t NumSPS() const;
   bool HasSPS() const;
 
+  // Returns the first available NALU of the specified type, or nothing if no
+  // such NALU is found.
+  Maybe<H265NALU> GetFirstAvaiableNALU(H265NALU::NAL_TYPES aType) const;
+
   uint8_t configurationVersion;
   uint8_t general_profile_space;
   bool general_tier_flag;
@@ -333,6 +339,13 @@ class H265 final {
   // capabilities of the decoder.
   static already_AddRefed<mozilla::MediaByteBuffer> CreateFakeExtraData();
 
+  // Create new extradata with the essential information from the given
+  // HVCCConfig, excluding its original NALUs. The NALUs will be replaced by the
+  // provided SPS, PPS, and VPS.
+  static already_AddRefed<mozilla::MediaByteBuffer> CreateNewExtraData(
+      const HVCCConfig& aConfig, const Maybe<H265NALU>& aSPS,
+      const Maybe<H265NALU>& aPPS, const Maybe<H265NALU>& aVPS);
+
  private:
   // Return RAW BYTE SEQUENCE PAYLOAD (rbsp) from NAL content.
   static already_AddRefed<mozilla::MediaByteBuffer> DecodeNALUnit(
diff --git a/dom/media/platforms/wrappers/MediaChangeMonitor.cpp b/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
index aa346d6ecb32..a20fb64bc0db 100644
--- a/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
+++ b/dom/media/platforms/wrappers/MediaChangeMonitor.cpp
@@ -205,8 +205,9 @@ class HEVCChangeMonitor : public MediaChangeMonitor::CodecChangeMonitor {
     }
 
     RefPtr<MediaByteBuffer> extraData =
-        aSample->mKeyframe || !mGotSPS ? H265::ExtractHVCCExtraData(aSample)
-                                       : nullptr;
+        aSample->mKeyframe || !mSPS.IsEmpty()
+            ? H265::ExtractHVCCExtraData(aSample)
+            : nullptr;
     // Sample doesn't contain any SPS and we already have SPS, do nothing.
     auto curConfig = HVCCConfig::Parse(mCurrentConfig.mExtraData);
     if ((!extraData || extraData->IsEmpty()) && curConfig.unwrap().HasSPS()) {
@@ -227,7 +228,6 @@ class HEVCChangeMonitor : public MediaChangeMonitor::CodecChangeMonitor {
       return NS_ERROR_NOT_INITIALIZED;
     }
 
-    mGotSPS = true;
     if (H265::CompareExtraData(extraData, mCurrentConfig.mExtraData)) {
       return NS_OK;
     }
@@ -271,32 +271,71 @@ class HEVCChangeMonitor : public MediaChangeMonitor::CodecChangeMonitor {
 
  private:
   void UpdateConfigFromExtraData(MediaByteBuffer* aExtraData) {
-    if (auto rv = H265::DecodeSPSFromHVCCExtraData(aExtraData); rv.isOk()) {
-      const auto sps = rv.unwrap();
-      mCurrentConfig.mImage.width = sps.GetImageSize().Width();
-      mCurrentConfig.mImage.height = sps.GetImageSize().Height();
-      mCurrentConfig.mDisplay.width = sps.GetDisplaySize().Width();
-      mCurrentConfig.mDisplay.height = sps.GetDisplaySize().Height();
-      mCurrentConfig.mColorDepth = sps.ColorDepth();
-      mCurrentConfig.mColorSpace = Some(sps.ColorSpace());
-      mCurrentConfig.mColorPrimaries = gfxUtils::CicpToColorPrimaries(
-          static_cast<gfx::CICP::ColourPrimaries>(sps.ColorPrimaries()),
-          gMediaDecoderLog);
-      mCurrentConfig.mTransferFunction = gfxUtils::CicpToTransferFunction(
-          static_cast<gfx::CICP::TransferCharacteristics>(
-              sps.TransferFunction()));
-      mCurrentConfig.mColorRange = sps.IsFullColorRange()
-                                       ? gfx::ColorRange::FULL
-                                       : gfx::ColorRange::LIMITED;
+    auto rv = HVCCConfig::Parse(aExtraData);
+    MOZ_ASSERT(rv.isOk());
+    const auto hvcc = rv.unwrap();
+
+    // If there are any new SPS/PPS/VPS, update the current stored ones.
+    if (auto nalu = hvcc.GetFirstAvaiableNALU(H265NALU::NAL_TYPES::SPS_NUT)) {
+      mSPS.Clear();
+      mSPS.AppendElements(nalu->mNALU);
+      if (auto rv = H265::DecodeSPSFromSPSNALU(*nalu); rv.isOk()) {
+        const auto sps = rv.unwrap();
+        mCurrentConfig.mImage.width = sps.GetImageSize().Width();
+        mCurrentConfig.mImage.height = sps.GetImageSize().Height();
+        mCurrentConfig.mDisplay.width = sps.GetDisplaySize().Width();
+        mCurrentConfig.mDisplay.height = sps.GetDisplaySize().Height();
+        mCurrentConfig.mColorDepth = sps.ColorDepth();
+        mCurrentConfig.mColorSpace = Some(sps.ColorSpace());
+        mCurrentConfig.mColorPrimaries = gfxUtils::CicpToColorPrimaries(
+            static_cast<gfx::CICP::ColourPrimaries>(sps.ColorPrimaries()),
+            gMediaDecoderLog);
+        mCurrentConfig.mTransferFunction = gfxUtils::CicpToTransferFunction(
+            static_cast<gfx::CICP::TransferCharacteristics>(
+                sps.TransferFunction()));
+        mCurrentConfig.mColorRange = sps.IsFullColorRange()
+                                         ? gfx::ColorRange::FULL
+                                         : gfx::ColorRange::LIMITED;
+      }
     }
-    MOZ_ASSERT(HVCCConfig::Parse(aExtraData).isOk());
-    mCurrentConfig.mExtraData = aExtraData;
+    if (auto nalu = hvcc.GetFirstAvaiableNALU(H265NALU::NAL_TYPES::PPS_NUT)) {
+      mPPS.Clear();
+      mPPS.AppendElements(nalu->mNALU);
+    }
+    if (auto nalu = hvcc.GetFirstAvaiableNALU(H265NALU::NAL_TYPES::VPS_NUT)) {
+      mVPS.Clear();
+      mVPS.AppendElements(nalu->mNALU);
+    }
+
+    // Construct a new extradata. A situation we encountered previously involved
+    // the initial extradata containing all required NALUs, while the inband
+    // extradata included only an SPS without the PPS or VPS. If we replace the
+    // extradata with the inband version alone, we risk losing the VPS and PPS,
+    // leading to decoder initialization failure on macOS. To avoid this, we
+    // should update only the differing NALUs, ensuring all essential
+    // information remains in the extradata.
+    MOZ_ASSERT(!mSPS.IsEmpty());  // SPS is something MUST to have
+    Maybe<H265NALU> sps = Some(H265NALU(mSPS.Elements(), mSPS.Length()));
+    Maybe<H265NALU> pps = !mPPS.IsEmpty()
+                              ? Some(H265NALU(mPPS.Elements(), mPPS.Length()))
+                              : Nothing();
+    Maybe<H265NALU> vps = !mVPS.IsEmpty()
+                              ? Some(H265NALU(mVPS.Elements(), mVPS.Length()))
+                              : Nothing();
+    mCurrentConfig.mExtraData = H265::CreateNewExtraData(hvcc, sps, pps, vps);
     mTrackInfo = new TrackInfoSharedPtr(mCurrentConfig, mStreamID++);
+    LOG("Updated extradata, hasSPS=%d, hasPPS=%d, hasVPS=%d", !!sps, !!pps,
+        !!vps);
   }
 
   VideoInfo mCurrentConfig;
+
+  // Full bytes content for nalu.
+  nsTArray<uint8_t> mSPS;
+  nsTArray<uint8_t> mPPS;
+  nsTArray<uint8_t> mVPS;
+
   uint32_t mStreamID = 0;
-  bool mGotSPS = false;
   RefPtr<TrackInfoSharedPtr> mTrackInfo;
 };
 
-- 
2.48.1


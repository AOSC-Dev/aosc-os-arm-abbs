From 282baf5cc8032beb3cbb9b5565599adfc886dd97 Mon Sep 17 00:00:00 2001
From: Eike Rathke <erack@redhat.com>
Date: Thu, 10 Oct 2024 07:42:28 +0800
Subject: [PATCH 11/18] FEDORA: expat-CVE-2022-25315.patch

Update to 91.7.0

plus patches to bundled expat against CVE-2022-25235 CVE-2022-25236 CVE-2022-25315

Link: https://src.fedoraproject.org/rpms/thunderbird/blob/bb39515b12560f79e7cad8d305131c5acdac5a09/f/expat-CVE-2022-25315.patch
Signed-off-by: Kexy Biscuit <kexybiscuit@aosc.io>
---
 parser/expat/lib/xmlparse.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/parser/expat/lib/xmlparse.c b/parser/expat/lib/xmlparse.c
index fe1501a972..550b2d00b9 100644
--- a/parser/expat/lib/xmlparse.c
+++ b/parser/expat/lib/xmlparse.c
@@ -2491,6 +2491,7 @@ storeRawNames(XML_Parser parser)
   while (tag) {
     int bufSize;
     int nameLen = sizeof(XML_Char) * (tag->name.strLen + 1);
+    size_t rawNameLen;
     char *rawNameBuf = tag->buf + nameLen;
     /* Stop if already stored.  Since tagStack is a stack, we can stop
        at the first entry that has already been copied; everything
@@ -2502,7 +2503,11 @@ storeRawNames(XML_Parser parser)
     /* For re-use purposes we need to ensure that the
        size of tag->buf is a multiple of sizeof(XML_Char).
     */
-    bufSize = nameLen + ROUND_UP(tag->rawNameLength, sizeof(XML_Char));
+    rawNameLen = ROUND_UP(tag->rawNameLength, sizeof(XML_Char));
+    /* Detect and prevent integer overflow. */
+    if (rawNameLen > (size_t)INT_MAX - nameLen)
+      return XML_FALSE;
+    bufSize = nameLen + (int)rawNameLen;
     if (bufSize > tag->bufEnd - tag->buf) {
       char *temp = (char *)REALLOC(tag->buf, bufSize);
       if (temp == NULL)
-- 
2.47.0


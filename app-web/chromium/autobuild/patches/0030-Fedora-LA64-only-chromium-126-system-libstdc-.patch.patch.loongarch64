From c097adb9e172a5c2792606b96fc102ca08a9e2c3 Mon Sep 17 00:00:00 2001
From: Kexy Biscuit <kexybiscuit@aosc.io>
Date: Tue, 6 Aug 2024 22:30:11 +0800
Subject: [PATCH 30/31] [Fedora, LA64 only] chromium-126-system-libstdc++.patch

Co-authored-by: Than Ngo <than@redhat.com>
---
 .../viz/service/display/surface_aggregator.cc |  2 +-
 ...irst_party_sets_handler_database_helper.cc |  1 +
 .../shared_image/shared_image_backing.h       | 38 ++++++------
 .../cpp/bindings/lib/multiplex_router.cc      |  2 +-
 .../auction_config_mojom_traits.cc            |  2 -
 .../renderer/core/loader/history_item.cc      |  8 +--
 .../media_control_timeline_element.cc         |  2 +-
 .../paint/geometry_mapper_transform_cache.cc  |  6 +-
 .../goog_cc/loss_based_bwe_v2.cc              |  2 +-
 ui/gfx/x/generated_protos/randr.cc            | 14 ++---
 ui/gfx/x/generated_protos/xinput.cc           | 58 +++++++++----------
 ui/gfx/x/generated_protos/xkb.cc              | 12 ++--
 12 files changed, 73 insertions(+), 74 deletions(-)

diff --git a/components/viz/service/display/surface_aggregator.cc b/components/viz/service/display/surface_aggregator.cc
index 528b188d1e..28d4ea0946 100644
--- a/components/viz/service/display/surface_aggregator.cc
+++ b/components/viz/service/display/surface_aggregator.cc
@@ -2321,7 +2321,7 @@ AggregatedFrame SurfaceAggregator::Aggregate(
   root_surface_id_ = surface_id;
 
   // Start recording new stats for this aggregation.
-  stats_.emplace();
+  stats_ = AggregateStatistics{};
 
   base::ElapsedTimer prewalk_timer;
   ResolvedFrameData* resolved_frame = GetResolvedFrame(surface_id);
diff --git a/content/browser/first_party_sets/first_party_sets_handler_database_helper.cc b/content/browser/first_party_sets/first_party_sets_handler_database_helper.cc
index 9b7d24f2ad..4c155749f2 100644
--- a/content/browser/first_party_sets/first_party_sets_handler_database_helper.cc
+++ b/content/browser/first_party_sets/first_party_sets_handler_database_helper.cc
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <optional>
 #include "content/browser/first_party_sets/first_party_sets_handler_database_helper.h"
 
 #include "base/containers/contains.h"
diff --git a/gpu/command_buffer/service/shared_image/shared_image_backing.h b/gpu/command_buffer/service/shared_image/shared_image_backing.h
index 7ea4a01b19..a4026e85f4 100644
--- a/gpu/command_buffer/service/shared_image/shared_image_backing.h
+++ b/gpu/command_buffer/service/shared_image/shared_image_backing.h
@@ -112,6 +112,25 @@ using VideoDecodeDevice = Microsoft::WRL::ComPtr<ID3D11Device>;
 using VideoDecodeDevice = void*;
 #endif  // BUILDFLAG(IS_WIN)
 
+class ScopedWriteUMA {
+ public:
+  ScopedWriteUMA() = default;
+
+  ScopedWriteUMA(const ScopedWriteUMA&) = delete;
+  ScopedWriteUMA& operator=(const ScopedWriteUMA&) = delete;
+
+  ~ScopedWriteUMA() {
+    UMA_HISTOGRAM_BOOLEAN("GPU.SharedImage.ContentConsumed",
+                          content_consumed_);
+  }
+
+  bool content_consumed() const { return content_consumed_; }
+  void SetConsumed() { content_consumed_ = true; }
+
+ private:
+  bool content_consumed_ = false;
+};
+
 // Represents the actual storage (GL texture, VkImage, GMB) for a SharedImage.
 // Should not be accessed directly, instead is accessed through a
 // SharedImageRepresentation.
@@ -386,25 +405,6 @@ class GPU_GLES2_EXPORT SharedImageBacking {
   mutable std::optional<base::Lock> lock_;
 
  private:
-  class ScopedWriteUMA {
-   public:
-    ScopedWriteUMA() = default;
-
-    ScopedWriteUMA(const ScopedWriteUMA&) = delete;
-    ScopedWriteUMA& operator=(const ScopedWriteUMA&) = delete;
-
-    ~ScopedWriteUMA() {
-      UMA_HISTOGRAM_BOOLEAN("GPU.SharedImage.ContentConsumed",
-                            content_consumed_);
-    }
-
-    bool content_consumed() const { return content_consumed_; }
-    void SetConsumed() { content_consumed_ = true; }
-
-   private:
-    bool content_consumed_ = false;
-  };
-
   const Mailbox mailbox_;
   const viz::SharedImageFormat format_;
   const gfx::Size size_;
diff --git a/mojo/public/cpp/bindings/lib/multiplex_router.cc b/mojo/public/cpp/bindings/lib/multiplex_router.cc
index 8487e80f4a..e4703f9808 100644
--- a/mojo/public/cpp/bindings/lib/multiplex_router.cc
+++ b/mojo/public/cpp/bindings/lib/multiplex_router.cc
@@ -893,7 +893,7 @@ bool MultiplexRouter::ExclusiveSyncWaitForReply(InterfaceId interface_id,
   DCHECK(!exclusive_sync_wait_);
 
   scoped_refptr<MultiplexRouter> keep_alive(this);
-  exclusive_sync_wait_.emplace();
+  exclusive_sync_wait_ = ExclusiveSyncWaitInfo{};
   exclusive_sync_wait_->interface_id = interface_id;
   exclusive_sync_wait_->request_id = request_id;
   while (!exclusive_sync_wait_->finished) {
diff --git a/third_party/blink/common/interest_group/auction_config_mojom_traits.cc b/third_party/blink/common/interest_group/auction_config_mojom_traits.cc
index 5f29b5decb..8aa2d3fe9b 100644
--- a/third_party/blink/common/interest_group/auction_config_mojom_traits.cc
+++ b/third_party/blink/common/interest_group/auction_config_mojom_traits.cc
@@ -225,8 +225,6 @@ bool StructTraits<blink::mojom::AuctionAdConfigNonSharedParamsDataView,
       !data.ReadAllBuyersPrioritySignals(&out->all_buyers_priority_signals) ||
       !data.ReadAuctionReportBuyerKeys(&out->auction_report_buyer_keys) ||
       !data.ReadAuctionReportBuyers(&out->auction_report_buyers) ||
-      !data.ReadAuctionReportBuyerDebugModeConfig(
-          &out->auction_report_buyer_debug_mode_config) ||
       !data.ReadRequiredSellerCapabilities(
           &out->required_seller_capabilities) ||
       !data.ReadRequestedSize(&out->requested_size) ||
diff --git a/third_party/blink/renderer/core/loader/history_item.cc b/third_party/blink/renderer/core/loader/history_item.cc
index 6442868bb5..9b6205ae16 100644
--- a/third_party/blink/renderer/core/loader/history_item.cc
+++ b/third_party/blink/renderer/core/loader/history_item.cc
@@ -182,26 +182,26 @@ void HistoryItem::SetReferrerPolicy(network::mojom::ReferrerPolicy policy) {
 
 void HistoryItem::SetVisualViewportScrollOffset(const ScrollOffset& offset) {
   if (!view_state_)
-    view_state_ = std::make_optional<ViewState>();
+    view_state_ = blink::HistoryItem::ViewState{};
   view_state_->visual_viewport_scroll_offset_ = offset;
 }
 
 void HistoryItem::SetScrollOffset(const ScrollOffset& offset) {
   if (!view_state_)
-    view_state_ = std::make_optional<ViewState>();
+    view_state_ = blink::HistoryItem::ViewState{};
   view_state_->scroll_offset_ = offset;
 }
 
 void HistoryItem::SetPageScaleFactor(float scale_factor) {
   if (!view_state_)
-    view_state_ = std::make_optional<ViewState>();
+    view_state_ = blink::HistoryItem::ViewState{};
   view_state_->page_scale_factor_ = scale_factor;
 }
 
 void HistoryItem::SetScrollAnchorData(
     const ScrollAnchorData& scroll_anchor_data) {
   if (!view_state_)
-    view_state_ = std::make_optional<ViewState>();
+    view_state_ = blink::HistoryItem::ViewState{};
   view_state_->scroll_anchor_data_ = scroll_anchor_data;
 }
 
diff --git a/third_party/blink/renderer/modules/media_controls/elements/media_control_timeline_element.cc b/third_party/blink/renderer/modules/media_controls/elements/media_control_timeline_element.cc
index 1bd013a6bf..4b9303611f 100644
--- a/third_party/blink/renderer/modules/media_controls/elements/media_control_timeline_element.cc
+++ b/third_party/blink/renderer/modules/media_controls/elements/media_control_timeline_element.cc
@@ -102,7 +102,7 @@ void MediaControlTimelineElement::UpdateAria() {
 void MediaControlTimelineElement::SetPosition(double current_time,
                                               bool suppress_aria) {
   if (is_live_ && !live_anchor_time_ && current_time != 0) {
-    live_anchor_time_.emplace();
+    live_anchor_time_ = LiveAnchorTime{};
     live_anchor_time_->clock_time_ = base::TimeTicks::Now();
     live_anchor_time_->media_time_ = MediaElement().currentTime();
   }
diff --git a/third_party/blink/renderer/platform/graphics/paint/geometry_mapper_transform_cache.cc b/third_party/blink/renderer/platform/graphics/paint/geometry_mapper_transform_cache.cc
index ffb1189655..1b26608a69 100644
--- a/third_party/blink/renderer/platform/graphics/paint/geometry_mapper_transform_cache.cc
+++ b/third_party/blink/renderer/platform/graphics/paint/geometry_mapper_transform_cache.cc
@@ -70,7 +70,7 @@ void GeometryMapperTransformCache::Update(
     to_2d_translation_root_ += translation;
 
     if (parent.plane_root_transform_) {
-      plane_root_transform_.emplace();
+      plane_root_transform_ = PlaneRootTransform{};
       plane_root_transform_->plane_root = parent.plane_root();
       plane_root_transform_->to_plane_root = parent.to_plane_root();
       plane_root_transform_->to_plane_root.Translate(translation.x(),
@@ -98,7 +98,7 @@ void GeometryMapperTransformCache::Update(
       // as the 2d translation root.
       plane_root_transform_ = std::nullopt;
     } else {
-      plane_root_transform_.emplace();
+      plane_root_transform_ = PlaneRootTransform{};
       plane_root_transform_->plane_root = parent.plane_root();
       plane_root_transform_->to_plane_root.MakeIdentity();
       parent.ApplyToPlaneRoot(plane_root_transform_->to_plane_root);
@@ -140,7 +140,7 @@ void GeometryMapperTransformCache::UpdateScreenTransform(
   parent_node->UpdateScreenTransform();
   const auto& parent = parent_node->GetTransformCache();
 
-  screen_transform_.emplace();
+  screen_transform_ = ScreenTransform{};
   parent.ApplyToScreen(screen_transform_->to_screen);
   if (node.FlattensInheritedTransform())
     screen_transform_->to_screen.Flatten();
diff --git a/third_party/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc b/third_party/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc
index 7deeb7ad64..a0e3e0c6ac 100644
--- a/third_party/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc
+++ b/third_party/webrtc/modules/congestion_controller/goog_cc/loss_based_bwe_v2.cc
@@ -549,7 +549,7 @@ absl::optional<LossBasedBweV2::Config> LossBasedBweV2::CreateConfig(
   if (!enabled.Get()) {
     return config;
   }
-  config.emplace();
+  config = Config{};
   config->bandwidth_rampup_upper_bound_factor =
       bandwidth_rampup_upper_bound_factor.Get();
   config->bandwidth_rampup_upper_bound_factor_in_hold =
diff --git a/ui/gfx/x/generated_protos/randr.cc b/ui/gfx/x/generated_protos/randr.cc
index 9cf87632ea..bcfcd7707b 100644
--- a/ui/gfx/x/generated_protos/randr.cc
+++ b/ui/gfx/x/generated_protos/randr.cc
@@ -305,7 +305,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
   // data
   auto data_expr = subCode;
   if (CaseEq(data_expr, RandR::Notify::CrtcChange)) {
-    data.cc.emplace();
+    data.cc = RandR::NotifyEvent::Cc{};
     auto& timestamp = (*data.cc).timestamp;
     auto& window = (*data.cc).window;
     auto& crtc = (*data.cc).crtc;
@@ -349,7 +349,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Read(&height, &buf);
   }
   if (CaseEq(data_expr, RandR::Notify::OutputChange)) {
-    data.oc.emplace();
+    data.oc = RandR::NotifyEvent::Oc{};
     auto& timestamp = (*data.oc).timestamp;
     auto& config_timestamp = (*data.oc).config_timestamp;
     auto& window = (*data.oc).window;
@@ -394,7 +394,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     subpixel_order = static_cast<Render::SubPixel>(tmp6);
   }
   if (CaseEq(data_expr, RandR::Notify::OutputProperty)) {
-    data.op.emplace();
+    data.op = RandR::NotifyEvent::Op{};
     auto& window = (*data.op).window;
     auto& output = (*data.op).output;
     auto& atom = (*data.op).atom;
@@ -422,7 +422,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Pad(&buf, 11);
   }
   if (CaseEq(data_expr, RandR::Notify::ProviderChange)) {
-    data.pc.emplace();
+    data.pc = RandR::NotifyEvent::Pc{};
     auto& timestamp = (*data.pc).timestamp;
     auto& window = (*data.pc).window;
     auto& provider = (*data.pc).provider;
@@ -440,7 +440,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Pad(&buf, 16);
   }
   if (CaseEq(data_expr, RandR::Notify::ProviderProperty)) {
-    data.pp.emplace();
+    data.pp = RandR::NotifyEvent::Pp{};
     auto& window = (*data.pp).window;
     auto& provider = (*data.pp).provider;
     auto& atom = (*data.pp).atom;
@@ -466,7 +466,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Pad(&buf, 11);
   }
   if (CaseEq(data_expr, RandR::Notify::ResourceChange)) {
-    data.rc.emplace();
+    data.rc = RandR::NotifyEvent::Rc{};
     auto& timestamp = (*data.rc).timestamp;
     auto& window = (*data.rc).window;
 
@@ -480,7 +480,7 @@ void ReadEvent<RandR::NotifyEvent>(RandR::NotifyEvent* event_,
     Pad(&buf, 20);
   }
   if (CaseEq(data_expr, RandR::Notify::Lease)) {
-    data.lc.emplace();
+    data.lc = RandR::NotifyEvent::Lc{};
     auto& timestamp = (*data.lc).timestamp;
     auto& window = (*data.lc).window;
     auto& lease = (*data.lc).lease;
diff --git a/ui/gfx/x/generated_protos/xinput.cc b/ui/gfx/x/generated_protos/xinput.cc
index 3f63d1efe6..720a190f43 100644
--- a/ui/gfx/x/generated_protos/xinput.cc
+++ b/ui/gfx/x/generated_protos/xinput.cc
@@ -560,7 +560,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
       // data
       auto data_expr = type;
       if (CaseEq(data_expr, Input::DeviceClassType::Key)) {
-        data.key.emplace();
+        data.key = Input::DeviceClass::Key{};
         uint16_t num_keys{};
         auto& keys = (*data.key).keys;
 
@@ -575,7 +575,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Button)) {
-        data.button.emplace();
+        data.button = Input::DeviceClass::Button{};
         uint16_t num_buttons{};
         auto& state = (*data.button).state;
         auto& labels = (*data.button).labels;
@@ -598,7 +598,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Valuator)) {
-        data.valuator.emplace();
+        data.valuator = Input::DeviceClass::Valuator{};
         auto& number = (*data.valuator).number;
         auto& label = (*data.valuator).label;
         auto& min = (*data.valuator).min;
@@ -661,7 +661,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         Pad(&buf, 3);
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Scroll)) {
-        data.scroll.emplace();
+        data.scroll = Input::DeviceClass::Scroll{};
         auto& number = (*data.scroll).number;
         auto& scroll_type = (*data.scroll).scroll_type;
         auto& flags = (*data.scroll).flags;
@@ -696,7 +696,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         }
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Touch)) {
-        data.touch.emplace();
+        data.touch = Input::DeviceClass::Touch{};
         auto& mode = (*data.touch).mode;
         auto& num_touches = (*data.touch).num_touches;
 
@@ -709,7 +709,7 @@ void ReadEvent<Input::DeviceChangedEvent>(Input::DeviceChangedEvent* event_,
         Read(&num_touches, &buf);
       }
       if (CaseEq(data_expr, Input::DeviceClassType::Gesture)) {
-        data.gesture.emplace();
+        data.gesture = Input::DeviceClass::Gesture{};
         auto& num_touches = (*data.gesture).num_touches;
 
         // num_touches
@@ -2187,7 +2187,7 @@ std::unique_ptr<Input::ListInputDevicesReply> detail::ReadReply<
       // info
       auto info_expr = class_id;
       if (CaseEq(info_expr, Input::InputClass::Key)) {
-        info.key.emplace();
+        info.key = Input::InputInfo::Key{};
         auto& min_keycode = (*info.key).min_keycode;
         auto& max_keycode = (*info.key).max_keycode;
         auto& num_keys = (*info.key).num_keys;
@@ -2205,14 +2205,14 @@ std::unique_ptr<Input::ListInputDevicesReply> detail::ReadReply<
         Pad(&buf, 2);
       }
       if (CaseEq(info_expr, Input::InputClass::Button)) {
-        info.button.emplace();
+        info.button = Input::InputInfo::Button{};
         auto& num_buttons = (*info.button).num_buttons;
 
         // num_buttons
         Read(&num_buttons, &buf);
       }
       if (CaseEq(info_expr, Input::InputClass::Valuator)) {
-        info.valuator.emplace();
+        info.valuator = Input::InputInfo::Valuator{};
         uint8_t axes_len{};
         auto& mode = (*info.valuator).mode;
         auto& motion_size = (*info.valuator).motion_size;
@@ -3818,7 +3818,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
       // data
       auto data_expr = class_id;
       if (CaseEq(data_expr, Input::FeedbackClass::Keyboard)) {
-        data.keyboard.emplace();
+        data.keyboard = x11::Input::FeedbackState::Keyboard{};
         auto& pitch = (*data.keyboard).pitch;
         auto& duration = (*data.keyboard).duration;
         auto& led_mask = (*data.keyboard).led_mask;
@@ -3859,7 +3859,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         }
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Pointer)) {
-        data.pointer.emplace();
+        data.pointer = x11::Input::FeedbackState::Pointer{};
         auto& accel_num = (*data.pointer).accel_num;
         auto& accel_denom = (*data.pointer).accel_denom;
         auto& threshold = (*data.pointer).threshold;
@@ -3877,7 +3877,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         Read(&threshold, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::String)) {
-        data.string.emplace();
+        data.string = x11::Input::FeedbackState::String{};
         auto& max_symbols = (*data.string).max_symbols;
         uint16_t num_keysyms{};
         auto& keysyms = (*data.string).keysyms;
@@ -3896,7 +3896,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         }
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Integer)) {
-        data.integer.emplace();
+        data.integer = x11::Input::FeedbackState::Integer{};
         auto& resolution = (*data.integer).resolution;
         auto& min_value = (*data.integer).min_value;
         auto& max_value = (*data.integer).max_value;
@@ -3911,7 +3911,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         Read(&max_value, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Led)) {
-        data.led.emplace();
+        data.led = x11::Input::FeedbackState::Led{};
         auto& led_mask = (*data.led).led_mask;
         auto& led_values = (*data.led).led_values;
 
@@ -3922,7 +3922,7 @@ std::unique_ptr<Input::GetFeedbackControlReply> detail::ReadReply<
         Read(&led_values, &buf);
       }
       if (CaseEq(data_expr, Input::FeedbackClass::Bell)) {
-        data.bell.emplace();
+        data.bell = x11::Input::FeedbackState::Bell{};
         auto& percent = (*data.bell).percent;
         auto& pitch = (*data.bell).pitch;
         auto& duration = (*data.bell).duration;
@@ -4735,7 +4735,7 @@ std::unique_ptr<Input::QueryDeviceStateReply> detail::ReadReply<
       // data
       auto data_expr = class_id;
       if (CaseEq(data_expr, Input::InputClass::Key)) {
-        data.key.emplace();
+        data.key = x11::Input::InputState::Key{};
         auto& num_keys = (*data.key).num_keys;
         auto& keys = (*data.key).keys;
 
@@ -4752,7 +4752,7 @@ std::unique_ptr<Input::QueryDeviceStateReply> detail::ReadReply<
         }
       }
       if (CaseEq(data_expr, Input::InputClass::Button)) {
-        data.button.emplace();
+        data.button = x11::Input::InputState::Button{};
         auto& num_buttons = (*data.button).num_buttons;
         auto& buttons = (*data.button).buttons;
 
@@ -4769,7 +4769,7 @@ std::unique_ptr<Input::QueryDeviceStateReply> detail::ReadReply<
         }
       }
       if (CaseEq(data_expr, Input::InputClass::Valuator)) {
-        data.valuator.emplace();
+        data.valuator = x11::Input::InputState::Valuator{};
         uint8_t num_valuators{};
         auto& mode = (*data.valuator).mode;
         auto& valuators = (*data.valuator).valuators;
@@ -5039,7 +5039,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
     // data
     auto data_expr = control_id;
     if (CaseEq(data_expr, Input::DeviceControl::resolution)) {
-      data.resolution.emplace();
+      data.resolution = x11::Input::DeviceState::Resolution{};
       uint32_t num_valuators{};
       auto& resolution_values = (*data.resolution).resolution_values;
       auto& resolution_min = (*data.resolution).resolution_min;
@@ -5070,7 +5070,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
       }
     }
     if (CaseEq(data_expr, Input::DeviceControl::abs_calib)) {
-      data.abs_calib.emplace();
+      data.abs_calib = x11::Input::DeviceState::AbsCalib{};
       auto& min_x = (*data.abs_calib).min_x;
       auto& max_x = (*data.abs_calib).max_x;
       auto& min_y = (*data.abs_calib).min_y;
@@ -5105,7 +5105,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
       Read(&button_threshold, &buf);
     }
     if (CaseEq(data_expr, Input::DeviceControl::core)) {
-      data.core.emplace();
+      data.core = x11::Input::DeviceState::Core{};
       auto& status = (*data.core).status;
       auto& iscore = (*data.core).iscore;
 
@@ -5119,7 +5119,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
       Pad(&buf, 2);
     }
     if (CaseEq(data_expr, Input::DeviceControl::enable)) {
-      data.enable.emplace();
+      data.enable = x11::Input::DeviceState::Enable{};
       auto& enable = (*data.enable).enable;
 
       // enable
@@ -5129,7 +5129,7 @@ std::unique_ptr<Input::GetDeviceControlReply> detail::ReadReply<
       Pad(&buf, 3);
     }
     if (CaseEq(data_expr, Input::DeviceControl::abs_area)) {
-      data.abs_area.emplace();
+      data.abs_area = x11::Input::DeviceState::AbsArea{};
       auto& offset_x = (*data.abs_area).offset_x;
       auto& offset_y = (*data.abs_area).offset_y;
       auto& width = (*data.abs_area).width;
@@ -6610,7 +6610,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
           // data
           auto data_expr = type;
           if (CaseEq(data_expr, Input::DeviceClassType::Key)) {
-            data.key.emplace();
+            data.key = Input::DeviceClass::Key{};
             uint16_t num_keys{};
             auto& keys = (*data.key).keys;
 
@@ -6625,7 +6625,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Button)) {
-            data.button.emplace();
+            data.button = Input::DeviceClass::Button{};
             uint16_t num_buttons{};
             auto& state = (*data.button).state;
             auto& labels = (*data.button).labels;
@@ -6648,7 +6648,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Valuator)) {
-            data.valuator.emplace();
+            data.valuator = Input::DeviceClass::Valuator{};
             auto& number = (*data.valuator).number;
             auto& label = (*data.valuator).label;
             auto& min = (*data.valuator).min;
@@ -6711,7 +6711,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             Pad(&buf, 3);
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Scroll)) {
-            data.scroll.emplace();
+            data.scroll = Input::DeviceClass::Scroll{};
             auto& number = (*data.scroll).number;
             auto& scroll_type = (*data.scroll).scroll_type;
             auto& flags = (*data.scroll).flags;
@@ -6746,7 +6746,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             }
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Touch)) {
-            data.touch.emplace();
+            data.touch = Input::DeviceClass::Touch{};
             auto& mode = (*data.touch).mode;
             auto& num_touches = (*data.touch).num_touches;
 
@@ -6759,7 +6759,7 @@ std::unique_ptr<Input::XIQueryDeviceReply> detail::ReadReply<
             Read(&num_touches, &buf);
           }
           if (CaseEq(data_expr, Input::DeviceClassType::Gesture)) {
-            data.gesture.emplace();
+            data.gesture = Input::DeviceClass::Gesture{};
             auto& num_touches = (*data.gesture).num_touches;
 
             // num_touches
diff --git a/ui/gfx/x/generated_protos/xkb.cc b/ui/gfx/x/generated_protos/xkb.cc
index 0fd5c939f8..a1f57c3290 100644
--- a/ui/gfx/x/generated_protos/xkb.cc
+++ b/ui/gfx/x/generated_protos/xkb.cc
@@ -2344,7 +2344,7 @@ std::unique_ptr<Xkb::GetMapReply> detail::ReadReply<Xkb::GetMapReply>(
   // map
   auto map_expr = present;
   if (CaseAnd(map_expr, Xkb::MapPart::KeyTypes)) {
-    map.types_rtrn.emplace();
+    map.types_rtrn = std::vector<Xkb::KeyType>{};
     auto& types_rtrn = *map.types_rtrn;
 
     // types_rtrn
@@ -5207,7 +5207,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
   if (CaseAnd(replies_expr, Xkb::GBNDetail::Types) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::ClientSymbols) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::ServerSymbols)) {
-    replies.types.emplace();
+    replies.types = Xkb::GetKbdByNameReply::Types{};
     auto& getmap_type = (*replies.types).getmap_type;
     auto& typeDeviceID = (*replies.types).typeDeviceID;
     auto& getmap_sequence = (*replies.types).getmap_sequence;
@@ -5626,7 +5626,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::CompatMap)) {
-    replies.compat_map.emplace();
+    replies.compat_map = Xkb::GetKbdByNameReply::CompatMap{};
     auto& compatmap_type = (*replies.compat_map).compatmap_type;
     auto& compatDeviceID = (*replies.compat_map).compatDeviceID;
     auto& compatmap_sequence = (*replies.compat_map).compatmap_sequence;
@@ -5747,7 +5747,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::IndicatorMaps)) {
-    replies.indicator_maps.emplace();
+    replies.indicator_maps = Xkb::GetKbdByNameReply::IndicatorMaps{};
     auto& indicatormap_type = (*replies.indicator_maps).indicatormap_type;
     auto& indicatorDeviceID = (*replies.indicator_maps).indicatorDeviceID;
     auto& indicatormap_sequence =
@@ -5840,7 +5840,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::KeyNames) ||
       CaseAnd(replies_expr, Xkb::GBNDetail::OtherNames)) {
-    replies.key_names.emplace();
+    replies.key_names = Xkb::GetKbdByNameReply::KeyNames{};
     auto& keyname_type = (*replies.key_names).keyname_type;
     auto& keyDeviceID = (*replies.key_names).keyDeviceID;
     auto& keyname_sequence = (*replies.key_names).keyname_sequence;
@@ -6087,7 +6087,7 @@ std::unique_ptr<Xkb::GetKbdByNameReply> detail::ReadReply<
     }
   }
   if (CaseAnd(replies_expr, Xkb::GBNDetail::Geometry)) {
-    replies.geometry.emplace();
+    replies.geometry = Xkb::GetKbdByNameReply::Geometry{};
     auto& geometry_type = (*replies.geometry).geometry_type;
     auto& geometryDeviceID = (*replies.geometry).geometryDeviceID;
     auto& geometry_sequence = (*replies.geometry).geometry_sequence;
-- 
2.46.0


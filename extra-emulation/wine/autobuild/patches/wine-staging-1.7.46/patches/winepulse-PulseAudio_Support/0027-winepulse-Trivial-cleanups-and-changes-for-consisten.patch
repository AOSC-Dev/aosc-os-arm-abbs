From b7e889389b27ee3074e74a72ff3be9c3e4b6d77a Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 5 Jan 2015 11:31:56 +0100
Subject: winepulse: Trivial cleanups and changes for consistency with other
 drivers

Removes some C++ comments, the FIXME's and fixes indent some.
---
 dlls/winepulse.drv/mmdevdrv.c | 86 +++++++++++++++++--------------------------
 1 file changed, 33 insertions(+), 53 deletions(-)

diff --git a/dlls/winepulse.drv/mmdevdrv.c b/dlls/winepulse.drv/mmdevdrv.c
index e755e8a..62d040a 100644
--- a/dlls/winepulse.drv/mmdevdrv.c
+++ b/dlls/winepulse.drv/mmdevdrv.c
@@ -16,8 +16,6 @@
  * You should have received a copy of the GNU Lesser General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
- *
- * Pulseaudio driver support.. hell froze over
  */
 
 #define NONAMELESSUNION
@@ -62,7 +60,14 @@
 #define NULL_PTR_ERR MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, RPC_X_NULL_REF_POINTER)
 
 WINE_DEFAULT_DEBUG_CHANNEL(pulse);
-WINE_DECLARE_DEBUG_CHANNEL(winediag);
+
+/* From <dlls/mmdevapi/mmdevapi.h> */
+enum DriverPriority {
+    Priority_Unavailable = 0,
+    Priority_Low,
+    Priority_Neutral,
+    Priority_Preferred
+};
 
 static const REFERENCE_TIME MinimumPeriod = 30000;
 static const REFERENCE_TIME DefaultPeriod = 100000;
@@ -90,8 +95,6 @@ static GUID pulse_render_guid =
 static GUID pulse_capture_guid =
 { 0x25da76d0, 0x033c, 0x4235, { 0x90, 0x02, 0x19, 0xf4, 0x88, 0x94, 0xac, 0x6f } };
 
-static HANDLE warn_once;
-
 BOOL WINAPI DllMain(HINSTANCE dll, DWORD reason, void *reserved)
 {
     if (reason == DLL_PROCESS_ATTACH) {
@@ -122,8 +125,6 @@ BOOL WINAPI DllMain(HINSTANCE dll, DWORD reason, void *reserved)
             pa_mainloop_quit(pulse_ml, 0);
         if (pulse_thread)
             CloseHandle(pulse_thread);
-        if (warn_once)
-            CloseHandle(warn_once);
     }
     return TRUE;
 }
@@ -507,6 +508,11 @@ static HRESULT pulse_stream_valid(ACImpl *This) {
     return S_OK;
 }
 
+static void silence_buffer(pa_sample_format_t format, BYTE *buffer, UINT32 bytes)
+{
+    memset(buffer, format == PA_SAMPLE_U8 ? 0x80 : 0, bytes);
+}
+
 static void dump_attr(const pa_buffer_attr *attr) {
     TRACE("maxlength: %u\n", attr->maxlength);
     TRACE("minreq: %u\n", attr->minreq);
@@ -784,14 +790,10 @@ HRESULT WINAPI AUDDRV_GetEndpointIDs(EDataFlow flow, const WCHAR ***ids, GUID **
 int WINAPI AUDDRV_GetPriority(void)
 {
     HRESULT hr;
-    if (getenv("WINENOPULSE")) {
-        FIXME_(winediag)("winepulse has been temporarily disabled through the environment\n");
-        return 0;
-    }
     pthread_mutex_lock(&pulse_lock);
     hr = pulse_connect();
     pthread_mutex_unlock(&pulse_lock);
-    return SUCCEEDED(hr) ? 3 : 0;
+    return SUCCEEDED(hr) ? Priority_Preferred : Priority_Unavailable;
 }
 
 HRESULT WINAPI AUDDRV_GetAudioEndpoint(GUID *guid, IMMDevice *dev, IAudioClient **out)
@@ -801,17 +803,6 @@ HRESULT WINAPI AUDDRV_GetAudioEndpoint(GUID *guid, IMMDevice *dev, IAudioClient
     int i;
     EDataFlow dataflow;
 
-    /* Give one visible warning per session
-     * Sadly wine has chosen not to accept the winepulse patch, so support ourselves
-     */
-    if (!warn_once && (warn_once = CreateEventA(0, 0, 0, "__winepulse_warn_event")) && GetLastError() != ERROR_ALREADY_EXISTS) {
-        FIXME_(winediag)("Winepulse is not officially supported by the wine project\n");
-        FIXME_(winediag)("For sound related feedback and support, please visit http://ubuntuforums.org/showthread.php?t=1960599\n");
-    } else {
-        WARN_(winediag)("Winepulse is not officially supported by the wine project\n");
-        WARN_(winediag)("For sound related feedback and support, please visit http://ubuntuforums.org/showthread.php?t=1960599\n");
-    }
-
     TRACE("%s %p %p\n", debugstr_guid(guid), dev, out);
     if (IsEqualGUID(guid, &pulse_render_guid))
         dataflow = eRender;
@@ -1165,22 +1156,22 @@ static HRESULT pulse_spec_from_waveformat(ACImpl *This, const WAVEFORMATEX *fmt)
         }
         break;
         }
-        case WAVE_FORMAT_ALAW:
-        case WAVE_FORMAT_MULAW:
-            if (fmt->wBitsPerSample != 8) {
-                FIXME("Unsupported bpp %u for LAW\n", fmt->wBitsPerSample);
-                return AUDCLNT_E_UNSUPPORTED_FORMAT;
-            }
-            if (fmt->nChannels != 1 && fmt->nChannels != 2) {
-                FIXME("Unsupported channels %u for LAW\n", fmt->nChannels);
-                return AUDCLNT_E_UNSUPPORTED_FORMAT;
-            }
-            This->ss.format = fmt->wFormatTag == WAVE_FORMAT_MULAW ? PA_SAMPLE_ULAW : PA_SAMPLE_ALAW;
-            pa_channel_map_init_auto(&This->map, fmt->nChannels, PA_CHANNEL_MAP_ALSA);
-            break;
-        default:
-            WARN("Unhandled tag %x\n", fmt->wFormatTag);
+    case WAVE_FORMAT_ALAW:
+    case WAVE_FORMAT_MULAW:
+        if (fmt->wBitsPerSample != 8) {
+            FIXME("Unsupported bpp %u for LAW\n", fmt->wBitsPerSample);
+            return AUDCLNT_E_UNSUPPORTED_FORMAT;
+        }
+        if (fmt->nChannels != 1 && fmt->nChannels != 2) {
+            FIXME("Unsupported channels %u for LAW\n", fmt->nChannels);
             return AUDCLNT_E_UNSUPPORTED_FORMAT;
+        }
+        This->ss.format = fmt->wFormatTag == WAVE_FORMAT_MULAW ? PA_SAMPLE_ULAW : PA_SAMPLE_ALAW;
+        pa_channel_map_init_auto(&This->map, fmt->nChannels, PA_CHANNEL_MAP_ALSA);
+        break;
+    default:
+        WARN("Unhandled tag %x\n", fmt->wFormatTag);
+        return AUDCLNT_E_UNSUPPORTED_FORMAT;
     }
     This->ss.channels = This->map.channels;
     if (!pa_channel_map_valid(&This->map) || This->ss.format == PA_SAMPLE_INVALID) {
@@ -1287,7 +1278,7 @@ static HRESULT WINAPI AudioClient_Initialize(IAudioClient *iface,
         else {
             ACPacket *cur_packet = (ACPacket*)((char*)This->tmp_buffer + This->bufsize_bytes);
             BYTE *data = This->tmp_buffer;
-            memset(This->tmp_buffer, This->ss.format == PA_SAMPLE_U8 ? 0x80 : 0, This->bufsize_bytes);
+            silence_buffer(This->ss.format, This->tmp_buffer, This->bufsize_bytes);
             list_init(&This->packet_free_head);
             list_init(&This->packet_filled_head);
             for (i = 0; i < capture_packets; ++i, ++cur_packet) {
@@ -1939,7 +1930,6 @@ static HRESULT WINAPI AudioRenderClient_ReleaseBuffer(
 {
     ACImpl *This = impl_from_IAudioRenderClient(iface);
     UINT32 written_bytes = written_frames * pa_frame_size(&This->ss);
-//    UINT32 period;
 
     TRACE("(%p)->(%u, %x)\n", This, written_frames, flags);
 
@@ -1958,12 +1948,8 @@ static HRESULT WINAPI AudioRenderClient_ReleaseBuffer(
         return AUDCLNT_E_INVALID_SIZE;
     }
 
-    if (flags & AUDCLNT_BUFFERFLAGS_SILENT) {
-        if (This->ss.format == PA_SAMPLE_U8)
-            memset(This->tmp_buffer, 128, written_bytes);
-        else
-            memset(This->tmp_buffer, 0, written_bytes);
-    }
+    if (flags & AUDCLNT_BUFFERFLAGS_SILENT)
+        silence_buffer(This->ss.format, This->tmp_buffer, written_bytes);
 
     This->locked = 0;
     if (This->locked_ptr)
@@ -1975,10 +1961,6 @@ static HRESULT WINAPI AudioRenderClient_ReleaseBuffer(
     TRACE("Released %u, pad %zu\n", written_frames, This->pad / pa_frame_size(&This->ss));
     assert(This->pad <= This->bufsize_bytes);
 
-//    period = pa_stream_get_buffer_attr(This->stream)->minreq;
-    /* Require a minimum of 3 periods filled, if possible */
-//    if (This->event && This->pad + period <= This->bufsize_bytes && This->pad < period * 3)
-//        SetEvent(This->event);
     pthread_mutex_unlock(&pulse_lock);
     return S_OK;
 }
@@ -2107,7 +2089,6 @@ static HRESULT WINAPI AudioCaptureClient_GetNextPacketSize(
         IAudioCaptureClient *iface, UINT32 *frames)
 {
     ACImpl *This = impl_from_IAudioCaptureClient(iface);
-    ACPacket *p;
 
     TRACE("(%p)->(%p)\n", This, frames);
     if (!frames)
@@ -2115,8 +2096,7 @@ static HRESULT WINAPI AudioCaptureClient_GetNextPacketSize(
 
     pthread_mutex_lock(&pulse_lock);
     ACImpl_GetCapturePad(This, NULL);
-    p = This->locked_ptr;
-    if (p)
+    if (This->locked_ptr)
         *frames = This->capture_period / pa_frame_size(&This->ss);
     else
         *frames = 0;
-- 
2.2.1


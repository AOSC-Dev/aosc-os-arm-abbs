From daa8631528ad331f094c148a6267b135d101d066 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 5 Jan 2015 11:31:56 +0100
Subject: winepulse: Remove volume support

This was disabled by default, and a quick Google turned up no references
to anyone being told to set it. If no one's using it, let's just remove
it.
---
 dlls/winepulse.drv/mmdevdrv.c | 90 +++----------------------------------------
 1 file changed, 6 insertions(+), 84 deletions(-)

diff --git a/dlls/winepulse.drv/mmdevdrv.c b/dlls/winepulse.drv/mmdevdrv.c
index ba38ab9..063b1db 100644
--- a/dlls/winepulse.drv/mmdevdrv.c
+++ b/dlls/winepulse.drv/mmdevdrv.c
@@ -84,12 +84,6 @@ static struct list g_sessions = LIST_INIT(g_sessions);
 static WAVEFORMATEXTENSIBLE pulse_fmt[2];
 static REFERENCE_TIME pulse_min_period[2], pulse_def_period[2];
 
-static DWORD pulse_stream_volume;
-
-const WCHAR pulse_keyW[] = {'S','o','f','t','w','a','r','e','\\',
-    'W','i','n','e','\\','P','u','l','s','e',0};
-const WCHAR pulse_streamW[] = { 'S','t','r','e','a','m','V','o','l',0 };
-
 static GUID pulse_render_guid =
 { 0xfd47d9cc, 0x4218, 0x4135, { 0x9c, 0xe2, 0x0c, 0x19, 0x5c, 0x87, 0x40, 0x5b } };
 static GUID pulse_capture_guid =
@@ -98,15 +92,8 @@ static GUID pulse_capture_guid =
 BOOL WINAPI DllMain(HINSTANCE dll, DWORD reason, void *reserved)
 {
     if (reason == DLL_PROCESS_ATTACH) {
-        HKEY key;
         pthread_mutexattr_t attr;
 
-        if (RegOpenKeyW(HKEY_CURRENT_USER, pulse_keyW, &key) == ERROR_SUCCESS) {
-            DWORD size = sizeof(pulse_stream_volume);
-            RegQueryValueExW(key, pulse_streamW, 0, NULL,
-                             (BYTE*)&pulse_stream_volume, &size);
-            RegCloseKey(key);
-        }
         DisableThreadLibraryCalls(dll);
 
         pthread_mutexattr_init(&attr);
@@ -527,12 +514,6 @@ static void pulse_op_cb(pa_stream *s, int success, void *user) {
     pthread_cond_signal(&pulse_cond);
 }
 
-static void pulse_ctx_op_cb(pa_context *c, int success, void *user) {
-    TRACE("Success: %i\n", success);
-    *(int*)user = success;
-    pthread_cond_signal(&pulse_cond);
-}
-
 static void pulse_attr_update(pa_stream *s, void *user) {
     const pa_buffer_attr *attr = pa_stream_get_buffer_attr(s);
     TRACE("New attributes or device moved:\n");
@@ -2329,36 +2310,12 @@ struct pulse_info_cb_data {
     float *levels;
 };
 
-static void pulse_sink_input_info_cb(pa_context *c, const pa_sink_input_info *info, int eol, void *data)
-{
-    struct pulse_info_cb_data *d = data;
-    int i;
-    if (eol)
-        return;
-    for (i = 0; i < d->n; ++i)
-        d->levels[i] = (float)info->volume.values[i] / (float)PA_VOLUME_NORM;
-    pthread_cond_signal(&pulse_cond);
-}
-
-static void pulse_source_info_cb(pa_context *c, const pa_source_info *info, int eol, void *data)
-{
-    struct pulse_info_cb_data *d = data;
-    int i;
-    if (eol)
-        return;
-    for (i = 0; i < d->n; ++i)
-        d->levels[i] = (float)info->volume.values[i] / (float)PA_VOLUME_NORM;
-    pthread_cond_signal(&pulse_cond);
-}
-
 static HRESULT WINAPI AudioStreamVolume_SetAllVolumes(
         IAudioStreamVolume *iface, UINT32 count, const float *levels)
 {
     ACImpl *This = impl_from_IAudioStreamVolume(iface);
-    pa_operation *o;
     HRESULT hr;
-    int success = 0, i;
-    pa_cvolume cv;
+    int i;
 
     TRACE("(%p)->(%d, %p)\n", This, count, levels);
 
@@ -2373,26 +2330,8 @@ static HRESULT WINAPI AudioStreamVolume_SetAllVolumes(
     if (FAILED(hr))
         goto out;
 
-    if (pulse_stream_volume) {
-        cv.channels = count;
-        for (i = 0; i < cv.channels; ++i)
-            cv.values[i] = levels[i] * (float)PA_VOLUME_NORM;
-        if (This->dataflow == eRender)
-            o = pa_context_set_sink_input_volume(pulse_ctx, pa_stream_get_index(This->stream), &cv, pulse_ctx_op_cb, &success);
-        else
-            o = pa_context_set_source_volume_by_index(pulse_ctx, pa_stream_get_device_index(This->stream), &cv, pulse_ctx_op_cb, &success);
-        if (o) {
-            while(pa_operation_get_state(o) == PA_OPERATION_RUNNING)
-                pthread_cond_wait(&pulse_cond, &pulse_lock);
-            pa_operation_unref(o);
-        }
-        if (!success)
-            hr = AUDCLNT_E_BUFFER_ERROR;
-    } else {
-        int i;
-        for (i = 0; i < count; ++i)
-            This->vol[i] = levels[i];
-    }
+    for (i = 0; i < count; ++i)
+        This->vol[i] = levels[i];
 
 out:
     pthread_mutex_unlock(&pulse_lock);
@@ -2403,9 +2342,8 @@ static HRESULT WINAPI AudioStreamVolume_GetAllVolumes(
         IAudioStreamVolume *iface, UINT32 count, float *levels)
 {
     ACImpl *This = impl_from_IAudioStreamVolume(iface);
-    pa_operation *o;
     HRESULT hr;
-    struct pulse_info_cb_data info;
+    int i;
 
     TRACE("(%p)->(%d, %p)\n", This, count, levels);
 
@@ -2420,24 +2358,8 @@ static HRESULT WINAPI AudioStreamVolume_GetAllVolumes(
     if (FAILED(hr))
         goto out;
 
-    if (pulse_stream_volume) {
-        info.n = count;
-        info.levels = levels;
-        if (This->dataflow == eRender)
-            o = pa_context_get_sink_input_info(pulse_ctx, pa_stream_get_index(This->stream), pulse_sink_input_info_cb, &info);
-        else
-            o = pa_context_get_source_info_by_index(pulse_ctx, pa_stream_get_device_index(This->stream), pulse_source_info_cb, &info);
-        if (o) {
-            while(pa_operation_get_state(o) == PA_OPERATION_RUNNING)
-                pthread_cond_wait(&pulse_cond, &pulse_lock);
-            pa_operation_unref(o);
-        } else
-            hr = AUDCLNT_E_BUFFER_ERROR;
-    } else {
-        int i;
-        for (i = 0; i < count; ++i)
-            levels[i] = This->vol[i];
-    }
+    for (i = 0; i < count; ++i)
+        levels[i] = This->vol[i];
 
 out:
     pthread_mutex_unlock(&pulse_lock);
-- 
2.2.1


From 8e1c71f635b4005958e8f8b3a8b3bd654367f71c Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Wed, 4 Mar 2015 13:33:25 +0100
Subject: ntdll: Implement threadpool wait objects.

---
 dlls/ntdll/ntdll.spec   |   8 +-
 dlls/ntdll/threadpool.c | 472 +++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 469 insertions(+), 11 deletions(-)

diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index 21f39de..9093eb8 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -975,7 +975,7 @@
 # @ stub TpAllocJobNotification
 @ stdcall TpAllocPool(ptr ptr)
 @ stdcall TpAllocTimer(ptr ptr ptr)
-# @ stub TpAllocWait
+@ stdcall TpAllocWait(ptr ptr ptr ptr)
 @ stdcall TpAllocWork(ptr ptr ptr ptr)
 # @ stub TpAlpcRegisterCompletionList
 # @ stub TpAlpcUnregisterCompletionList
@@ -1006,7 +1006,7 @@
 # @ stub TpReleaseJobNotification
 @ stdcall TpReleasePool(ptr)
 @ stdcall TpReleaseTimer(ptr)
-# @ stub TpReleaseWait
+@ stdcall TpReleaseWait(ptr)
 @ stdcall TpReleaseWork(ptr)
 # @ stub TpSetDefaultPoolMaxThreads
 # @ stub TpSetDefaultPoolStackInformation
@@ -1018,7 +1018,7 @@
 # @ stub TpSetPoolWorkerThreadIdleTimeout
 @ stdcall TpSetTimer(ptr ptr long long)
 # @ stub TpSetTimerEx
-# @ stub TpSetWait
+@ stdcall TpSetWait(ptr long ptr)
 # @ stub TpSetWaitEx
 @ stdcall TpSimpleTryPost(ptr ptr ptr)
 # @ stub TpStartAsyncIoOperation
@@ -1028,7 +1028,7 @@
 # @ stub TpWaitForIoCompletion
 # @ stub TpWaitForJobNotification
 @ stdcall TpWaitForTimer(ptr long)
-# @ stub TpWaitForWait
+@ stdcall TpWaitForWait(ptr long)
 @ stdcall TpWaitForWork(ptr long)
 @ stdcall -ret64 VerSetConditionMask(int64 long long)
 @ stdcall WinSqmIsOptedIn()
diff --git a/dlls/ntdll/threadpool.c b/dlls/ntdll/threadpool.c
index a973409..7df8cb1 100644
--- a/dlls/ntdll/threadpool.c
+++ b/dlls/ntdll/threadpool.c
@@ -137,6 +137,7 @@ struct timer_queue
  */
 
 #define THREADPOOL_WORKER_TIMEOUT 5000
+#define MAXIMUM_WAITQUEUE_OBJECTS (MAXIMUM_WAIT_OBJECTS - 1)
 
 /* internal threadpool representation */
 struct threadpool
@@ -158,7 +159,8 @@ enum threadpool_objtype
 {
     TP_OBJECT_TYPE_SIMPLE,
     TP_OBJECT_TYPE_WORK,
-    TP_OBJECT_TYPE_TIMER
+    TP_OBJECT_TYPE_TIMER,
+    TP_OBJECT_TYPE_WAIT
 };
 
 /* internal threadpool object representation */
@@ -206,6 +208,17 @@ struct threadpool_object
             LONG            period;
             LONG            window_length;
         } timer;
+        struct
+        {
+            PTP_WAIT_CALLBACK callback;
+            LONG            signaled;
+            /* information about the wait, locked via waitqueue.cs */
+            struct waitqueue_bucket *bucket;
+            BOOL            wait_pending;
+            struct list     wait_entry;
+            ULONGLONG       timeout;
+            HANDLE          handle;
+        } wait;
     } u;
 };
 
@@ -264,6 +277,38 @@ static RTL_CRITICAL_SECTION_DEBUG timerqueue_debug =
     0, 0, { (DWORD_PTR)(__FILE__ ": timerqueue.cs") }
 };
 
+struct waitqueue_bucket
+{
+    struct list             bucket_entry;
+    LONG                    num_waits;
+    struct list             reserved;
+    struct list             waits;
+    HANDLE                  update_event;
+};
+
+/* global waitqueue object */
+static RTL_CRITICAL_SECTION_DEBUG waitqueue_debug;
+
+static struct
+{
+    CRITICAL_SECTION        cs;
+    LONG                    num_buckets;
+    struct list             buckets;
+}
+waitqueue =
+{
+    { &waitqueue_debug, -1, 0, 0, 0, 0 },
+    0,
+    LIST_INIT( waitqueue.buckets )
+};
+
+static RTL_CRITICAL_SECTION_DEBUG waitqueue_debug =
+{
+    0, 0, &waitqueue.cs,
+    { &waitqueue_debug.ProcessLocksList, &waitqueue_debug.ProcessLocksList },
+    0, 0, { (DWORD_PTR)(__FILE__ ": waitqueue.cs") }
+};
+
 static inline struct threadpool *impl_from_TP_POOL( TP_POOL *pool )
 {
     return (struct threadpool *)pool;
@@ -283,6 +328,13 @@ static inline struct threadpool_object *impl_from_TP_TIMER( TP_TIMER *timer )
     return object;
 }
 
+static inline struct threadpool_object *impl_from_TP_WAIT( TP_WAIT *wait )
+{
+    struct threadpool_object *object = (struct threadpool_object *)wait;
+    assert( !object || object->type == TP_OBJECT_TYPE_WAIT );
+    return object;
+}
+
 static inline struct threadpool_group *impl_from_TP_CLEANUP_GROUP( TP_CLEANUP_GROUP *group )
 {
     return (struct threadpool_group *)group;
@@ -295,7 +347,8 @@ static inline struct threadpool_instance *impl_from_TP_CALLBACK_INSTANCE( TP_CAL
 
 static void CALLBACK threadpool_worker_proc( void *param );
 static void CALLBACK timerqueue_thread_proc( void *param );
-static void tp_object_submit( struct threadpool_object *object );
+static void CALLBACK waitqueue_thread_proc( void *param );
+static void tp_object_submit( struct threadpool_object *object, BOOL success );
 static void tp_object_shutdown( struct threadpool_object *object );
 static BOOL tp_object_release( struct threadpool_object *object );
 static struct threadpool *default_threadpool = NULL;
@@ -1349,7 +1402,7 @@ update_timer:
     RtlLeaveCriticalSection( &timerqueue.cs );
 
     if (submit_timer)
-       tp_object_submit( new_timer );
+       tp_object_submit( new_timer, FALSE );
 }
 
 static void CALLBACK timerqueue_thread_proc( void *param )
@@ -1376,7 +1429,7 @@ static void CALLBACK timerqueue_thread_proc( void *param )
 
             /* Queue a new callback in one of the worker threads */
             list_remove( &timer->u.timer.timer_entry );
-            tp_object_submit( timer );
+            tp_object_submit( timer, FALSE );
 
             /* Requeue the timer, except its marked for shutdown */
             if (!timer->shutdown && timer->u.timer.period)
@@ -1442,6 +1495,301 @@ static void CALLBACK timerqueue_thread_proc( void *param )
     RtlLeaveCriticalSection( &timerqueue.cs );
 }
 
+static NTSTATUS tp_waitqueue_acquire( struct threadpool_object *wait )
+{
+    struct waitqueue_bucket *bucket;
+    NTSTATUS status;
+    HANDLE thread;
+    assert( wait->type = TP_OBJECT_TYPE_WAIT );
+
+    wait->u.wait.signaled       = 0;
+    wait->u.wait.bucket         = NULL;
+    wait->u.wait.wait_pending   = FALSE;
+    memset( &wait->u.wait.wait_entry, 0, sizeof(wait->u.wait.wait_entry) );
+    wait->u.wait.timeout        = 0;
+    wait->u.wait.handle         = INVALID_HANDLE_VALUE;
+
+    RtlEnterCriticalSection( &waitqueue.cs );
+
+    LIST_FOR_EACH_ENTRY( bucket, &waitqueue.buckets, struct waitqueue_bucket, bucket_entry )
+    {
+        if (bucket->num_waits < MAXIMUM_WAITQUEUE_OBJECTS)
+        {
+            bucket->num_waits++;
+            wait->u.wait.bucket = bucket;
+            list_add_tail( &bucket->reserved, &wait->u.wait.wait_entry );
+
+            status = STATUS_SUCCESS;
+            goto out;
+        }
+    }
+
+    bucket = RtlAllocateHeap( GetProcessHeap(), 0, sizeof(*bucket) );
+    if (!bucket)
+    {
+        status = STATUS_NO_MEMORY;
+        goto out;
+    }
+
+    bucket->num_waits = 1;
+    list_init( &bucket->reserved );
+    list_init( &bucket->waits );
+
+    status = NtCreateEvent( &bucket->update_event, EVENT_ALL_ACCESS, NULL, SynchronizationEvent, FALSE );
+    if (status)
+    {
+        RtlFreeHeap( GetProcessHeap(), 0, bucket );
+        goto out;
+    }
+
+    status = RtlCreateUserThread( GetCurrentProcess(), NULL, FALSE, NULL, 0, 0,
+                                  waitqueue_thread_proc, bucket, &thread, NULL );
+    if (status == STATUS_SUCCESS)
+    {
+        waitqueue.num_buckets++;
+        list_add_tail( &waitqueue.buckets, &bucket->bucket_entry );
+
+        wait->u.wait.bucket = bucket;
+        list_add_tail( &bucket->reserved, &wait->u.wait.wait_entry );
+
+        NtClose( thread );
+    }
+    else
+    {
+        NtClose( bucket->update_event );
+        RtlFreeHeap( GetProcessHeap(), 0, bucket );
+    }
+
+out:
+    RtlLeaveCriticalSection( &waitqueue.cs );
+    return status;
+}
+
+/* Decrement the refcount of a timer queue. */
+static void tp_waitqueue_release( struct threadpool_object *wait )
+{
+    assert( wait->type == TP_OBJECT_TYPE_WAIT );
+    RtlEnterCriticalSection( &waitqueue.cs );
+
+    if (wait->u.wait.bucket)
+    {
+        struct waitqueue_bucket *bucket = wait->u.wait.bucket;
+        assert( bucket->num_waits > 0 );
+
+        bucket->num_waits--;
+        list_remove( &wait->u.wait.wait_entry );
+        NtSetEvent( bucket->update_event, NULL );
+
+        wait->u.wait.bucket = NULL;
+    }
+
+    RtlLeaveCriticalSection( &waitqueue.cs );
+}
+
+static void tp_waitqueue_update_wait( struct threadpool_object *new_wait, HANDLE handle, LARGE_INTEGER *timeout )
+{
+    BOOL submit_wait = FALSE;
+
+    assert( new_wait->type == TP_OBJECT_TYPE_WAIT );
+    RtlEnterCriticalSection( &waitqueue.cs );
+    assert( new_wait->u.wait.bucket );
+
+    /* update wait handle */
+    new_wait->u.wait.handle = handle;
+
+    /* for performance reasons we only wake up when something has changed */
+    if (handle || new_wait->u.wait.wait_pending)
+    {
+        struct waitqueue_bucket *bucket = new_wait->u.wait.bucket;
+        list_remove( &new_wait->u.wait.wait_entry );
+
+        if (handle)
+        {
+            ULONGLONG when = TIMEOUT_INFINITE;
+
+            if (timeout)
+            {
+                when = timeout->QuadPart;
+
+                /* A timeout of zero means that the wait should be submitted immediately */
+                if (when == 0)
+                {
+                    submit_wait = TRUE;
+                    goto remove_wait;
+                }
+
+                /* Convert relative timeout to absolute */
+                if ((LONGLONG)when < 0)
+                {
+                    LARGE_INTEGER now;
+                    NtQuerySystemTime( &now );
+                    when = now.QuadPart - when;
+                }
+            }
+
+            list_add_tail( &bucket->waits, &new_wait->u.wait.wait_entry );
+            new_wait->u.wait.wait_pending = TRUE;
+            new_wait->u.wait.timeout = when;
+        }
+        else
+        {
+remove_wait:
+            list_add_tail( &bucket->reserved, &new_wait->u.wait.wait_entry );
+            new_wait->u.wait.wait_pending = FALSE;
+        }
+
+        NtSetEvent( bucket->update_event, NULL );
+    }
+
+    RtlLeaveCriticalSection( &waitqueue.cs );
+
+    if (submit_wait)
+        tp_object_submit( new_wait, FALSE );
+}
+
+static void CALLBACK waitqueue_thread_proc( void *param )
+{
+    HANDLE handles[MAXIMUM_WAITQUEUE_OBJECTS + 1];
+    struct threadpool_object *objects[MAXIMUM_WAITQUEUE_OBJECTS];
+    struct waitqueue_bucket *bucket = param;
+    LARGE_INTEGER now, timeout;
+    struct threadpool_object *wait, *next;
+    DWORD num_handles;
+    NTSTATUS status;
+
+    RtlEnterCriticalSection( &waitqueue.cs );
+
+    for (;;)
+    {
+        NtQuerySystemTime( &now );
+        timeout.QuadPart = TIMEOUT_INFINITE;
+        num_handles = 0;
+
+        LIST_FOR_EACH_ENTRY_SAFE( wait, next, &bucket->waits, struct threadpool_object, u.wait.wait_entry )
+        {
+            assert( wait->type == TP_OBJECT_TYPE_WAIT );
+
+            /* Timeout expired or object was signaled */
+            if (wait->u.wait.timeout <= now.QuadPart)
+            {
+                list_remove( &wait->u.wait.wait_entry );
+                list_add_tail( &bucket->reserved, &wait->u.wait.wait_entry );
+                tp_object_submit( wait, FALSE );
+            }
+            else
+            {
+                if (wait->u.wait.timeout < timeout.QuadPart)
+                    timeout.QuadPart = wait->u.wait.timeout;
+
+                /* We will have to wait for this object - keep a reference to make sure it doesn't get destroyed */
+                assert( num_handles < MAXIMUM_WAITQUEUE_OBJECTS );
+                interlocked_inc( &wait->refcount );
+                objects[num_handles] = wait;
+                handles[num_handles] = wait->u.wait.handle;
+                num_handles++;
+            }
+        }
+
+        if (!bucket->num_waits)
+        {
+            assert( num_handles == 0 );
+
+            /* All wait objects have been destroyed, if there are no new wait objects within some
+             * amount of time, then we can shutdown this thread. */
+            RtlLeaveCriticalSection( &waitqueue.cs );
+            timeout.QuadPart = (ULONGLONG)THREADPOOL_WORKER_TIMEOUT * -10000;
+            status = NtWaitForMultipleObjects( 1, &bucket->update_event, TRUE, FALSE, &timeout );
+            RtlEnterCriticalSection( &waitqueue.cs );
+
+            if (status == STATUS_TIMEOUT && !bucket->num_waits)
+                break;
+        }
+        else
+        {
+            handles[num_handles] = bucket->update_event;
+
+            /* Wait for a wait queue update event or until an event is triggered */
+            RtlLeaveCriticalSection( &waitqueue.cs );
+            status = NtWaitForMultipleObjects( num_handles + 1, handles, TRUE, FALSE, &timeout );
+            RtlEnterCriticalSection( &waitqueue.cs );
+
+            if (status >= STATUS_WAIT_0 && status < STATUS_WAIT_0 + num_handles)
+            {
+                wait = objects[status - STATUS_WAIT_0];
+                assert( wait->type == TP_OBJECT_TYPE_WAIT );
+
+                if (wait->u.wait.bucket)
+                {
+                    assert( wait->u.wait.bucket == bucket );
+                    list_remove( &wait->u.wait.wait_entry );
+                    list_add_tail( &bucket->reserved, &wait->u.wait.wait_entry );
+                    tp_object_submit( wait, TRUE );
+                }
+                else
+                    FIXME("Wait object triggered while object was destroyed, race-condition.\n");
+            }
+
+            while (num_handles)
+            {
+                wait = objects[--num_handles];
+                assert( wait->type == TP_OBJECT_TYPE_WAIT );
+                tp_object_release( wait );
+            }
+        }
+
+        /* Try to merge with other buckets */
+        if (waitqueue.num_buckets > 1 && bucket->num_waits && bucket->num_waits < MAXIMUM_WAITQUEUE_OBJECTS / 2)
+        {
+            struct waitqueue_bucket *other_bucket;
+            LIST_FOR_EACH_ENTRY( other_bucket, &waitqueue.buckets, struct waitqueue_bucket, bucket_entry )
+            {
+                if (other_bucket != bucket && other_bucket->num_waits &&
+                    other_bucket->num_waits + bucket->num_waits <= MAXIMUM_WAITQUEUE_OBJECTS)
+                {
+                    other_bucket->num_waits += bucket->num_waits;
+                    bucket->num_waits = 0;
+
+                    LIST_FOR_EACH_ENTRY( wait, &bucket->reserved, struct threadpool_object, u.wait.wait_entry )
+                    {
+                        assert( wait->type == TP_OBJECT_TYPE_WAIT );
+                        wait->u.wait.bucket = other_bucket;
+                    }
+                    list_move_tail( &other_bucket->reserved, &bucket->reserved );
+
+                    LIST_FOR_EACH_ENTRY( wait, &bucket->waits, struct threadpool_object, u.wait.wait_entry )
+                    {
+                        assert( wait->type == TP_OBJECT_TYPE_WAIT );
+                        wait->u.wait.bucket = other_bucket;
+                    }
+                    list_move_tail( &other_bucket->waits, &bucket->waits );
+
+                    /* we will not terminate immediately, but instead after a timeout. Make sure that this
+                     * bucket appears as the last one in the list, otherwise there is a high risk that
+                     * elements will be added again. */
+                    list_remove( &bucket->bucket_entry );
+                    list_add_tail( &waitqueue.buckets, &bucket->bucket_entry );
+
+                    NtSetEvent( other_bucket->update_event, NULL );
+                    break;
+                }
+            }
+        }
+    }
+
+    waitqueue.num_buckets--;
+    list_remove( &bucket->bucket_entry );
+    if (!waitqueue.num_buckets)
+        assert( list_empty( &waitqueue.buckets ) );
+    RtlLeaveCriticalSection( &waitqueue.cs );
+
+    assert( bucket->num_waits == 0 );
+    assert( list_empty( &bucket->reserved ) );
+    assert( list_empty( &bucket->waits ) );
+
+    NtClose( bucket->update_event );
+    RtlFreeHeap( GetProcessHeap(), 0, bucket );
+}
+
 /* allocate a new threadpool (with at least one worker thread) */
 static NTSTATUS tp_threadpool_alloc( struct threadpool **out )
 {
@@ -1640,7 +1988,7 @@ static void tp_object_initialize( struct threadpool_object *object, struct threa
      * to the cleanup group. As soon as the cleanup group members are released ->shutdown
      * will be set, and tp_object_submit would fail with an assertion. */
     if (simple_cb)
-        tp_object_submit( object );
+        tp_object_submit( object, FALSE );
 
     if (object->group)
     {
@@ -1661,7 +2009,7 @@ static void tp_object_initialize( struct threadpool_object *object, struct threa
 }
 
 /* submits an object to a threadpool */
-static void tp_object_submit( struct threadpool_object *object )
+static void tp_object_submit( struct threadpool_object *object, BOOL success )
 {
     struct threadpool *pool = object->pool;
 
@@ -1696,6 +2044,10 @@ out:
     if (!object->num_pending_callbacks++)
         list_add_tail( &pool->pool, &object->pool_entry );
 
+    /* increment success counter by one */
+    if (object->type == TP_OBJECT_TYPE_WAIT && success)
+        object->u.wait.signaled++;
+
     RtlLeaveCriticalSection( &pool->cs );
 }
 
@@ -1714,6 +2066,9 @@ static void tp_object_cancel( struct threadpool_object *object, BOOL group_cance
         list_remove( &object->pool_entry );
     }
 
+    if (object->type == TP_OBJECT_TYPE_WAIT)
+        object->u.wait.signaled = 0;
+
     RtlLeaveCriticalSection( &pool->cs );
 
     /* Execute group cancellation callback if defined, and if this was actually a group cancel. */
@@ -1747,6 +2102,8 @@ static void tp_object_shutdown( struct threadpool_object *object )
 {
     if (object->type == TP_OBJECT_TYPE_TIMER)
         tp_timerqueue_release( object );
+    else if (object->type == TP_OBJECT_TYPE_WAIT)
+        tp_waitqueue_release( object );
 
     object->shutdown = TRUE;
 }
@@ -1912,6 +2269,7 @@ static void CALLBACK threadpool_worker_proc( void *param )
     struct threadpool_instance instance;
     TP_CALLBACK_INSTANCE *cb_instance = (TP_CALLBACK_INSTANCE *)&instance;
     struct threadpool *pool = param;
+    TP_WAIT_RESULT wait_result;
     LARGE_INTEGER timeout;
     struct list *ptr;
 
@@ -1929,6 +2287,18 @@ static void CALLBACK threadpool_worker_proc( void *param )
             if (--object->num_pending_callbacks)
                 list_add_tail( &pool->pool, &object->pool_entry );
 
+            /* for wait objects, determine if the object was signaled or if this
+             * is a timeout. */
+            if (object->type == TP_OBJECT_TYPE_WAIT)
+            {
+                if (object->u.wait.signaled > 0)
+                {
+                    wait_result = WAIT_OBJECT_0;
+                    object->u.wait.signaled--;
+                }
+                else wait_result = WAIT_TIMEOUT;
+            }
+
             /* Leave critical section and do the actual callback. */
             object->num_running_callbacks++;
             pool->num_busy_workers++;
@@ -1964,6 +2334,15 @@ static void CALLBACK threadpool_worker_proc( void *param )
                     break;
                 }
 
+                case TP_OBJECT_TYPE_WAIT:
+                {
+                    TRACE( "executing wait callback %p(%p, %p, %p, %u)\n",
+                           object->u.wait.callback, cb_instance, object->userdata, object, wait_result );
+                    object->u.wait.callback( cb_instance, object->userdata, (TP_WAIT *)object, wait_result );
+                    TRACE( "callback %p returned\n", object->u.wait.callback );
+                    break;
+                }
+
                 default:
                     assert(0);
                     break;
@@ -2073,6 +2452,41 @@ NTSTATUS WINAPI TpAllocTimer( TP_TIMER **out, PTP_TIMER_CALLBACK callback, PVOID
 }
 
 /***********************************************************************
+ *           TpAllocWait     (NTDLL.@)
+ */
+NTSTATUS WINAPI TpAllocWait( TP_WAIT **out, PTP_WAIT_CALLBACK callback, PVOID userdata,
+                             TP_CALLBACK_ENVIRON *environment )
+{
+    struct threadpool_object *object;
+    struct threadpool *pool;
+    NTSTATUS status;
+
+    TRACE("%p %p %p %p\n", out, callback, userdata, environment);
+
+    if (!(pool = get_threadpool( environment )))
+        return STATUS_NO_MEMORY;
+
+    object = RtlAllocateHeap( GetProcessHeap(), 0, sizeof(*object) );
+    if (!object)
+        return STATUS_NO_MEMORY;
+
+    object->type = TP_OBJECT_TYPE_WAIT;
+    object->u.wait.callback = callback;
+
+    status = tp_waitqueue_acquire( object );
+    if (status)
+    {
+        RtlFreeHeap( GetProcessHeap(), 0, object );
+        return status;
+    }
+
+    tp_object_initialize( object, pool, userdata, environment );
+
+    *out = (TP_WAIT *)object;
+    return STATUS_SUCCESS;
+}
+
+/***********************************************************************
  *           TpAllocWork    (NTDLL.@)
  */
 NTSTATUS WINAPI TpAllocWork( TP_WORK **out, PTP_WORK_CALLBACK callback, PVOID userdata,
@@ -2248,7 +2662,7 @@ VOID WINAPI TpPostWork( TP_WORK *work )
 
     if (this)
     {
-        tp_object_submit( this );
+        tp_object_submit( this, FALSE );
     }
 }
 
@@ -2362,6 +2776,21 @@ VOID WINAPI TpReleaseTimer( TP_TIMER *timer )
 }
 
 /***********************************************************************
+ *           TpReleaseWait    (NTDLL.@)
+ */
+VOID WINAPI TpReleaseWait( TP_WAIT *wait )
+{
+    struct threadpool_object *this = impl_from_TP_WAIT( wait );
+    TRACE("%p\n", wait);
+
+    if (this)
+    {
+        tp_object_shutdown( this );
+        tp_object_release( this );
+    }
+}
+
+/***********************************************************************
  *           TpReleaseWork    (NTDLL.@)
  */
 VOID WINAPI TpReleaseWork( TP_WORK *work )
@@ -2426,6 +2855,20 @@ VOID WINAPI TpSetTimer( TP_TIMER *timer, LARGE_INTEGER *timeout, LONG period, LO
 }
 
 /***********************************************************************
+ *           TpSetWait    (KERNEL32.@)
+ */
+VOID WINAPI TpSetWait( TP_WAIT *wait, HANDLE handle, LARGE_INTEGER *timeout )
+{
+    struct threadpool_object *this = impl_from_TP_WAIT( wait );
+    TRACE("%p %p %p\n", wait, handle, timeout);
+
+    if (this)
+    {
+        tp_waitqueue_update_wait( this, handle, timeout );
+    }
+}
+
+/***********************************************************************
  *           TpSimpleTryPost    (NTDLL.@)
  */
 NTSTATUS WINAPI TpSimpleTryPost( PTP_SIMPLE_CALLBACK callback, PVOID userdata,
@@ -2466,6 +2909,21 @@ VOID WINAPI TpWaitForTimer( TP_TIMER *timer, BOOL cancel_pending )
 }
 
 /***********************************************************************
+ *           TpWaitForWait    (KERNEL32.@)
+ */
+VOID WINAPI TpWaitForWait( TP_WAIT *wait, BOOL cancel_pending )
+{
+    struct threadpool_object *this = impl_from_TP_WAIT( wait );
+    TRACE("%p %d\n", wait, cancel_pending);
+    if (this)
+    {
+        if (cancel_pending)
+            tp_object_cancel( this, FALSE, NULL );
+        tp_object_wait( this );
+    }
+}
+
+/***********************************************************************
  *           TpWaitForWork    (NTDLL.@)
  */
 VOID WINAPI TpWaitForWork( TP_WORK *work, BOOL cancel_pending )
-- 
2.3.5


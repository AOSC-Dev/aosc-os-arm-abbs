From 12e3dc5ffa57a18e67e8e30dd5c15e3dc0727e19 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Thu, 7 Aug 2014 01:54:28 +0200
Subject: comctl32/tests: Add tests for LoadIconMetric function.

---
 dlls/comctl32/tests/misc.c | 84 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 84 insertions(+)

diff --git a/dlls/comctl32/tests/misc.c b/dlls/comctl32/tests/misc.c
index 69a7db4..55ea14a 100644
--- a/dlls/comctl32/tests/misc.c
+++ b/dlls/comctl32/tests/misc.c
@@ -20,6 +20,7 @@
 
 #include <stdio.h>
 #include <windows.h>
+#include <commctrl.h>
 
 #include "wine/test.h"
 #include "v6util.h"
@@ -34,6 +35,8 @@ static BOOL (WINAPI * pStr_SetPtrA)(LPSTR, LPCSTR);
 static INT (WINAPI * pStr_GetPtrW)(LPCWSTR, LPWSTR, INT);
 static BOOL (WINAPI * pStr_SetPtrW)(LPWSTR, LPCWSTR);
 
+static HRESULT (WINAPI * LoadIconMetric)(HINSTANCE, PCWSTR, INT, HICON*);
+
 static HMODULE hComctl32 = 0;
 
 #define COMCTL32_GET_PROC(ordinal, func) \
@@ -205,6 +208,86 @@ static void test_TaskDialogIndirect(void)
     ok(ptr == ptr2, "got wrong pointer for ordinal 345, %p expected %p\n", ptr2, ptr);
 }
 
+static void test_LoadIconMetric(void)
+{
+    static const WCHAR nonExistingFile[] = {'d','o','e','s','n','o','t','e','x','i','s','t','.','i','c','o','\0'};
+    HINSTANCE hinst;
+    void *ptr;
+    HICON icon;
+    HRESULT result;
+    ICONINFO info;
+    BOOL res;
+    INT bytes;
+    BITMAP bmp;
+
+    hinst = LoadLibraryA("comctl32.dll");
+
+    LoadIconMetric = (void *)GetProcAddress(hinst, "LoadIconMetric");
+    if (!LoadIconMetric)
+    {
+        win_skip("LoadIconMetric not exported by name\n");
+        return;
+    }
+
+    ptr = GetProcAddress(hinst, (const CHAR*)380);
+    ok(ptr == LoadIconMetric, "got wrong pointer for ordinal 380, %p expected %p\n",
+       ptr, LoadIconMetric);
+
+    result = LoadIconMetric(NULL, (PCWSTR)IDI_APPLICATION, LIM_SMALL, &icon);
+    ok(result == S_OK, "Expected S_OK, got %x\n", result);
+    if (result == S_OK)
+    {
+        res = GetIconInfo(icon, &info);
+        ok(res, "Failed to get icon info\n");
+        if (res && info.hbmColor)
+        {
+            bytes = GetObjectA(info.hbmColor, sizeof(bmp), &bmp);
+            ok(bytes > 0, "Failed to get bitmap info for icon\n");
+            if (bytes > 0)
+            {
+                ok(bmp.bmWidth  == GetSystemMetrics( SM_CXSMICON ), "Wrong icon width\n");
+                ok(bmp.bmHeight == GetSystemMetrics( SM_CYSMICON ), "Wrong icon height\n");
+            }
+        }
+        DestroyIcon(icon);
+    }
+
+    result = LoadIconMetric(NULL, (PCWSTR)IDI_APPLICATION, LIM_LARGE, &icon);
+    ok(result == S_OK, "Expected S_OK, got %x\n", result);
+    if (result == S_OK)
+    {
+        res = GetIconInfo(icon, &info);
+        ok(res, "Failed to get icon info\n");
+        if (res && info.hbmColor)
+        {
+            bytes = GetObjectA(info.hbmColor, sizeof(bmp), &bmp);
+            ok(bytes > 0, "Failed to get bitmap info for icon\n");
+            if (bytes > 0)
+            {
+                ok(bmp.bmWidth  == GetSystemMetrics( SM_CXICON ), "Wrong icon width\n");
+                ok(bmp.bmHeight == GetSystemMetrics( SM_CYICON ), "Wrong icon height\n");
+            }
+        }
+        DestroyIcon(icon);
+    }
+
+    result = LoadIconMetric(NULL, (PCWSTR)IDI_APPLICATION, 0x100, &icon);
+    ok(result == E_INVALIDARG, "Expected E_INVALIDARG, got %x\n", result);
+    if (result == S_OK) DestroyIcon(icon);
+
+    icon = (HICON)0x1234;
+    result = LoadIconMetric(NULL, NULL, LIM_LARGE, &icon);
+    ok(result == E_INVALIDARG, "Expected E_INVALIDARG, got %x\n", result);
+    ok(icon == (HICON)0, "Expected 0x0, got %p\n", icon);
+    if (result == S_OK) DestroyIcon(icon);
+
+    result = LoadIconMetric(NULL, nonExistingFile, LIM_LARGE, &icon);
+    ok(result == HRESULT_FROM_WIN32(ERROR_RESOURCE_TYPE_NOT_FOUND),
+       "Expected 80070715, got %x\n", result);
+    if (result == S_OK) DestroyIcon(icon);
+}
+
+
 START_TEST(misc)
 {
     ULONG_PTR ctx_cookie;
@@ -220,6 +303,7 @@ START_TEST(misc)
         return;
 
     test_TaskDialogIndirect();
+    test_LoadIconMetric();
 
     unload_v6_module(ctx_cookie, hCtx);
 }
-- 
1.8.3.2


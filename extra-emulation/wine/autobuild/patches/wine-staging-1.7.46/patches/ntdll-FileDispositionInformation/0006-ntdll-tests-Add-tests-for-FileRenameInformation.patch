From 3e1665a8196e64bc6f28e7ba91f7bf056fc2b2b0 Mon Sep 17 00:00:00 2001
From: Jianqiu Zhang <zhangjianqiu_133@yeah.net>
Date: Thu, 14 May 2015 20:18:52 +0800
Subject: ntdll/tests: Add tests for FileRenameInformation.

---
 dlls/ntdll/tests/file.c | 106 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 106 insertions(+)

diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
index b285157..aced150 100644
--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -1435,6 +1435,111 @@ static void test_file_all_information(void)
     CloseHandle( h );
 }
 
+static void test_file_rename_information(void)
+{
+    static const WCHAR foo[] = {'f','o','o',0};
+    WCHAR tmp_path[MAX_PATH], oldpath[MAX_PATH + 16], newpath[MAX_PATH + 16];
+    UNICODE_STRING name_str;
+    HANDLE handle;
+    NTSTATUS res;
+    IO_STATUS_BLOCK io;
+    PFILE_RENAME_INFORMATION pfri;
+    BOOL fileDeleted;
+
+    GetTempPathW( MAX_PATH, tmp_path );
+
+    /* newpath doesn't exist at first */
+    res = GetTempFileNameW( tmp_path, foo, 0, oldpath );
+    ok( res != 0, "fail to create temp file\n" );
+    handle = CreateFileW( oldpath, GENERIC_WRITE | DELETE, 0, NULL, CREATE_ALWAYS, 0, 0 );
+    ok( handle != INVALID_HANDLE_VALUE, "CreateFileW failed\n" );
+
+    res = GetTempFileNameW( tmp_path, foo, 0, newpath );
+    ok( res != 0, "fail to create temp file\n" );
+    pRtlDosPathNameToNtPathName_U( newpath, &name_str, NULL, NULL );
+    DeleteFileW( newpath );
+    pfri = HeapAlloc( GetProcessHeap(), 0, sizeof(FILE_RENAME_INFORMATION) + name_str.Length );
+    pfri->Replace = FALSE;
+    pfri->RootDir = NULL;
+    pfri->FileNameLength = name_str.Length;
+    memcpy( pfri->FileName, name_str.Buffer, name_str.Length );
+    pRtlFreeUnicodeString( &name_str );
+
+    U(io).Status = 0xdeadbeef;
+    res = pNtSetInformationFile( handle, &io, pfri, sizeof(FILE_RENAME_INFORMATION) + pfri->FileNameLength, FileRenameInformation );
+    todo_wine ok( U(io).Status == STATUS_SUCCESS, "io.Status expected STATUS_SUCCESS, got %x\n", U(io).Status );
+    todo_wine ok( res == STATUS_SUCCESS, "res expected STATUS_SUCCESS, got %x\n", res );
+    fileDeleted = GetFileAttributesW( oldpath ) == INVALID_FILE_ATTRIBUTES && GetLastError() == ERROR_FILE_NOT_FOUND;
+    todo_wine ok( fileDeleted, "File should have been deleted\n" );
+    fileDeleted = GetFileAttributesW( newpath ) == INVALID_FILE_ATTRIBUTES && GetLastError() == ERROR_FILE_NOT_FOUND;
+    todo_wine ok( !fileDeleted, "File should exist\n" );
+
+    CloseHandle( handle );
+    HeapFree( GetProcessHeap(), 0, pfri );
+    DeleteFileW( oldpath );
+    DeleteFileW( newpath );
+
+    /* newpath exists in temp directory, Replace = false */
+    res = GetTempFileNameW( tmp_path, foo, 0, oldpath );
+    ok( res != 0, "fail to create temp file\n" );
+    handle = CreateFileW( oldpath, GENERIC_WRITE | DELETE, 0, NULL, CREATE_ALWAYS, 0, 0 );
+    ok( handle != INVALID_HANDLE_VALUE, "CreateFileW failed\n" );
+
+    res = GetTempFileNameW( tmp_path, foo, 0, newpath );
+    ok( res != 0, "fail to create temp file\n" );
+    pRtlDosPathNameToNtPathName_U( newpath, &name_str, NULL, NULL );
+    pfri = HeapAlloc( GetProcessHeap(), 0, sizeof(FILE_RENAME_INFORMATION) + name_str.Length );
+    pfri->Replace = FALSE;
+    pfri->RootDir = NULL;
+    pfri->FileNameLength = name_str.Length;
+    memcpy( pfri->FileName, name_str.Buffer, name_str.Length );
+    pRtlFreeUnicodeString( &name_str );
+
+    U(io).Status = 0xdeadbeef;
+    res = pNtSetInformationFile( handle, &io, pfri, sizeof(FILE_RENAME_INFORMATION) + pfri->FileNameLength, FileRenameInformation );
+    todo_wine ok( U(io).Status == 0xdeadbeef, "shouldn't be able to set FileRenameInformation, io.Status is %x\n", U(io).Status );
+    todo_wine ok( res == STATUS_OBJECT_NAME_COLLISION, "expect STATUS_OBJECT_NAME_COLLISION, res is %x\n", res );
+    fileDeleted = GetFileAttributesW( oldpath ) == INVALID_FILE_ATTRIBUTES && GetLastError() == ERROR_FILE_NOT_FOUND;
+    ok( !fileDeleted, "File shouldn't have been deleted!\n" );
+    fileDeleted = GetFileAttributesW( newpath ) == INVALID_FILE_ATTRIBUTES && GetLastError() == ERROR_FILE_NOT_FOUND;
+    ok( !fileDeleted, "File shouldn't have been deleted!\n" );
+
+    CloseHandle( handle );
+    HeapFree( GetProcessHeap(), 0, pfri );
+    DeleteFileW( oldpath );
+    DeleteFileW( newpath );
+
+    /* newpath exists in temp directory, Replace = true */
+    res = GetTempFileNameW( tmp_path, foo, 0, oldpath );
+    ok( res != 0, "fail to create temp file\n" );
+    handle = CreateFileW( oldpath, GENERIC_WRITE | DELETE, 0, NULL, CREATE_ALWAYS, 0, 0 );
+    ok( handle != INVALID_HANDLE_VALUE, "CreateFileW failed\n" );
+
+    res = GetTempFileNameW( tmp_path, foo, 0, newpath );
+    ok( res != 0, "fail to create temp file\n" );
+    pRtlDosPathNameToNtPathName_U( newpath, &name_str, NULL, NULL );
+    pfri = HeapAlloc( GetProcessHeap(), 0, sizeof(FILE_RENAME_INFORMATION) + name_str.Length );
+    pfri->Replace = TRUE;
+    pfri->RootDir = NULL;
+    pfri->FileNameLength = name_str.Length;
+    memcpy( pfri->FileName, name_str.Buffer, name_str.Length );
+    pRtlFreeUnicodeString( &name_str );
+
+    U(io).Status = 0xdeadbeef;
+    res = pNtSetInformationFile( handle, &io, pfri, sizeof(FILE_RENAME_INFORMATION) + pfri->FileNameLength, FileRenameInformation );
+    todo_wine ok( U(io).Status == STATUS_SUCCESS, "io.Status expect STATUS_SUCCESS, io.Status is %x\n", U(io).Status );
+    todo_wine ok( res == STATUS_SUCCESS, "res expect STATUS_SUCCESS, res is %x\n", res );
+    fileDeleted = GetFileAttributesW( oldpath ) == INVALID_FILE_ATTRIBUTES && GetLastError() == ERROR_FILE_NOT_FOUND;
+    todo_wine ok( fileDeleted, "File should have been deleted!\n" );
+    fileDeleted = GetFileAttributesW( newpath ) == INVALID_FILE_ATTRIBUTES && GetLastError() == ERROR_FILE_NOT_FOUND;
+    ok( !fileDeleted, "File shouldn't have been deleted!\n" );
+
+    CloseHandle( handle );
+    HeapFree( GetProcessHeap(), 0, pfri );
+    DeleteFileW( oldpath );
+    DeleteFileW( newpath );
+}
+
 static void test_file_both_information(void)
 {
     IO_STATUS_BLOCK io;
@@ -3001,6 +3106,7 @@ START_TEST(file)
     test_file_name_information();
     test_file_full_size_information();
     test_file_all_name_information();
+    test_file_rename_information();
     test_file_disposition_information();
     test_query_volume_information_file();
     test_query_attribute_information_file();
-- 
2.4.2


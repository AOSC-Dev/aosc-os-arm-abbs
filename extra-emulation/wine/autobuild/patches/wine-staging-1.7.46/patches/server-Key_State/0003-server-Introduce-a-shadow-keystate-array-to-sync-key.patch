From 6cf46edbed0c41632b183064be0332387275c655 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Tue, 2 Jun 2015 19:06:56 +0200
Subject: server: Introduce a shadow keystate array to sync keystates only on
 changes.

---
 dlls/comctl32/tests/listview.c |  1 -
 server/queue.c                 | 18 ++++++++++++++++--
 2 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/dlls/comctl32/tests/listview.c b/dlls/comctl32/tests/listview.c
index 3ec4181..3edb25a 100644
--- a/dlls/comctl32/tests/listview.c
+++ b/dlls/comctl32/tests/listview.c
@@ -2322,7 +2322,6 @@ static void test_multiselect(void)
 
 	selected_count = (int)SendMessageA(hwnd, LVM_GETSELECTEDCOUNT, 0, 0);
 
-        todo_wine
 	ok((task.result == -1 ? item_count : task.result) == selected_count, "Failed multiple selection %s. There should be %d selected items (is %d)\n", task.descr, item_count, selected_count);
 
 	/* Set SHIFT key released */
diff --git a/server/queue.c b/server/queue.c
index f278861..76fa3e3 100644
--- a/server/queue.c
+++ b/server/queue.c
@@ -115,6 +115,7 @@ struct thread_input
     struct list            msg_list;      /* list of hardware messages */
     int                    lock_count;    /* lock counter for keystate */
     unsigned char          keystate[256]; /* state of each key */
+    unsigned char          shadow_keystate[256]; /* shadow copy of keystate */
 };
 
 struct msg_queue
@@ -257,6 +258,7 @@ static struct thread_input *create_thread_input( struct thread *thread )
         list_init( &input->msg_list );
         set_caret_window( input, 0 );
         memset( input->keystate, 0, sizeof(input->keystate) );
+        memset( input->shadow_keystate, 0, sizeof(input->shadow_keystate) );
 
         if (!(input->desktop = get_thread_desktop( thread, 0 /* FIXME: access rights */ )))
         {
@@ -1094,7 +1096,11 @@ int attach_thread_input( struct thread *thread_from, struct thread *thread_to )
     }
 
     ret = assign_thread_input( thread_from, input );
-    if (ret) memset( input->keystate, 0, sizeof(input->keystate) );
+    if (ret)
+    {
+        memset( input->keystate, 0, sizeof(input->keystate) );
+        memset( input->shadow_keystate, 0, sizeof(input->shadow_keystate) );
+    }
     release_object( input );
     return ret;
 }
@@ -1333,10 +1339,18 @@ static void synchronize_input_key_state( struct thread_input *input )
 {
     if (!input->lock_count)
     {
+        unsigned char *shadow_keystate = input->shadow_keystate;
         unsigned char *keystate = input->keystate;
         unsigned int i;
+
         for (i = 0; i < 256; i++)
-            keystate[i] = input->desktop->keystate[i] & ~0x40;
+        {
+            if (input->desktop->keystate[i] != shadow_keystate[i])
+            {
+                keystate[i] = input->desktop->keystate[i] & ~0x40;
+                shadow_keystate[i] = input->desktop->keystate[i];
+            }
+        }
     }
 }
 
-- 
2.4.2


From 8069c24409570d48c59bb103539d1ea1fd835c36 Mon Sep 17 00:00:00 2001
From: Dan Kegel <dank@kegel.com>
Date: Mon, 15 Oct 2012 21:09:56 -0700
Subject: vcomp: better stubs for _vcomp_sections_init, _vcomp_sections_next

---
 dlls/vcomp/tests/work.c     | 34 ++++++++++++++++++++++++++++++++++
 dlls/vcomp/vcomp.spec       |  4 ++--
 dlls/vcomp/vcomp_private.h  |  5 +++++
 dlls/vcomp/work.c           | 18 ++++++++++++++++++
 dlls/vcomp100/vcomp100.spec |  4 ++--
 dlls/vcomp90/vcomp90.spec   |  4 ++--
 6 files changed, 63 insertions(+), 6 deletions(-)

diff --git a/dlls/vcomp/tests/work.c b/dlls/vcomp/tests/work.c
index 5abe0e1..981f741 100644
--- a/dlls/vcomp/tests/work.c
+++ b/dlls/vcomp/tests/work.c
@@ -20,12 +20,15 @@
 
 #include "wine/test.h"
 
+static void WINAPIV (*p_vcomp_barrier)(void);
 static void WINAPIV (*p_vcomp_fork)(DWORD parallel, int nargs, void *helper, ...);
 static void CDECL (*p_vcomp_for_dynamic_init)(int flags, int first, int last, int mystep, int chunksize);
 static int CDECL (*p_vcomp_for_dynamic_next)(int *pcounter, int *pchunklimit);
 static void CDECL (*p_vcomp_for_static_end)(void);
 static void CDECL (*p_vcomp_for_static_init)(int first, int last, int mystep, int chunksize, int *pnloops, int *pfirst, int *plast, int *pchunksize, int *pfinalchunkstart);
 static void CDECL (*p_vcomp_for_static_simple_init)(int first, int last, int mystep, int step, int *pfirst, int *plast);
+static void CDECL (*p_vcomp_sections_init)(int n);
+static int CDECL (*p_vcomp_sections_next)(void);
 
 #define GETFUNC(x) do { p##x = (void*)GetProcAddress(vcomp, #x); ok(p##x != NULL, "Export '%s' not found\n", #x); } while(0)
 
@@ -42,12 +45,15 @@ static BOOL init(void)
         return FALSE;
     }
 
+    GETFUNC(_vcomp_barrier);
     GETFUNC(_vcomp_fork);
     GETFUNC(_vcomp_for_dynamic_init);
     GETFUNC(_vcomp_for_dynamic_next);
     GETFUNC(_vcomp_for_static_end);
     GETFUNC(_vcomp_for_static_init);
     GETFUNC(_vcomp_for_static_simple_init);
+    GETFUNC(_vcomp_sections_init);
+    GETFUNC(_vcomp_sections_next);
 
     return TRUE;
 }
@@ -183,6 +189,33 @@ static void test_vcomp_for_static_simple_init(void)
     ok(nsum == 6*13, "expected sum 6*13, got %d\n", nsum);
 }
 
+int section_calls[3];
+
+static void CDECL _test_vcomp_sections_worker(void)
+{
+    p_vcomp_sections_init(3);
+
+    for (;;)
+    {
+        int i = p_vcomp_sections_next();
+        if (i < 0 || i >= 3) break;
+        section_calls[i]++;
+    }
+
+    p_vcomp_barrier();
+}
+
+static void test_vcomp_sections(void)
+{
+    section_calls[0] = 0;
+    section_calls[1] = 0;
+    section_calls[2] = 0;
+    p_vcomp_fork(1, 0, _test_vcomp_sections_worker);
+    ok(section_calls[0] == 1, "section 0 not called once\n");
+    ok(section_calls[1] == 1, "section 1 not called once\n");
+    ok(section_calls[2] == 1, "section 2 not called once\n");
+}
+
 START_TEST(work)
 {
     if (!init())
@@ -191,4 +224,5 @@ START_TEST(work)
     test_vcomp_for_dynamic();
     test_vcomp_for_static_init();
     test_vcomp_for_static_simple_init();
+    test_vcomp_sections();
 }
diff --git a/dlls/vcomp/vcomp.spec b/dlls/vcomp/vcomp.spec
index f603660..1b02a65 100644
--- a/dlls/vcomp/vcomp.spec
+++ b/dlls/vcomp/vcomp.spec
@@ -83,8 +83,8 @@
 @ stub _vcomp_reduction_u2
 @ stub _vcomp_reduction_u4
 @ stub _vcomp_reduction_u8
-@ stub _vcomp_sections_init
-@ stub _vcomp_sections_next
+@ cdecl _vcomp_sections_init(long)
+@ cdecl _vcomp_sections_next()
 @ cdecl _vcomp_set_num_threads(long)
 @ cdecl _vcomp_single_begin(long)
 @ cdecl _vcomp_single_end()
diff --git a/dlls/vcomp/vcomp_private.h b/dlls/vcomp/vcomp_private.h
index d3a7005..3d6c22b 100644
--- a/dlls/vcomp/vcomp_private.h
+++ b/dlls/vcomp/vcomp_private.h
@@ -35,6 +35,11 @@ struct vcomp_team
             int chunksize;
             int flags;
         } dyn_for;
+        struct
+        {
+            int counter;
+            int nsect;
+        } sections;
     } work;
 };
 
diff --git a/dlls/vcomp/work.c b/dlls/vcomp/work.c
index 87bce93..4370ec5 100644
--- a/dlls/vcomp/work.c
+++ b/dlls/vcomp/work.c
@@ -97,3 +97,21 @@ void CDECL _vcomp_for_static_end(void)
 {
     TRACE("stub\n");
 }
+
+void CDECL _vcomp_sections_init(int n)
+{
+    struct vcomp_team *pt = vcomp_get_team();
+    TRACE("(%d): stub\n", n);
+    pt->work.sections.counter = 0;
+    pt->work.sections.nsect = n;
+}
+
+int CDECL _vcomp_sections_next(void)
+{
+    struct vcomp_team *pt = vcomp_get_team();
+    int i = pt->work.sections.counter++;
+    if (i >= pt->work.sections.nsect)
+        i = -1;
+    TRACE("stub; returning %d\n", i);
+    return i;
+}
diff --git a/dlls/vcomp100/vcomp100.spec b/dlls/vcomp100/vcomp100.spec
index 48d5e3f..ab93ec2 100644
--- a/dlls/vcomp100/vcomp100.spec
+++ b/dlls/vcomp100/vcomp100.spec
@@ -83,8 +83,8 @@
 @ stub _vcomp_reduction_u2
 @ stub _vcomp_reduction_u4
 @ stub _vcomp_reduction_u8
-@ stub _vcomp_sections_init
-@ stub _vcomp_sections_next
+@ cdecl _vcomp_sections_init(long) vcomp._vcomp_sections_init
+@ cdecl _vcomp_sections_next() vcomp._vcomp_sections_next
 @ cdecl _vcomp_set_num_threads(long) vcomp._vcomp_set_num_threads
 @ cdecl _vcomp_single_begin(long) vcomp._vcomp_single_begin
 @ cdecl _vcomp_single_end() vcomp._vcomp_single_end
diff --git a/dlls/vcomp90/vcomp90.spec b/dlls/vcomp90/vcomp90.spec
index 48d5e3f..ab93ec2 100644
--- a/dlls/vcomp90/vcomp90.spec
+++ b/dlls/vcomp90/vcomp90.spec
@@ -83,8 +83,8 @@
 @ stub _vcomp_reduction_u2
 @ stub _vcomp_reduction_u4
 @ stub _vcomp_reduction_u8
-@ stub _vcomp_sections_init
-@ stub _vcomp_sections_next
+@ cdecl _vcomp_sections_init(long) vcomp._vcomp_sections_init
+@ cdecl _vcomp_sections_next() vcomp._vcomp_sections_next
 @ cdecl _vcomp_set_num_threads(long) vcomp._vcomp_set_num_threads
 @ cdecl _vcomp_single_begin(long) vcomp._vcomp_single_begin
 @ cdecl _vcomp_single_end() vcomp._vcomp_single_end
-- 
2.2.1


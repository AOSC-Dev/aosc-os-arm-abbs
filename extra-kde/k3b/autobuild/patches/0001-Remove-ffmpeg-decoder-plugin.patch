From d20c6fb5f71231da359d07fe778bf5607191dbf3 Mon Sep 17 00:00:00 2001
From: Albert Astals Cid <aacid@kde.org>
Date: Thu, 20 Jan 2022 22:26:34 +0100
Subject: [PATCH] Remove ffmpeg decoder plugin

It's only used when writing AAC, WMA, WavPack and APE to a CD-Audio and it
doesn't even seem to work nowadays (i get audio garbage for half [*], the
other half don't even let you drag them to the view) and on top of that
with ffmpeg5 doesn't even compile.

Removing for good, someone will need to rewrite it if they care about
those file formats

[*] My interpretation is that it assumes the output will be in a very
specific format but doesn't necessarily is
---
 CMakeLists.txt                               |  64 ---
 INSTALL.txt                                  |   2 -
 cmake/modules/FindFFmpeg.cmake               | 146 -------
 config-k3b.h.cmake                           |  11 -
 plugins/decoder/CMakeLists.txt               |   4 -
 plugins/decoder/ffmpeg/CMakeLists.txt        |  14 -
 plugins/decoder/ffmpeg/k3bffmpegdecoder.cpp  | 153 -------
 plugins/decoder/ffmpeg/k3bffmpegdecoder.h    |  57 ---
 plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp  | 427 -------------------
 plugins/decoder/ffmpeg/k3bffmpegwrapper.h    |  73 ----
 11 files changed, 1087 deletions(-)
 delete mode 100644 cmake/modules/FindFFmpeg.cmake
 delete mode 100644 plugins/decoder/ffmpeg/CMakeLists.txt
 delete mode 100644 plugins/decoder/ffmpeg/k3bffmpegdecoder.cpp
 delete mode 100644 plugins/decoder/ffmpeg/k3bffmpegdecoder.h
 delete mode 100644 plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp
 delete mode 100644 plugins/decoder/ffmpeg/k3bffmpegwrapper.h

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f01e2f0ef..599809b2d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -37,7 +37,6 @@ option(K3B_ENABLE_TAGLIB "Support for reading audio file metadata using Taglib."
 option(K3B_BUILD_API_DOCS "Build the API documentation for the K3b libs." OFF)
 
 # plugin options
-option(K3B_BUILD_FFMPEG_DECODER_PLUGIN "Build FFmpeg decoder plugin" ON)
 option(K3B_BUILD_OGGVORBIS_DECODER_PLUGIN "Build Ogg-Vorbis decoder plugin" ON)
 option(K3B_BUILD_OGGVORBIS_ENCODER_PLUGIN "Build Ogg-Vorbis encoder plugin" ON)
 option(K3B_BUILD_MAD_DECODER_PLUGIN "Build MAD mp3 decoder plugin" ON)
@@ -125,69 +124,6 @@ if(K3B_ENABLE_MUSICBRAINZ)
     set(ENABLE_MUSICBRAINZ "${MUSICBRAINZ_FOUND}")
 endif()
 
-if(K3B_BUILD_FFMPEG_DECODER_PLUGIN)
-    find_package(FFmpeg)
-    set_package_properties(FFmpeg PROPERTIES
-        PURPOSE "Needed for the K3b FFmpeg decoder plugin which can decode virtually all audio types."
-        URL "https://ffmpeg.org/"
-        TYPE OPTIONAL)
-
-    if(FFMPEG_FOUND)
-        include(CheckSymbolExists)
-        include(CMakePushCheckState)
-        cmake_push_check_state()
-
-        if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES "Clang")
-            # FindKDE4Internal.cmake screws things up
-            set(CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS} -std=c99)
-        endif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES "Clang")
-
-        if(FFMPEG_INCLUDE_DIR_OLD_STYLE)
-            set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${FFMPEG_INCLUDE_DIR_OLD_STYLE})
-            set(FFMPEG_HEADERS ffmpeg/avcodec.h ffmpeg/avformat.h)
-        else(FFMPEG_INCLUDE_DIR_OLD_STYLE)
-            set(CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} ${FFMPEG_INCLUDE_DIR} ${FFMPEG_INCLUDE_DIRS})
-            set(FFMPEG_HEADERS libavcodec/avcodec.h libavformat/avformat.h)
-            set(CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEFINITIONS} -DNEWFFMPEGAVCODECPATH)
-        endif(FFMPEG_INCLUDE_DIR_OLD_STYLE)
-        set(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} ${FFMPEG_LIBRARIES})
-
-        check_symbol_exists(avformat_open_input "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_OPEN_INPUT)
-        check_symbol_exists(av_dump_format "${FFMPEG_HEADERS}" HAVE_FFMPEG_AV_DUMP_FORMAT)
-        check_symbol_exists(avformat_find_stream_info "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO)
-        check_symbol_exists(avformat_close_input "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT)
-        check_symbol_exists(avcodec_open2 "${FFMPEG_HEADERS}" HAVE_FFMPEG_AVCODEC_OPEN2)
-        include(CheckCSourceCompiles)
-        check_c_source_compiles("
-            #ifdef NEWFFMPEGAVCODECPATH
-            #include <libavcodec/avcodec.h>
-            #else
-            #include <ffmpeg/avcodec.h>
-            #endif
-            int main() { enum AVMediaType t = AVMEDIA_TYPE_UNKNOWN; return 0; }
-            " HAVE_FFMPEG_AVMEDIA_TYPE)
-        check_c_source_compiles("
-            #ifdef NEWFFMPEGAVCODECPATH
-            #include <libavcodec/avcodec.h>
-            #else
-            #include <ffmpeg/avcodec.h>
-            #endif
-            int main() {
-            #if LIBAVCODEC_BUILD >= AV_VERSION_INT(54,25,0)
-            # Not needed here. AV_CODEC_ID_MP3 exists.
-            #else
-            enum CodecID t = CODEC_ID_MP3;
-            #endif
-            return 0;
-            }
-            " HAVE_FFMPEG_CODEC_MP3)
-
-        cmake_pop_check_state()
-    endif(FFMPEG_FOUND)
-
-    set(BUILD_FFMPEG_DECODER_PLUGIN "${FFMPEG_FOUND}")
-endif(K3B_BUILD_FFMPEG_DECODER_PLUGIN)
-
 if(K3B_BUILD_FLAC_DECODER_PLUGIN)
     find_package(Flac)
     set_package_properties(Flac PROPERTIES
diff --git a/INSTALL.txt b/INSTALL.txt
index 9cd107ddd..598fd9494 100644
--- a/INSTALL.txt
+++ b/INSTALL.txt
@@ -21,11 +21,9 @@ What you need to run K3b:
   - the eMovix package
   - TagLib by Scott Wheeler for reading Meta data tags
   - the musepack (or now mpcdec) library for decoding Musepack audio files
-  - the ffmpeg library to decode other audio file formats such as wma
   - the sndfile library to decode audio file formats such as AIFF or VOC
   - the lame library to encode audio files in the mp3 format
   - sox to encode audio files in formats such as AIFF or VOC
-  - a dynamically compiled libffmpeg for wma decoding
   - the musicbrainz library for metadata queries for single audio titles
   - polkit-qt for K3bSetup (tool for changing permissions of programs and devices)
 
diff --git a/cmake/modules/FindFFmpeg.cmake b/cmake/modules/FindFFmpeg.cmake
deleted file mode 100644
index 3818a4a44..000000000
--- a/cmake/modules/FindFFmpeg.cmake
+++ /dev/null
@@ -1,146 +0,0 @@
-# vim: ts=2 sw=2
-# - Try to find the required ffmpeg components(default: AVFORMAT, AVUTIL, AVCODEC)
-#
-# Once done this will define
-#  FFMPEG_FOUND         - System has the all required components.
-#  FFMPEG_INCLUDE_DIRS  - Include directory necessary for using the required components headers.
-#  FFMPEG_LIBRARIES     - Link these to use the required ffmpeg components.
-#  FFMPEG_DEFINITIONS   - Compiler switches required for using the required ffmpeg components.
-#
-# For each of the components it will additionally set.
-#   - AVCODEC
-#   - AVDEVICE
-#   - AVFORMAT
-#   - AVUTIL
-#   - POSTPROCESS
-#   - SWSCALE
-# the following variables will be defined
-#  <component>_FOUND        - System has <component>
-#  <component>_INCLUDE_DIRS - Include directory necessary for using the <component> headers
-#  <component>_LIBRARIES    - Link these to use <component>
-#  <component>_DEFINITIONS  - Compiler switches required for using <component>
-#  <component>_VERSION      - The components version
-#
-# SPDX-FileCopyrightText: 2006 Matthias Kretz <kretz@kde.org>
-# SPDX-FileCopyrightText: 2008 Alexander Neundorf <neundorf@kde.org>
-# SPDX-FileCopyrightText: 2011 Michael Jansen <kde@michael-jansen.biz>
-# SPDX-License-Identifier: BSD-3-Clause
-
-include(FindPackageHandleStandardArgs)
-
-# The default components were taken from a survey over other FindFFMPEG.cmake files
-if (NOT FFmpeg_FIND_COMPONENTS)
-  set(FFmpeg_FIND_COMPONENTS AVCODEC AVFORMAT AVUTIL)
-endif ()
-
-#
-### Macro: set_component_found
-#
-# Marks the given component as found if both *_LIBRARIES AND *_INCLUDE_DIRS is present.
-#
-macro(set_component_found _component )
-  if (${_component}_LIBRARIES AND ${_component}_INCLUDE_DIRS)
-    # message(STATUS "  - ${_component} found.")
-    set(${_component}_FOUND TRUE)
-  else ()
-    # message(STATUS "  - ${_component} not found.")
-  endif ()
-endmacro()
-
-#
-### Macro: find_component
-#
-# Checks for the given component by invoking pkgconfig and then looking up the libraries and
-# include directories.
-#
-macro(find_component _component _pkgconfig _library _header)
-
-  if (NOT WIN32)
-     # use pkg-config to get the directories and then use these values
-     # in the FIND_PATH() and FIND_LIBRARY() calls
-     find_package(PkgConfig)
-     if (PKG_CONFIG_FOUND)
-       pkg_check_modules(PC_${_component} ${_pkgconfig})
-     endif ()
-  endif (NOT WIN32)
-
-  find_path(${_component}_INCLUDE_DIRS ${_header}
-    HINTS
-      ${PC_LIB${_component}_INCLUDEDIR}
-      ${PC_LIB${_component}_INCLUDE_DIRS}
-    PATH_SUFFIXES
-      ffmpeg
-  )
-
-  find_library(${_component}_LIBRARIES NAMES ${_library}
-      HINTS
-      ${PC_LIB${_component}_LIBDIR}
-      ${PC_LIB${_component}_LIBRARY_DIRS}
-  )
-
-  set(${_component}_DEFINITIONS  ${PC_${_component}_CFLAGS_OTHER} CACHE STRING "The ${_component} CFLAGS.")
-  set(${_component}_VERSION      ${PC_${_component}_VERSION}      CACHE STRING "The ${_component} version number.")
-
-  set_component_found(${_component})
-
-  mark_as_advanced(
-    ${_component}_INCLUDE_DIRS
-    ${_component}_LIBRARIES
-    ${_component}_DEFINITIONS
-    ${_component}_VERSION)
-
-endmacro()
-
-
-# Check for cached results. If there are skip the costly part.
-if (NOT FFMPEG_LIBRARIES)
-
-  # Check for all possible component.
-  find_component(AVCODEC  libavcodec  avcodec  libavcodec/avcodec.h)
-  find_component(AVFORMAT libavformat avformat libavformat/avformat.h)
-  find_component(AVDEVICE libavdevice avdevice libavdevice/avdevice.h)
-  find_component(AVUTIL   libavutil   avutil   libavutil/avutil.h)
-  find_component(SWSCALE  libswscale  swscale  libswscale/swscale.h)
-  find_component(POSTPROC libpostproc postproc libpostproc/postprocess.h)
-
-  # Check if the required components were found and add their stuff to the FFMPEG_* vars.
-  foreach (_component ${FFmpeg_FIND_COMPONENTS})
-    if (${_component}_FOUND)
-      # message(STATUS "Required component ${_component} present.")
-      set(FFMPEG_LIBRARIES   ${FFMPEG_LIBRARIES}   ${${_component}_LIBRARIES})
-      set(FFMPEG_DEFINITIONS ${FFMPEG_DEFINITIONS} ${${_component}_DEFINITIONS})
-      list(APPEND FFMPEG_INCLUDE_DIRS ${${_component}_INCLUDE_DIRS})
-    else ()
-      # message(STATUS "Required component ${_component} missing.")
-    endif ()
-  endforeach ()
-
-  # Build the include path with duplicates removed.
-  if (FFMPEG_INCLUDE_DIRS)
-    list(REMOVE_DUPLICATES FFMPEG_INCLUDE_DIRS)
-  endif ()
-
-  # cache the vars.
-  set(FFMPEG_INCLUDE_DIRS ${FFMPEG_INCLUDE_DIRS} CACHE STRING "The FFmpeg include directories." FORCE)
-  set(FFMPEG_LIBRARIES    ${FFMPEG_LIBRARIES}    CACHE STRING "The FFmpeg libraries." FORCE)
-  set(FFMPEG_DEFINITIONS  ${FFMPEG_DEFINITIONS}  CACHE STRING "The FFmpeg cflags." FORCE)
-
-  mark_as_advanced(FFMPEG_INCLUDE_DIRS
-                   FFMPEG_LIBRARIES
-                   FFMPEG_DEFINITIONS)
-
-endif ()
-
-# Now set the noncached _FOUND vars for the components.
-foreach (_component AVCODEC AVDEVICE AVFORMAT AVUTIL POSTPROCESS SWSCALE)
-  set_component_found(${_component})
-endforeach ()
-
-# Compile the list of required vars
-set(_FFmpeg_REQUIRED_VARS FFMPEG_LIBRARIES FFMPEG_INCLUDE_DIRS)
-foreach (_component ${FFmpeg_FIND_COMPONENTS})
-  list(APPEND _FFmpeg_REQUIRED_VARS ${_component}_LIBRARIES ${_component}_INCLUDE_DIRS)
-endforeach ()
-
-# Give a nice error message if some of the required vars are missing.
-find_package_handle_standard_args(FFmpeg DEFAULT_MSG ${_FFmpeg_REQUIRED_VARS})
diff --git a/config-k3b.h.cmake b/config-k3b.h.cmake
index f2a6fe20e..3d48241f9 100644
--- a/config-k3b.h.cmake
+++ b/config-k3b.h.cmake
@@ -26,14 +26,3 @@
 
 #cmakedefine HAVE_ICONV
 #cmakedefine ICONV_SECOND_ARGUMENT_IS_CONST
-
-#cmakedefine HAVE_FFMPEG_AVFORMAT_OPEN_INPUT
-#cmakedefine HAVE_FFMPEG_AV_DUMP_FORMAT
-#cmakedefine HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO
-#cmakedefine HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT
-#cmakedefine HAVE_FFMPEG_AVCODEC_OPEN2
-#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO2
-#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO3
-#cmakedefine HAVE_FFMPEG_AVCODEC_DECODE_AUDIO4
-#cmakedefine HAVE_FFMPEG_AVMEDIA_TYPE
-#cmakedefine HAVE_FFMPEG_CODEC_MP3
diff --git a/plugins/decoder/CMakeLists.txt b/plugins/decoder/CMakeLists.txt
index bb3b01c76..e09250e94 100644
--- a/plugins/decoder/CMakeLists.txt
+++ b/plugins/decoder/CMakeLists.txt
@@ -6,10 +6,6 @@ if(BUILD_OGGVORBIS_DECODER_PLUGIN)
     add_subdirectory(ogg)
 endif()
 
-if(BUILD_FFMPEG_DECODER_PLUGIN)
-    add_subdirectory(ffmpeg)
-endif()
-
 if(BUILD_FLAC_DECODER_PLUGIN)
     add_subdirectory(flac)
 endif()
diff --git a/plugins/decoder/ffmpeg/CMakeLists.txt b/plugins/decoder/ffmpeg/CMakeLists.txt
deleted file mode 100644
index 8df86d4a1..000000000
--- a/plugins/decoder/ffmpeg/CMakeLists.txt
+++ /dev/null
@@ -1,14 +0,0 @@
-kcoreaddons_add_plugin(k3bffmpegdecoder
-    SOURCES k3bffmpegdecoder.cpp k3bffmpegwrapper.cpp
-    INSTALL_NAMESPACE "k3b")
-
-if(FFMPEG_INCLUDE_DIR_OLD_STYLE)
-    message(STATUS "didn't find new ffmpegcodecpath")
-    target_include_directories(k3bffmpegdecoder PRIVATE ${FFMPEG_INCLUDE_DIR_OLD_STYLE})
-else()
-    message(STATUS "found new ffmpegcodecpath")
-    target_compile_definitions(k3bffmpegdecoder PRIVATE NEWFFMPEGAVCODECPATH)
-    target_include_directories(k3bffmpegdecoder PRIVATE ${FFMPEG_INCLUDE_DIR} ${FFMPEG_INCLUDE_DIRS})
-endif()
-
-target_link_libraries(k3bffmpegdecoder k3bdevice k3blib KF5::I18n ${FFMPEG_LIBRARIES})
diff --git a/plugins/decoder/ffmpeg/k3bffmpegdecoder.cpp b/plugins/decoder/ffmpeg/k3bffmpegdecoder.cpp
deleted file mode 100644
index c27fa6996..000000000
--- a/plugins/decoder/ffmpeg/k3bffmpegdecoder.cpp
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
-    SPDX-FileCopyrightText: 1998-2008 Sebastian Trueg <trueg@k3b.org>
-
-    SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#include "k3bffmpegdecoder.h"
-#include "k3bffmpegwrapper.h"
-
-#include <config-k3b.h>
-
-#include <QDebug>
-
-extern "C" {
-/*
- Recent versions of FFmpeg uses C99 constant macros which are not present in C++ standard.
- The macro __STDC_CONSTANT_MACROS allow C++ to use these macros. Although it's not defined by C++ standard
- it's supported by many implementations.
- See bug 236036 and discussion: https://lists.ffmpeg.org/pipermail/ffmpeg-devel/2010-May/095488.html
- */
-#define __STDC_CONSTANT_MACROS
-#ifdef NEWFFMPEGAVCODECPATH
-#include <libavcodec/avcodec.h>
-#else
-#include <ffmpeg/avcodec.h>
-#endif
-}
-
-#include <math.h>
-
-K_PLUGIN_CLASS_WITH_JSON(K3bFFMpegDecoderFactory, "k3bffmpegdecoder.json")
-
-K3bFFMpegDecoderFactory::K3bFFMpegDecoderFactory( QObject* parent, const QVariantList& )
-    : K3b::AudioDecoderFactory( parent )
-{
-}
-
-
-K3bFFMpegDecoderFactory::~K3bFFMpegDecoderFactory()
-{
-}
-
-
-K3b::AudioDecoder* K3bFFMpegDecoderFactory::createDecoder( QObject* parent ) const
-{
-    return new K3bFFMpegDecoder( parent);
-}
-
-
-bool K3bFFMpegDecoderFactory::canDecode( const QUrl& url )
-{
-    K3bFFMpegFile* file = K3bFFMpegWrapper::instance()->open( url.toLocalFile() );
-    if( file ) {
-        delete file;
-        return true;
-    }
-    else {
-        return false;
-    }
-}
-
-
-
-
-
-
-K3bFFMpegDecoder::K3bFFMpegDecoder( QObject* parent  )
-    : K3b::AudioDecoder( parent ),
-      m_file(0)
-{
-}
-
-
-K3bFFMpegDecoder::~K3bFFMpegDecoder()
-{
-}
-
-
-QString K3bFFMpegDecoder::fileType() const
-{
-    return m_type;
-}
-
-
-bool K3bFFMpegDecoder::analyseFileInternal( K3b::Msf& frames, int& samplerate, int& ch )
-{
-    m_file = K3bFFMpegWrapper::instance()->open( filename() );
-    if( m_file ) {
-
-        // TODO: call addTechnicalInfo
-
-        addMetaInfo( META_TITLE, m_file->title() );
-        addMetaInfo( META_ARTIST, m_file->author() );
-        addMetaInfo( META_COMMENT, m_file->comment() );
-
-        samplerate = m_file->sampleRate();
-        ch = m_file->channels();
-        m_type = m_file->typeComment();
-        frames = m_file->length();
-
-        // ffmpeg's length information is not reliable at all
-        // so we have to decode the whole file in order to get the correct length
-//     char buffer[10*2048];
-//     int len = 0;
-//     unsigned long long bytes = 0;
-//     while( ( len = m_file->read( buffer, 10*2048 ) ) > 0 )
-//       bytes += len;
-
-//     frames = (unsigned long)ceil((double)bytes/2048.0);
-
-        // cleanup;
-        delete m_file;
-        m_file = 0;
-
-        return true;
-    }
-    else
-        return false;
-}
-
-
-bool K3bFFMpegDecoder::initDecoderInternal()
-{
-    if( !m_file )
-        m_file = K3bFFMpegWrapper::instance()->open( filename() );
-
-    return (m_file != 0);
-}
-
-
-void K3bFFMpegDecoder::cleanup()
-{
-    delete m_file;
-    m_file = 0;
-}
-
-
-bool K3bFFMpegDecoder::seekInternal( const K3b::Msf& msf )
-{
-    if( msf == 0 )
-        return initDecoderInternal();
-    else
-        return m_file->seek( msf );
-}
-
-
-int K3bFFMpegDecoder::decodeInternal( char* _data, int maxLen )
-{
-    return m_file->read( _data, maxLen );
-}
-
-
-#include "k3bffmpegdecoder.moc"
diff --git a/plugins/decoder/ffmpeg/k3bffmpegdecoder.h b/plugins/decoder/ffmpeg/k3bffmpegdecoder.h
deleted file mode 100644
index b2733bf88..000000000
--- a/plugins/decoder/ffmpeg/k3bffmpegdecoder.h
+++ /dev/null
@@ -1,57 +0,0 @@
-/* 
-    SPDX-FileCopyrightText: 1998-2008 Sebastian Trueg <trueg@k3b.org>
-
-    SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#ifndef _K3B_FFMPEG_DECODER_H_
-#define _K3B_FFMPEG_DECODER_H_
-
-#include "k3baudiodecoder.h"
-
-class K3bFFMpegFile;
-
-
-class K3bFFMpegDecoderFactory : public K3b::AudioDecoderFactory
-{
-    Q_OBJECT
-
-public:
-    K3bFFMpegDecoderFactory( QObject* parent, const QVariantList& args  );
-    ~K3bFFMpegDecoderFactory() override;
-
-    bool canDecode( const QUrl& filename ) override;
-
-    int pluginSystemVersion() const override { return K3B_PLUGIN_SYSTEM_VERSION; }
-
-    bool multiFormatDecoder() const override { return true; }
-
-    K3b::AudioDecoder* createDecoder( QObject* parent = 0  ) const override;
-};
-
-
-class K3bFFMpegDecoder : public K3b::AudioDecoder
-{
-    Q_OBJECT
-
-public:
-    explicit K3bFFMpegDecoder( QObject* parent = 0  );
-    ~K3bFFMpegDecoder() override;
-
-    QString fileType() const override;
-
-    void cleanup() override;
-
-protected:
-    bool analyseFileInternal( K3b::Msf& frames, int& samplerate, int& ch ) override;
-    bool initDecoderInternal() override;
-    bool seekInternal( const K3b::Msf& ) override;
-
-    int decodeInternal( char* _data, int maxLen ) override;
-
-private:
-    K3bFFMpegFile* m_file;
-    QString m_type;
-};
-
-#endif
diff --git a/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp b/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp
deleted file mode 100644
index f307c6094..000000000
--- a/plugins/decoder/ffmpeg/k3bffmpegwrapper.cpp
+++ /dev/null
@@ -1,427 +0,0 @@
-/*
-    SPDX-FileCopyrightText: 1998-2008 Sebastian Trueg <trueg@k3b.org>
-    SPDX-License-Identifier: GPL-2.0-or-later
-*/
-#include "k3bffmpegwrapper.h"
-#include "k3bplugin_i18n.h"
-
-#include <config-k3b.h>
-
-extern "C" {
-/*
- Recent versions of FFmpeg uses C99 constant macros which are not present in C++ standard.
- The macro __STDC_CONSTANT_MACROS allow C++ to use these macros. Although it's not defined by C++ standard
- it's supported by many implementations.
- See bug 236036 and discussion: https://lists.ffmpeg.org/pipermail/ffmpeg-devel/2010-May/095488.html
- */
-#define __STDC_CONSTANT_MACROS
-#ifdef NEWFFMPEGAVCODECPATH
-#include <libavcodec/avcodec.h>
-#include <libavformat/avformat.h>
-#else
-#include <ffmpeg/avcodec.h>
-#include <ffmpeg/avformat.h>
-#endif
-}
-
-#include <string.h>
-#include <math.h>
-
-
-#define FFMPEG_CODEC(s) (s->codec)
-
-#ifndef HAVE_FFMPEG_AVFORMAT_OPEN_INPUT
-//      this works because the parameters/options are not used
-#  define avformat_open_input(c,s,f,o) av_open_input_file(c,s,f,0,o)
-#endif
-#ifndef HAVE_FFMPEG_AV_DUMP_FORMAT
-#  define av_dump_format(c,x,f,y) dump_format(c,x,f,y)
-#endif
-#ifndef HAVE_FFMPEG_AVFORMAT_FIND_STREAM_INFO
-#  define avformat_find_stream_info(c,o) av_find_stream_info(c)
-#endif
-#ifndef HAVE_FFMPEG_AVFORMAT_CLOSE_INPUT
-#  define avformat_close_input(c) av_close_input_file(*c)
-#endif
-#ifndef HAVE_FFMPEG_AVCODEC_OPEN2
-#  define avcodec_open2(a,c,o) avcodec_open(a,c)
-#endif
-#ifndef HAVE_FFMPEG_AVMEDIA_TYPE
-#  define AVMEDIA_TYPE_AUDIO CODEC_TYPE_AUDIO
-#endif
-#ifndef HAVE_FFMPEG_CODEC_MP3
-#  define CODEC_ID_MP3 CODEC_ID_MP3LAME
-#endif
-
-K3bFFMpegWrapper* K3bFFMpegWrapper::s_instance = 0;
-
-
-class K3bFFMpegFile::Private
-{
-public:
-    ::AVFormatContext* formatContext;
-    ::AVCodec* codec;
-    ::AVStream *audio_stream;
-
-    K3b::Msf length;
-
-    // for decoding. ffmpeg requires 16-byte alignment.
-    ::AVFrame* frame;
-    char* outputBufferPos;
-    int outputBufferSize;
-    ::AVPacket packet;
-    quint8* packetData;
-    int packetSize;
-    bool isSpacious;
-    int sampleFormat;
-};
-
-
-K3bFFMpegFile::K3bFFMpegFile( const QString& filename )
-    : m_filename(filename)
-{
-    d = new Private;
-    d->formatContext = 0;
-    d->codec = 0;
-    d->audio_stream = nullptr;
-    d->frame = av_frame_alloc();
-}
-
-
-K3bFFMpegFile::~K3bFFMpegFile()
-{
-    close();
-    av_frame_free(&d->frame);
-    delete d;
-}
-
-
-bool K3bFFMpegFile::open()
-{
-    close();
-
-    // open the file
-    int err = ::avformat_open_input( &d->formatContext, m_filename.toLocal8Bit(), 0, 0 );
-    if( err < 0 ) {
-        qDebug() << "(K3bFFMpegFile) unable to open " << m_filename << " with error " << err;
-        return false;
-    }
-
-    // analyze the streams
-    ::avformat_find_stream_info( d->formatContext, 0 );
-
-    // we only handle files containing one audio stream
-    if( d->formatContext->nb_streams == 1 ) {
-        d->audio_stream = d->formatContext->streams[0];
-    } else  {
-        for (uint i = 0; i < d->formatContext->nb_streams; ++i) {
-            if (d->formatContext->streams[i]->codecpar->codec_type == AVMEDIA_TYPE_AUDIO) {
-                if (!d->audio_stream) {
-                    d->audio_stream = d->formatContext->streams[i];
-                } else {
-                    d->audio_stream = nullptr;
-                    qDebug() << "(K3bFFMpegFile) more than one audio stream in " << m_filename;
-                    return false;
-                }
-            }
-        }
-    }
-
-    // urgh... ugly
-    ::AVCodecContext* codecContext =  FFMPEG_CODEC(d->audio_stream);
-    if( codecContext->codec_type != AVMEDIA_TYPE_AUDIO)
-    {
-        qDebug() << "(K3bFFMpegFile) not a simple audio stream: " << m_filename;
-        return false;
-    }
-
-    // get the codec
-    d->codec = ::avcodec_find_decoder(codecContext->codec_id);
-    if( !d->codec ) {
-        qDebug() << "(K3bFFMpegFile) no codec found for " << m_filename;
-        return false;
-    }
-
-    // open the codec on our context
-    qDebug() << "(K3bFFMpegFile) found codec for " << m_filename;
-    if( ::avcodec_open2( codecContext, d->codec, 0 ) < 0 ) {
-        qDebug() << "(K3bFFMpegDecoderFactory) could not open codec.";
-        return false;
-    }
-
-    // determine the length of the stream
-    d->length = K3b::Msf::fromSeconds( (double)d->formatContext->duration / (double)AV_TIME_BASE );
-
-    if( d->length == 0 ) {
-        qDebug() << "(K3bFFMpegDecoderFactory) invalid length.";
-        return false;
-    }
-
-    d->sampleFormat = d->audio_stream->codecpar->format;
-    d->isSpacious = ::av_sample_fmt_is_planar((AVSampleFormat)d->sampleFormat) && d->audio_stream->codecpar->channels > 1;
-
-    // dump some debugging info
-    ::av_dump_format( d->formatContext, 0, m_filename.toLocal8Bit(), 0 );
-
-    return true;
-}
-
-
-void K3bFFMpegFile::close()
-{
-    d->outputBufferSize = 0;
-    d->packetSize = 0;
-    d->packetData = 0;
-
-    if( d->codec ) {
-        ::avcodec_close( FFMPEG_CODEC(d->audio_stream) );
-        d->codec = 0;
-    }
-
-    if( d->formatContext ) {
-        ::avformat_close_input( &d->formatContext );
-        d->formatContext = 0;
-    }
-
-    d->audio_stream = nullptr;
-}
-
-
-K3b::Msf K3bFFMpegFile::length() const
-{
-    return d->length;
-}
-
-
-int K3bFFMpegFile::sampleRate() const
-{
-    return d->audio_stream->codecpar->sample_rate;
-}
-
-
-int K3bFFMpegFile::channels() const
-{
-    return d->audio_stream->codecpar->channels;
-}
-
-
-int K3bFFMpegFile::type() const
-{
-    return d->audio_stream->codecpar->codec_id;
-}
-
-
-QString K3bFFMpegFile::typeComment() const
-{
-    switch( type() ) {
-    case AV_CODEC_ID_WMAV1:
-        return i18n("Windows Media v1");
-    case AV_CODEC_ID_WMAV2:
-        return i18n("Windows Media v2");
-    case AV_CODEC_ID_WAVPACK:
-        return i18n("WavPack");
-    case AV_CODEC_ID_APE:
-        return i18n("Monkey's Audio (APE)");
-    case AV_CODEC_ID_AAC:
-        return i18n("Advanced Audio Coding (AAC)");
-    default:
-        return QString::fromLocal8Bit( d->codec->name );
-    }
-}
-
-
-QString K3bFFMpegFile::title() const
-{
-    // FIXME: is this UTF8 or something??
-    AVDictionaryEntry *ade = av_dict_get( d->formatContext->metadata, "TITLE", NULL, 0 );
-    return ade && ade->value && ade->value[0] != '\0' ? QString::fromLocal8Bit( ade->value ) : QString();
-}
-
-
-QString K3bFFMpegFile::author() const
-{
-    // FIXME: is this UTF8 or something??
-    AVDictionaryEntry *ade = av_dict_get( d->formatContext->metadata, "ARTIST", NULL, 0 );
-    return ade && ade->value && ade->value[0] != '\0' ? QString::fromLocal8Bit( ade->value ) : QString();
-}
-
-
-QString K3bFFMpegFile::comment() const
-{
-    // FIXME: is this UTF8 or something??
-    AVDictionaryEntry *ade = av_dict_get( d->formatContext->metadata, "COMMENT", NULL, 0 );
-    return ade && ade->value && ade->value[0] != '\0' ? QString::fromLocal8Bit( ade->value ) : QString();
-}
-
-
-int K3bFFMpegFile::read(char* buf, int bufLen)
-{
-    if (!buf || !d->outputBufferPos)
-        return -1;
-
-    int ret = fillOutputBuffer();
-    if (ret <= 0) {
-        return ret;
-    }
-
-    int len = qMin(bufLen, d->outputBufferSize);
-    ::memcpy(buf, d->outputBufferPos, len);
-
-    if(d->isSpacious && bufLen > d->outputBufferSize)
-        delete[] d->outputBufferPos; // clean up allocated space
-
-    // TODO: only swap if needed
-    for(int i=0; i<len-1; i+=2)
-        qSwap(buf[i], buf[i+1]); // BE -> LE
-
-    d->outputBufferSize -= len;
-    if(d->outputBufferSize > 0)
-        d->outputBufferPos += len;
-    return len;
-}
-
-
-// fill d->packetData with data to decode
-int K3bFFMpegFile::readPacket()
-{
-    if( d->packetSize <= 0 ) {
-        ::av_init_packet( &d->packet );
-
-        if( ::av_read_frame( d->formatContext, &d->packet ) < 0 ) {
-            return 0;
-        }
-        d->packetSize = d->packet.size;
-        d->packetData = d->packet.data;
-    }
-
-    return d->packetSize;
-}
-
-
-// decode data in d->packetData and fill d->outputBuffer
-int K3bFFMpegFile::fillOutputBuffer()
-{
-    // decode if the output buffer is empty
-    while(d->outputBufferSize <= 0) {
-
-        // make sure we have data to decode
-        if( readPacket() == 0 ) {
-            return 0;
-        }
-
-        int gotFrame = 0;
-        int len = ::avcodec_decode_audio4(
-            FFMPEG_CODEC(d->audio_stream),
-            d->frame,
-            &gotFrame,
-            &d->packet );
-
-        if( d->packetSize <= 0 || len < 0 )
-            ::av_packet_unref( &d->packet );
-        if( len < 0 ) {
-            qDebug() << "(K3bFFMpegFile) decoding failed for " << m_filename;
-            return -1;
-        }
-
-        if (gotFrame) {
-            int nb_s = d->frame->nb_samples;
-            int nb_ch = 2; // copy only two channels even if there're more
-            d->outputBufferSize = nb_s * nb_ch * 2; // 2 means 2 bytes (16bit)
-            d->outputBufferPos = reinterpret_cast<char*>(
-                d->frame->extended_data[0]);
-            if(d->isSpacious) {
-                d->outputBufferPos = new char[d->outputBufferSize];
-                if(d->sampleFormat == AV_SAMPLE_FMT_FLTP) {
-                    int width = sizeof(float); // sample width of float audio
-                    for(int sample=0; sample<nb_s; sample++) {
-                        for(int ch=0; ch<nb_ch; ch++) {
-                            float val = *(reinterpret_cast<float*>(
-                                d->frame->extended_data[ch] + sample * width));
-                            val = ::abs(val) > 1 ? ::copysign(1.0, val) : val;
-                            int16_t result = static_cast<int16_t>(
-                                val * 32767.0 + 32768.5) - 32768;
-                            ::memcpy(d->outputBufferPos + (sample*nb_ch+ch) * 2,
-                                     &result,
-                                     2); // 2 is sample width of 16 bit audio
-                        }
-                    }
-                } else {
-                    for(int sample=0; sample<nb_s; sample++) {
-                        for(int ch=0; ch<nb_ch; ch++) {
-                            ::memcpy(d->outputBufferPos + (sample*nb_ch+ch) * 2,
-                                     d->frame->extended_data[ch] + sample * 2,
-                                     2); // 16 bit here as well
-                        }
-                    }
-                }
-            }
-        }
-        d->packetSize -= len;
-        d->packetData += len;
-    }
-
-    return d->outputBufferSize;
-}
-
-
-bool K3bFFMpegFile::seek( const K3b::Msf& msf )
-{
-    d->outputBufferSize = 0;
-    d->packetSize = 0;
-
-    double seconds = (double)msf.totalFrames()/75.0;
-    quint64 timestamp = (quint64)(seconds * (double)AV_TIME_BASE);
-
-    // FIXME: do we really need the start_time and why?
-    return ( ::av_seek_frame( d->formatContext, -1, timestamp + d->formatContext->start_time, 0 ) >= 0 );
-}
-
-
-
-
-
-
-K3bFFMpegWrapper::K3bFFMpegWrapper()
-{
-    ::av_register_all();
-}
-
-
-K3bFFMpegWrapper::~K3bFFMpegWrapper()
-{
-    s_instance = 0;
-}
-
-
-K3bFFMpegWrapper* K3bFFMpegWrapper::instance()
-{
-    if( !s_instance ) {
-        s_instance = new K3bFFMpegWrapper();
-    }
-
-    return s_instance;
-}
-
-
-K3bFFMpegFile* K3bFFMpegWrapper::open( const QString& filename ) const
-{
-    K3bFFMpegFile* file = new K3bFFMpegFile( filename );
-    if( file->open() ) {
-#ifndef K3B_FFMPEG_ALL_CODECS
-        //
-        // only allow tested formats. ffmpeg seems not to be too reliable with every format.
-        // mp3 being one of them sadly. Most importantly: allow the libsndfile decoder to do
-        // its thing.
-        //
-        if( file->type() == AV_CODEC_ID_WMAV1 ||
-            file->type() == AV_CODEC_ID_WMAV2 ||
-            file->type() == AV_CODEC_ID_AAC ||
-            file->type() == AV_CODEC_ID_APE ||
-            file->type() == AV_CODEC_ID_WAVPACK )
-#endif
-            return file;
-    }
-
-    delete file;
-    return 0;
-}
diff --git a/plugins/decoder/ffmpeg/k3bffmpegwrapper.h b/plugins/decoder/ffmpeg/k3bffmpegwrapper.h
deleted file mode 100644
index 7a2cc43a3..000000000
--- a/plugins/decoder/ffmpeg/k3bffmpegwrapper.h
+++ /dev/null
@@ -1,73 +0,0 @@
-/* 
-    SPDX-FileCopyrightText: 1998-2007 Sebastian Trueg <trueg@k3b.org>
-    SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#ifndef _K3B_FFMPEG_WRAPPER_H_
-#define _K3B_FFMPEG_WRAPPER_H_
-
-#include "k3bmsf.h"
-
-/**
- * Create with K3bFFMpegWrapper::open
- */
-class K3bFFMpegFile
-{
-  friend class K3bFFMpegWrapper;
-
- public:
-  ~K3bFFMpegFile();
-
-  const QString& filename() const { return m_filename; }
-
-  bool open();
-  void close();
-
-  K3b::Msf length() const;
-  int sampleRate() const;
-  int channels() const;
-
-  /**
-   * ffmpeg internal enumeration
-   */
-  int type() const;
-  QString typeComment() const;
-
-  QString title() const;
-  QString author() const;
-  QString comment() const;
-
-  int read( char* buf, int bufLen );
-  bool seek( const K3b::Msf& );
-
- private:
-  explicit K3bFFMpegFile( const QString& filename );
-  int readPacket();
-  int fillOutputBuffer();
-
-  QString m_filename;
-
-  class Private;
-  Private* d;
-};
-
-
-class K3bFFMpegWrapper
-{
- public:
-  ~K3bFFMpegWrapper();
-
-  /**
-   * returns 0 on failure.
-   */
-  K3bFFMpegFile* open( const QString& filename ) const;
-
-  static K3bFFMpegWrapper* instance();
-
- private:
-  K3bFFMpegWrapper();
-
-  static K3bFFMpegWrapper* s_instance;
-};
-
-#endif
-- 
2.36.0


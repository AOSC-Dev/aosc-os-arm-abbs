From 52ea9ac45899789498991cf327b2f1d125d91c50 Mon Sep 17 00:00:00 2001
From: Johan Engelen <jbc.engelen@gmail.com>
Date: Sat, 25 Nov 2023 14:07:22 +0100
Subject: [PATCH 05/17] Fix tests to support opaque pointers

---
 tests/codegen/lifetime_local_variables.d | 42 ++++++++++++------------
 tests/codegen/newlib_assert.d            |  2 +-
 2 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/tests/codegen/lifetime_local_variables.d b/tests/codegen/lifetime_local_variables.d
index 5036da5f01..40b8ede819 100644
--- a/tests/codegen/lifetime_local_variables.d
+++ b/tests/codegen/lifetime_local_variables.d
@@ -9,19 +9,19 @@ void foo_array_foo() {
     // CHECK: alloca [400 x i8]
     // CHECK: alloca [800 x i8]
     {
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 400
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 400
         byte[400] arr = void;
         // CHECK: call void @opaque
         opaque(&arr[0]);
-        // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 400
+        // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 400
     }
 
     {
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 800
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 800
         byte[800] arr = void;
         // CHECK: call void @opaque
         opaque(&arr[0]);
-        // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 800
+        // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 800
     }
 
     // CHECK-LABEL: ret void
@@ -34,16 +34,16 @@ void foo_forloop_foo() {
     // This call should appear before lifetime start of while-loop variable.
     opaque(&i);
     for (byte[13] d; d[0] < 2; d[0]++) {
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 13
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 13
         // Lifetime should start before initializing the variable
-        // CHECK: call void @llvm.memset.p0i8.i{{.*}}13
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 44
+        // CHECK: call void @llvm.memset.p0{{(i8)?}}.i{{.*}}13
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 44
         byte[44] arr = void;
         // CHECK: call void @opaque
         opaque(&arr[0]);
-        // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 44
+        // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 44
         // CHECK: endfor:
-        // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 13
+        // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 13
     }
 
     // CHECK-LABEL: ret void
@@ -56,15 +56,15 @@ void foo_whileloop_foo() {
     // This call should appear before lifetime start of while-loop variable.
     opaque(&i);
     while (ulong d = 131) {
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 8
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 8
         // Lifetime should start before initializing the variable
         // CHECK: store i64 131
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 33
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 33
         byte[33] arr = void;
         // CHECK: call void @opaque
         opaque(&arr[0]);
-        // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 33
-        // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 8
+        // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 33
+        // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 8
     }
 
     // CHECK-LABEL: ret void
@@ -76,25 +76,25 @@ void foo_if_foo() {
     // CHECK: call void @opaque
     // This call should appear before lifetime start of if-statement condition variable.
     opaque(&i);
-    // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 8
+    // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 8
     // Lifetime should start before initializing the variable
     // CHECK: store i64 565
     if (ulong d = 565) {
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 72
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 72
         byte[72] arr = void;
         // CHECK: call void @opaque
         opaque(&arr[0]);
-        // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 72
+        // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 72
     } else {
         // d is out of scope here.
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 51
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 51
         byte[51] arr = void;
         // CHECK: call void @opaque
         opaque(&arr[0]);
-        // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 51
+        // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 51
     }
     // CHECK: endif:
-    // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 8
+    // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 8
 
     // CHECK-LABEL: ret void
 }
@@ -111,12 +111,12 @@ void opaque_S(S* i);
 // CHECK-LABEL: define void @foo_struct_foo()
 void foo_struct_foo() {
     {
-        // CHECK: call void @llvm.lifetime.start.p0i8(i64 immarg 123
+        // CHECK: call void @llvm.lifetime.start.p0{{(i8)?}}(i64 immarg 123
         S s;
         // CHECK: invoke void @opaque_S
         opaque_S(&s);
     }
 
-    // CHECK: call void @llvm.lifetime.end.p0i8(i64 immarg 123
+    // CHECK: call void @llvm.lifetime.end.p0{{(i8)?}}(i64 immarg 123
     // CHECK-NEXT: ret void
 }
diff --git a/tests/codegen/newlib_assert.d b/tests/codegen/newlib_assert.d
index 56702c80a2..6695111508 100644
--- a/tests/codegen/newlib_assert.d
+++ b/tests/codegen/newlib_assert.d
@@ -5,4 +5,4 @@ extern (C) void main()
     assert(false);
 }
 
-// CHECK: declare void @__assert_func(i8*, i32, i8*, i8*)
+// CHECK: declare void @__assert_func({{i8\*|ptr}}, i32, {{i8\*|ptr}}, {{i8\*|ptr}})
-- 
2.39.1


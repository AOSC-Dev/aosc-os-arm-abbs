From 59e214f6e37951086714228d2c0fe2b010839d58 Mon Sep 17 00:00:00 2001
From: liushuyu <liushuyu011@gmail.com>
Date: Sat, 16 Sep 2023 14:38:25 -0600
Subject: [PATCH 1/3] driver, abi: add initial support for LoongArch64

---
 driver/main.cpp          |  8 +++++
 driver/targetmachine.cpp | 26 ++++++++++++++
 driver/tool.cpp          |  2 ++
 gen/abi/abi.cpp          |  2 ++
 gen/abi/loongarch64.cpp  | 73 ++++++++++++++++++++++++++++++++++++++++
 gen/abi/targets.h        |  2 +-
 gen/target.cpp           |  1 +
 7 files changed, 113 insertions(+), 1 deletion(-)
 create mode 100644 gen/abi/loongarch64.cpp

diff --git a/driver/main.cpp b/driver/main.cpp
index da570b96ad..ed66484afa 100644
--- a/driver/main.cpp
+++ b/driver/main.cpp
@@ -765,6 +765,14 @@ void registerPredefinedTargetVersions() {
   case llvm::Triple::wasm64:
     VersionCondition::addPredefinedGlobalIdent("WebAssembly");
     break;
+  case llvm::Triple::loongarch32:
+    VersionCondition::addPredefinedGlobalIdent("LoongArch32");
+    registerPredefinedFloatABI("LoongArch_SoftFloat", "LoongArch_HardFloat");
+    break;
+  case llvm::Triple::loongarch64:
+    VersionCondition::addPredefinedGlobalIdent("LoongArch64");
+    registerPredefinedFloatABI("LoongArch_SoftFloat", "LoongArch_HardFloat");
+    break;
   default:
     warning(Loc(), "unknown target CPU architecture: %s",
             triple.getArchName().str().c_str());
diff --git a/driver/targetmachine.cpp b/driver/targetmachine.cpp
index b454fa2c8e..c52c15bcf9 100644
--- a/driver/targetmachine.cpp
+++ b/driver/targetmachine.cpp
@@ -117,6 +117,14 @@ const char *getABI(const llvm::Triple &triple, const llvm::SmallVectorImpl<llvm:
       if (ABIName.startswith("ilp32"))
         return "ilp32";
       break;
+    case llvm::Triple::loongarch64:
+      if (ABIName.startswith("lp64f"))
+        return "lp64f";
+      if (ABIName.startswith("lp64d"))
+        return "lp64d";
+      if (ABIName.startswith("lp64s"))
+        return "lp64s";
+      break;
     default:
       break;
     }
@@ -140,6 +148,12 @@ const char *getABI(const llvm::Triple &triple, const llvm::SmallVectorImpl<llvm:
     return "lp64";
   case llvm::Triple::riscv32:
     return "ilp32";
+  case llvm::Triple::loongarch64:
+    if (isFeatureEnabled(features, "d"))
+      return "lp64d";
+    if (isFeatureEnabled(features, "f"))
+      return "lp64f";
+    return "lp64d";
   default:
     return "";
   }
@@ -237,6 +251,10 @@ static std::string getRiscv64TargetCPU(const llvm::Triple &triple) {
   return "generic-rv64";
 }
 
+static std::string getLoongArch64TargetCPU(const llvm::Triple &triple) {
+  return "generic-la64";
+}
+
 /// Returns the LLVM name of the default CPU for the provided target triple.
 static std::string getTargetCPU(const llvm::Triple &triple) {
   switch (triple.getArch()) {
@@ -258,6 +276,8 @@ static std::string getTargetCPU(const llvm::Triple &triple) {
     return getRiscv32TargetCPU(triple);
   case llvm::Triple::riscv64:
     return getRiscv64TargetCPU(triple);
+  case llvm::Triple::loongarch64:
+    return getLoongArch64TargetCPU(triple);
   }
 }
 
@@ -468,6 +488,12 @@ createTargetMachine(const std::string targetTriple, const std::string arch,
     }
   }
 
+  // For LoongArch 64-bit target default to la64 if nothing has been selected
+  // All current LoongArch targets have 64-bit floating point registers.
+  if (triple.getArch() == llvm::Triple::loongarch64 && features.empty()) {
+    features = {"+d"};
+  }
+
   // Handle cases where LLVM picks wrong default relocModel
 #if LDC_LLVM_VER >= 1600
   if (relocModel.has_value()) {}
diff --git a/driver/tool.cpp b/driver/tool.cpp
index dea42d05a5..841de0b41c 100644
--- a/driver/tool.cpp
+++ b/driver/tool.cpp
@@ -93,6 +93,8 @@ void appendTargetArgsForGcc(std::vector<std::string> &args) {
   case Triple::ppc64le:
   case Triple::sparcv9:
   case Triple::nvptx64:
+  case Triple::loongarch32:
+  case Triple::loongarch64:
     args.push_back(triple.isArch64Bit() ? "-m64" : "-m32");
     return;
 
diff --git a/gen/abi/abi.cpp b/gen/abi/abi.cpp
index 8abb49a18c..cafce74945 100644
--- a/gen/abi/abi.cpp
+++ b/gen/abi/abi.cpp
@@ -284,6 +284,8 @@ TargetABI *TargetABI::getTarget() {
   case llvm::Triple::thumb:
   case llvm::Triple::thumbeb:
     return getArmTargetABI();
+  case llvm::Triple::loongarch64:
+    return getLoongArch64TargetABI();
   default:
     Logger::cout() << "WARNING: Unknown ABI, guessing...\n";
     return new UnknownTargetABI;
diff --git a/gen/abi/loongarch64.cpp b/gen/abi/loongarch64.cpp
new file mode 100644
index 0000000000..046c37def1
--- /dev/null
+++ b/gen/abi/loongarch64.cpp
@@ -0,0 +1,73 @@
+//===-- gen/abi-loongarch64.cpp - LoongArch64 ABI description -----------*- C++
+//-*-===//
+//
+//                         LDC â€“ the LLVM D compiler
+//
+// This file is distributed under the BSD-style LDC license. See the LICENSE
+// file for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// ABI spec:
+// https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html
+//
+//===----------------------------------------------------------------------===//
+
+#include "gen/abi/abi.h"
+#include "gen/abi/generic.h"
+#include "gen/dvalue.h"
+#include "gen/irstate.h"
+#include "gen/llvmhelpers.h"
+#include "gen/tollvm.h"
+
+struct LoongArch64TargetABI : TargetABI {
+private:
+  IndirectByvalRewrite indirectByvalRewrite{};
+
+public:
+  auto returnInArg(TypeFunction *tf, bool) -> bool override {
+    if (tf->isref()) {
+      return false;
+    }
+    Type *rt = tf->next->toBasetype();
+    if (!isPOD(rt)) {
+      return true;
+    }
+    // pass by reference when > 2*GRLEN
+    return rt->size() > 16;
+  }
+
+  auto passByVal(TypeFunction *, Type *t) -> bool override {
+    if (!t->size()) {
+      return false;
+    }
+    return t->size() > 16;
+  }
+
+  void rewriteFunctionType(IrFuncTy &fty) override {
+    if (!fty.ret->byref) {
+      rewriteArgument(fty, *fty.ret);
+    }
+
+    for (auto arg : fty.args) {
+      if (!arg->byref) {
+        rewriteArgument(fty, *arg);
+      }
+    }
+  }
+
+  void rewriteArgument(IrFuncTy &fty, IrFuncTyArg &arg) override {
+    if (arg.byref) {
+      return;
+    }
+
+    if (!isPOD(arg.type)) {
+      // non-PODs should be passed in memory
+      indirectByvalRewrite.applyTo(arg);
+      return;
+    }
+  }
+};
+
+// The public getter for abi.cpp
+TargetABI *getLoongArch64TargetABI() { return new LoongArch64TargetABI(); }
diff --git a/gen/abi/targets.h b/gen/abi/targets.h
index b08177be2e..e913b657ca 100644
--- a/gen/abi/targets.h
+++ b/gen/abi/targets.h
@@ -37,4 +37,4 @@ TargetABI *getX86_64TargetABI();
 
 TargetABI *getX86TargetABI();
 
-
+TargetABI *getLoongArch64TargetABI();
diff --git a/gen/target.cpp b/gen/target.cpp
index 6e2499bb1e..ac94d3a253 100644
--- a/gen/target.cpp
+++ b/gen/target.cpp
@@ -59,6 +59,7 @@ llvm::Type *getRealType(const llvm::Triple &triple) {
 
   case Triple::riscv32:
   case Triple::riscv64:
+  case Triple::loongarch64:
     return LLType::getFP128Ty(ctx);
 
   default:
-- 
2.42.0


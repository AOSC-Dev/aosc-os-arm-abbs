From 6cae348cc9e68543de4587f2552542aaaace01da Mon Sep 17 00:00:00 2001
From: WANG Rui <wangrui@loongson.cn>
Date: Thu, 9 May 2024 20:20:05 +0800
Subject: [PATCH 7/7] druntime: Fix backtraces in Fibers for LoongArch

---
 runtime/druntime/src/core/thread/fiber.d |  4 +++-
 runtime/druntime/src/core/threadasm.S    | 25 +++++++++++++++++++++++-
 2 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/runtime/druntime/src/core/thread/fiber.d b/runtime/druntime/src/core/thread/fiber.d
index 592615da63..9f6da1460f 100644
--- a/runtime/druntime/src/core/thread/fiber.d
+++ b/runtime/druntime/src/core/thread/fiber.d
@@ -237,6 +237,8 @@ private
       extern (C) void fiber_switchContext( void** oldp, void* newp ) nothrow @nogc;
       version (AArch64)
           extern (C) void fiber_trampoline() nothrow;
+      version (LoongArch64)
+          extern (C) void fiber_trampoline() nothrow;
   }
   else version (LDC_Windows)
   {
@@ -1893,7 +1895,7 @@ private:
             // Only need to set return address ($r1).  Everything else is fine
             // zero initialized.
             pstack -= size_t.sizeof * 10;    // skip past space reserved for $r22-$r31
-            push (cast(size_t) &fiber_entryPoint);
+            push(cast(size_t) &fiber_trampoline); // see threadasm.S for docs
             pstack += size_t.sizeof;         // adjust sp (newp) above lr
         }
         else version (AsmAArch64_Posix)
diff --git a/runtime/druntime/src/core/threadasm.S b/runtime/druntime/src/core/threadasm.S
index 52d655c663..b81b4e55b5 100644
--- a/runtime/druntime/src/core/threadasm.S
+++ b/runtime/druntime/src/core/threadasm.S
@@ -621,9 +621,10 @@ fiber_switchContext:
  */
  .text
 .globl fiber_switchContext
+.type  fiber_switchContext, %function
 fiber_switchContext:
     .cfi_startproc
-    .cfi_undefined $ra
+    .cfi_undefined 1
     # reserve space on stack
     addi.d  $sp, $sp, -19 * 8
 
@@ -687,6 +688,28 @@ fiber_switchContext:
 
     jr $ra
     .cfi_endproc
+
+/**
+ * When generating any kind of backtrace (gdb, exception handling) for
+ * a function called in a Fiber, we need to tell the unwinder to stop
+ * at our Fiber main entry point, i.e. we need to mark the bottom of
+ * the call stack. This can be done by clearing the return address register $ra
+ * prior to calling fiber_entryPoint (i.e. in fiber_switchContext) or
+ * using a .cfi_undefined directive for the return address register in the
+ * Fiber entry point. cfi_undefined seems to yield better results in gdb.
+ * Unfortunately we can't place it into fiber_entryPoint using inline
+ * asm, so we use this trampoline instead.
+ */
+        .text
+        .global CSYM(fiber_trampoline)
+        .p2align  2
+        .type   fiber_trampoline, %function
+CSYM(fiber_trampoline):
+        .cfi_startproc
+        .cfi_undefined 1
+        // fiber_entryPoint never returns
+        bl CSYM(fiber_entryPoint)
+        .cfi_endproc
 #elif defined(__arm__) && (defined(__ARM_EABI__) || defined(__APPLE__))
 /************************************************************************************
  * ARM ASM BITS
-- 
2.45.1


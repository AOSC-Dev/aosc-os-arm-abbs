From 80a0bcdd5bc86044d3e2a95820f537bf406137f0 Mon Sep 17 00:00:00 2001
From: leavelet <leavelet@163.com>
Date: Thu, 26 Sep 2024 03:06:30 +0800
Subject: [PATCH] Add AOSC distro support

---
 azurelinuxagent/common/osutil/aosc.py    |  65 +++++++++++
 azurelinuxagent/common/osutil/factory.py |   4 +
 config/aosc/waagent.conf                 | 134 +++++++++++++++++++++++
 init/aosc/waagent.service                |  16 +++
 setup.py                                 |   6 +
 tests/common/osutil/test_factory.py      |   9 ++
 6 files changed, 234 insertions(+)
 create mode 100644 azurelinuxagent/common/osutil/aosc.py
 create mode 100644 config/aosc/waagent.conf
 create mode 100644 init/aosc/waagent.service

diff --git a/azurelinuxagent/common/osutil/aosc.py b/azurelinuxagent/common/osutil/aosc.py
new file mode 100644
index 00000000..f01d6497
--- /dev/null
+++ b/azurelinuxagent/common/osutil/aosc.py
@@ -0,0 +1,65 @@
+#
+# Copyright 2024 AOSC Developers
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+# Requires Python 2.6+ and Openssl 1.0+
+#
+
+import azurelinuxagent.common.utils.shellutil as shellutil
+from azurelinuxagent.common.osutil.default import DefaultOSUtil
+
+
+class AOSCUtil(DefaultOSUtil):
+    def __init__(self):
+        super(AOSCUtil, self).__init__()
+        self.jit_enabled = True
+
+    @staticmethod
+    def get_systemd_unit_file_install_path():
+        return "/usr/lib/systemd/system"
+
+    @staticmethod
+    def get_agent_bin_path():
+        return "/usr/bin"
+
+    def is_dhcp_enabled(self):
+        return True
+
+    def start_network(self):
+        return shellutil.run("systemctl start systemd-networkd", chk_err=False)
+
+    def restart_if(self, ifname=None, retries=None, wait=None):
+        shellutil.run("systemctl restart systemd-networkd")
+
+    def restart_ssh_service(self):
+        self._run_command_without_raising(["systemctl", "restart", "sshd.service"], log_error=False)
+
+    def stop_dhcp_service(self):
+        return shellutil.run("systemctl stop systemd-networkd", chk_err=False)
+
+    def start_dhcp_service(self):
+        return shellutil.run("systemctl start systemd-networkd", chk_err=False)
+
+    def start_agent_service(self):
+        return shellutil.run("systemctl start {0}".format(self.service_name), chk_err=False)
+
+    def stop_agent_service(self):
+        return shellutil.run("systemctl stop {0}".format(self.service_name), chk_err=False)
+
+    def get_dhcp_pid(self):
+        return self._get_dhcp_pid(["pidof", "systemd-networkd"])
+
+    def conf_sshd(self, disable_password):
+        # Don't whack the system default sshd conf
+        pass
diff --git a/azurelinuxagent/common/osutil/factory.py b/azurelinuxagent/common/osutil/factory.py
index e2f15afb..b0e6b197 100644
--- a/azurelinuxagent/common/osutil/factory.py
+++ b/azurelinuxagent/common/osutil/factory.py
@@ -21,6 +21,7 @@ from distutils.version import LooseVersion as Version  # pylint: disable=no-name
 import azurelinuxagent.common.logger as logger
 from azurelinuxagent.common.version import DISTRO_NAME, DISTRO_CODE_NAME, DISTRO_VERSION, DISTRO_FULL_NAME
 from .alpine import AlpineOSUtil
+from .aosc import AOSCUtil
 from .arch import ArchUtil
 from .bigip import BigIpOSUtil
 from .clearlinux import ClearLinuxUtil
@@ -156,5 +157,8 @@ def _get_osutil(distro_name, distro_code_name, distro_version, distro_full_name)
     if distro_name == "fedora":
         return FedoraOSUtil()
 
+    if distro_name == "aosc":
+        return AOSCUtil()
+
     logger.warn("Unable to load distro implementation for {0}. Using default distro implementation instead.", distro_name)
     return DefaultOSUtil()
diff --git a/config/aosc/waagent.conf b/config/aosc/waagent.conf
new file mode 100644
index 00000000..b03430fa
--- /dev/null
+++ b/config/aosc/waagent.conf
@@ -0,0 +1,134 @@
+#
+# Microsoft Azure Linux Agent Configuration
+#
+
+# Enable extension handling. Do not disable this unless you do not need password reset,
+# backup, monitoring, or any extension handling whatsoever.
+Extensions.Enabled=y
+
+# Which provisioning agent to use. Supported values are "auto" (default), "waagent",
+# "cloud-init", or "disabled".
+Provisioning.Agent=auto
+
+# Password authentication for root account will be unavailable.
+Provisioning.DeleteRootPassword=y
+
+# Generate fresh host key pair.
+Provisioning.RegenerateSshHostKeyPair=y
+
+# Supported values are "rsa", "dsa", "ecdsa", "ed25519", and "auto".
+# The "auto" option is supported on OpenSSH 5.9 (2011) and later.
+Provisioning.SshHostKeyPairType=ed25519
+
+# Monitor host name changes and publish changes via DHCP requests.
+Provisioning.MonitorHostName=y
+
+# Decode CustomData from Base64.
+Provisioning.DecodeCustomData=n
+
+# Execute CustomData after provisioning.
+Provisioning.ExecuteCustomData=n
+
+# Algorithm used by crypt when generating password hash.
+#Provisioning.PasswordCryptId=6
+
+# Length of random salt used when generating password hash.
+#Provisioning.PasswordCryptSaltLength=10
+
+# Allow reset password of sys user
+Provisioning.AllowResetSysUser=n
+
+# Format if unformatted. If 'n', resource disk will not be mounted.
+ResourceDisk.Format=y
+
+# File system on the resource disk
+# Typically ext3 or ext4. FreeBSD images should use 'ufs2' here.
+ResourceDisk.Filesystem=ext4
+
+# Mount point for the resource disk
+ResourceDisk.MountPoint=/mnt/resource
+
+# Create and use swapfile on resource disk.
+ResourceDisk.EnableSwap=n
+
+# Size of the swapfile.
+ResourceDisk.SwapSizeMB=0
+
+# Comma-separated list of mount options. See mount(8) for valid options.
+ResourceDisk.MountOptions=compress=lzo
+
+# Respond to load balancer probes if requested by Microsoft Azure.
+LBProbeResponder=y
+
+# Enable verbose logging (y|n)
+Logs.Verbose=n
+
+# Enable Console logging, default is y
+# Logs.Console=y
+
+# Enable periodic log collection, default is y
+Logs.Collect=y
+
+# How frequently to collect logs, default is each hour
+Logs.CollectPeriod=3600
+
+# Is FIPS enabled
+OS.EnableFIPS=n
+
+# Root device timeout in seconds.
+OS.RootDeviceScsiTimeout=300
+
+# If "None", the system default version is used.
+OS.OpensslPath=None
+
+# Set the path to SSH keys and configuration files
+OS.SshDir=/etc/ssh
+
+# If set, agent will use proxy server to access internet
+#HttpProxy.Host=None
+#HttpProxy.Port=None
+
+# Detect Scvmm environment, default is n
+# DetectScvmmEnv=n
+
+#
+# Lib.Dir=/var/lib/waagent
+
+#
+# DVD.MountPoint=/mnt/cdrom/secure
+
+#
+# Pid.File=/var/run/waagent.pid
+
+#
+# Extension.LogDir=/var/log/azure
+
+#
+# Home.Dir=/home
+
+# Enable RDMA management and set up, should only be used in HPC images
+# OS.EnableRDMA=y
+
+# Enable checking RDMA driver version and update
+# OS.CheckRdmaDriver=y
+
+# Enable or disable goal state processing auto-update, default is enabled
+# When turned off, it remains on latest version installed on the vm
+# Added this new option AutoUpdate.UpdateToLatestVersion in place of AutoUpdate.Enabled, and encourage users to transition to this new option
+# See wiki[https://github.com/Azure/WALinuxAgent/wiki/FAQ#autoupdateenabled-vs-autoupdateupdatetolatestversion] for more details
+# AutoUpdate.UpdateToLatestVersion=y
+
+# Determine the update family, this should not be changed
+# AutoUpdate.GAFamily=Prod
+
+# Determine if the overprovisioning feature is enabled. If yes, hold extension
+# handling until inVMArtifactsProfile.OnHold is false.
+# Default is enabled
+# EnableOverProvisioning=y
+
+# Allow fallback to HTTP if HTTPS is unavailable
+# Note: Allowing HTTP (vs. HTTPS) may cause security risks
+# OS.AllowHTTP=n
+
+# Add firewall rules to protect access to Azure host node services
+OS.EnableFirewall=y
diff --git a/init/aosc/waagent.service b/init/aosc/waagent.service
new file mode 100644
index 00000000..ff1ebab1
--- /dev/null
+++ b/init/aosc/waagent.service
@@ -0,0 +1,16 @@
+[Unit]
+Description=Azure Linux Agent
+Wants=network-online.target sshd.service sshd-keygen.service
+After=network-online.target
+
+ConditionFileIsExecutable=/usr/bin/waagent
+ConditionPathExists=/etc/waagent.conf
+
+[Service]
+Type=simple
+ExecStart=/usr/bin/python3 -u /usr/bin/waagent -daemon
+Restart=always
+RestartSec=5
+
+[Install]
+WantedBy=multi-user.target
diff --git a/setup.py b/setup.py
index 6b54d09e..794949a6 100755
--- a/setup.py
+++ b/setup.py
@@ -254,6 +254,12 @@ def get_data_files(name, version, fullname):  # pylint: disable=R0912
         set_logrotate_files(data_files)
         set_udev_files(data_files)
         set_systemd_files(data_files, dest=systemd_dir_path)
+    elif name == 'aosc':
+        set_bin_files(data_files, dest=agent_bin_path)
+        set_conf_files(data_files, src=["config/aosc/waagent.conf"])
+        set_logrotate_files(data_files)
+        set_udev_files(data_files, dest="/etc/udev/rules.d/")
+        set_systemd_files(data_files, dest=systemd_dir_path, src=["init/aosc/waagent.service"])
     else:
         # Use default setting
         set_bin_files(data_files, dest=agent_bin_path)
diff --git a/tests/common/osutil/test_factory.py b/tests/common/osutil/test_factory.py
index 46bf6a87..df2ad790 100644
--- a/tests/common/osutil/test_factory.py
+++ b/tests/common/osutil/test_factory.py
@@ -16,6 +16,7 @@
 #
 
 from azurelinuxagent.common.osutil.alpine import AlpineOSUtil
+from azurelinuxagent.common.osutil.aosc import AOSCUtil
 from azurelinuxagent.common.osutil.arch import ArchUtil
 from azurelinuxagent.common.osutil.bigip import BigIpOSUtil
 from azurelinuxagent.common.osutil.clearlinux import ClearLinuxUtil
@@ -353,3 +354,11 @@ class TestOsUtilFactory(AgentTestCase):
                           distro_full_name="")
         self.assertTrue(isinstance(ret, PhotonOSUtil))
         self.assertEqual(ret.get_service_name(), "waagent")
+
+    def test_get_osutil_it_should_return_aosc(self):
+        ret = _get_osutil(distro_name="aosc",
+                          distro_code_name="",
+                          distro_version="",
+                          distro_full_name="")
+        self.assertTrue(isinstance(ret, AOSCUtil))
+        self.assertEqual(ret.get_service_name(), "waagent")
-- 
2.46.2


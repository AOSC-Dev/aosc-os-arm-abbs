diff --git a/3rdparty/qtimgui/ImGuiRenderer.cpp b/3rdparty/qtimgui/ImGuiRenderer.cpp
index e77b47de..a3aba08d 100644
--- a/3rdparty/qtimgui/ImGuiRenderer.cpp
+++ b/3rdparty/qtimgui/ImGuiRenderer.cpp
@@ -6,6 +6,17 @@
 #include <QCursor>
 #include <QDebug>
 
+#ifdef ANDROID
+#define GL_VERTEX_ARRAY_BINDING           0x85B5 // Missing in android as of May 2020
+#define USE_GLSL_ES
+#endif
+
+#ifdef QT_OPENGL_ES_2
+#define IMGUIRENDERER_GLSL_VERSION "#version 300 es\n"
+#else
+#define IMGUIRENDERER_GLSL_VERSION "#version 330\n"
+#endif
+
 namespace QtImGui {
 
 namespace {
@@ -39,8 +50,6 @@ QByteArray g_currentClipboardText;
 void ImGuiRenderer::initialize(WindowWrapper *window) {
     m_window.reset(window);
     initializeOpenGLFunctions();
-    g_fun = new QOpenGLFunctions_3_2_Core();
-    g_fun->initializeOpenGLFunctions();
 
     ImGui::CreateContext();
 
@@ -61,7 +70,6 @@ void ImGuiRenderer::initialize(WindowWrapper *window) {
         g_currentClipboardText = QGuiApplication::clipboard()->text().toUtf8();
         return (const char *)g_currentClipboardText.data();
     };
-    io.IniFilename = nullptr;
 
     window->installEventFilter(this);
 }
@@ -117,7 +125,7 @@ void ImGuiRenderer::renderDrawList(ImDrawData *draw_data)
     glUseProgram(g_ShaderHandle);
     glUniform1i(g_AttribLocationTex, 0);
     glUniformMatrix4fv(g_AttribLocationProjMtx, 1, GL_FALSE, &ortho_projection[0][0]);
-    g_fun->glBindVertexArray(g_VaoHandle);
+    glBindVertexArray(g_VaoHandle);
 
     for (int n = 0; n < draw_data->CmdListsCount; n++)
     {
@@ -151,7 +159,7 @@ void ImGuiRenderer::renderDrawList(ImDrawData *draw_data)
     glUseProgram(last_program);
     glBindTexture(GL_TEXTURE_2D, last_texture);
     glActiveTexture(last_active_texture);
-    g_fun->glBindVertexArray(last_vertex_array);
+    glBindVertexArray(last_vertex_array);
     glBindBuffer(GL_ARRAY_BUFFER, last_array_buffer);
     glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, last_element_array_buffer);
     glBlendEquationSeparate(last_blend_equation_rgb, last_blend_equation_alpha);
@@ -199,7 +207,7 @@ bool ImGuiRenderer::createDeviceObjects()
     glGetIntegerv(GL_VERTEX_ARRAY_BINDING, &last_vertex_array);
 
     const GLchar *vertex_shader =
-        "#version 330\n"
+        IMGUIRENDERER_GLSL_VERSION
         "uniform mat4 ProjMtx;\n"
         "in vec2 Position;\n"
         "in vec2 UV;\n"
@@ -214,7 +222,7 @@ bool ImGuiRenderer::createDeviceObjects()
         "}\n";
 
     const GLchar* fragment_shader =
-        "#version 330\n"
+        IMGUIRENDERER_GLSL_VERSION
         "uniform sampler2D Texture;\n"
         "in vec2 Frag_UV;\n"
         "in vec4 Frag_Color;\n"
@@ -244,8 +252,8 @@ bool ImGuiRenderer::createDeviceObjects()
     glGenBuffers(1, &g_VboHandle);
     glGenBuffers(1, &g_ElementsHandle);
 
-    g_fun->glGenVertexArrays(1, &g_VaoHandle);
-    g_fun->glBindVertexArray(g_VaoHandle);
+    glGenVertexArrays(1, &g_VaoHandle);
+    glBindVertexArray(g_VaoHandle);
     glBindBuffer(GL_ARRAY_BUFFER, g_VboHandle);
     glEnableVertexAttribArray(g_AttribLocationPosition);
     glEnableVertexAttribArray(g_AttribLocationUV);
@@ -262,7 +270,7 @@ bool ImGuiRenderer::createDeviceObjects()
     // Restore modified GL state
     glBindTexture(GL_TEXTURE_2D, last_texture);
     glBindBuffer(GL_ARRAY_BUFFER, last_array_buffer);
-    g_fun->glBindVertexArray(last_vertex_array);
+    glBindVertexArray(last_vertex_array);
 
     return true;
 }
diff --git a/3rdparty/qtimgui/ImGuiRenderer.h b/3rdparty/qtimgui/ImGuiRenderer.h
index 8962c07b..ca69ffaa 100644
--- a/3rdparty/qtimgui/ImGuiRenderer.h
+++ b/3rdparty/qtimgui/ImGuiRenderer.h
@@ -1,7 +1,6 @@
 #pragma once
 
-#include <QOpenGLFunctions>
-#include <QOpenGLFunctions_3_2_Core>
+#include <QOpenGLExtraFunctions>
 #include <QObject>
 #include <QPoint>
 #include <imgui.h>
@@ -23,7 +22,7 @@ public:
     virtual QPoint mapFromGlobal(const QPoint &p) const = 0;
 };
 
-class ImGuiRenderer : public QObject, QOpenGLFunctions {
+class ImGuiRenderer : public QObject, QOpenGLExtraFunctions {
     Q_OBJECT
 public:
     void initialize(WindowWrapper *window);
@@ -54,7 +53,6 @@ private:
     int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;
     int          g_AttribLocationPosition = 0, g_AttribLocationUV = 0, g_AttribLocationColor = 0;
     unsigned int g_VboHandle = 0, g_VaoHandle = 0, g_ElementsHandle = 0;
-    QOpenGLFunctions_3_2_Core *g_fun = nullptr;
 };
 
 }
diff --git a/3rdparty/qtimgui/demo-widget/demo-widget.cpp b/3rdparty/qtimgui/demo-widget/demo-widget.cpp
index f0c44bef..8c2fe4ae 100644
--- a/3rdparty/qtimgui/demo-widget/demo-widget.cpp
+++ b/3rdparty/qtimgui/demo-widget/demo-widget.cpp
@@ -62,10 +62,13 @@ private:
 
 int main(int argc, char *argv[])
 {
-    // Use OpenGL 3 Core Profile
+    // Use OpenGL 3 Core Profile, when available
     QSurfaceFormat glFormat;
-    glFormat.setVersion(3, 3);
-    glFormat.setProfile(QSurfaceFormat::CoreProfile);
+    if (QOpenGLContext::openGLModuleType() == QOpenGLContext::LibGL)
+    {
+        glFormat.setVersion(3, 3);
+        glFormat.setProfile(QSurfaceFormat::CoreProfile);
+    }
     QSurfaceFormat::setDefaultFormat(glFormat);
 
     QApplication a(argc, argv);
diff --git a/3rdparty/qtimgui/demo-window/demo-window.cpp b/3rdparty/qtimgui/demo-window/demo-window.cpp
index b86c5c85..d8f1cfd8 100644
--- a/3rdparty/qtimgui/demo-window/demo-window.cpp
+++ b/3rdparty/qtimgui/demo-window/demo-window.cpp
@@ -62,10 +62,13 @@ private:
 
 int main(int argc, char *argv[])
 {
-    // Use OpenGL 3 Core Profile
+    // Use OpenGL 3 Core Profile, when available
     QSurfaceFormat glFormat;
-    glFormat.setVersion(3, 3);
-    glFormat.setProfile(QSurfaceFormat::CoreProfile);
+    if (QOpenGLContext::openGLModuleType() == QOpenGLContext::LibGL)
+    {
+        glFormat.setVersion(3, 3);
+        glFormat.setProfile(QSurfaceFormat::CoreProfile);
+    }
     QSurfaceFormat::setDefaultFormat(glFormat);
 
     QGuiApplication a(argc, argv);

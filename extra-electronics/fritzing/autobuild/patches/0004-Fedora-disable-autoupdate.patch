diff -Naur fritzing-app-0.9.6/phoenix.pro fritzing-app-0.9.6.fedora/phoenix.pro
--- fritzing-app-0.9.6/phoenix.pro	2021-02-21 01:53:04.000000000 -0800
+++ fritzing-app-0.9.6.fedora/phoenix.pro	2021-06-19 22:12:03.249726729 -0700
@@ -174,10 +174,6 @@
 RC_FILE = fritzing.rc
 RESOURCES += phoenixresources.qrc
 
-# Disable this if you have (and want) libgit2 dynamically
-LIBGIT_STATIC = true
-include(pri/libgit2detect.pri)
-
 include(pri/boostdetect.pri)
 
 include(pri/kitchensink.pri)
diff -Naur fritzing-app-0.9.6/phoenix.pro.orig fritzing-app-0.9.6.fedora/phoenix.pro.orig
--- fritzing-app-0.9.6/phoenix.pro.orig	1969-12-31 16:00:00.000000000 -0800
+++ fritzing-app-0.9.6.fedora/phoenix.pro.orig	2021-06-19 22:11:58.121661539 -0700
@@ -0,0 +1,216 @@
+# /*******************************************************************
+#
+# Part of the Fritzing project - http://fritzing.org
+# Copyright (c) 2007-19 Fritzing
+#
+# Fritzing is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# (at your option) any later version.
+#
+# Fritzing is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with Fritzing.  If not, see <http://www.gnu.org/licenses/>.
+#
+# ********************************************************************
+
+lessThan(QT_MAJOR_VERSION, 5) {
+    error(Fritzing does not build with Qt 4 or earlier. 5.12 is recommended.)
+}
+
+lessThan(QT_MINOR_VERSION, 9) {
+    error(Fritzing does not build with Qt 5.8 or earlier. 5.12 is recommended.)
+}
+
+CONFIG += debug_and_release
+CONFIG += c++14
+
+# TODO: Omit frame pointers for release builds
+# TODO: Verify flags for clang and msvc builds
+QMAKE_CXXFLAGS += -O3 -fno-omit-frame-pointer
+
+unix:!macx {
+    CONFIG += link_pkgconfig
+}
+
+load(configure)
+
+win32 {
+# release build using msvc 2010 needs to use Multi-threaded (/MT) for the code generation/runtime library option
+# release build using msvc 2010 needs to add msvcrt.lib;%(IgnoreSpecificDefaultLibraries) to the linker/no default libraries option
+    CONFIG -= embed_manifest_exe
+    INCLUDEPATH += $$[QT_INSTALL_HEADERS]/QtZlib
+    DEFINES += _CRT_SECURE_NO_DEPRECATE
+    DEFINES += _WINDOWS
+    RELEASE_SCRIPT = $$(RELEASE_SCRIPT)    # environment variable set from release script
+
+    message("target arch: $${QMAKE_TARGET.arch}")
+    contains(QMAKE_TARGET.arch, x86_64) {
+        RELDIR = ../release64
+        DEBDIR = ../debug64
+        DEFINES += WIN64
+    } else {
+        RELDIR = ../release32
+        DEBDIR = ../debug32
+    }
+
+    Release:DESTDIR = $${RELDIR}
+    Release:OBJECTS_DIR = $${RELDIR}
+    Release:MOC_DIR = $${RELDIR}
+    Release:RCC_DIR = $${RELDIR}
+    Release:UI_DIR = $${RELDIR}
+
+    Debug:DESTDIR = $${DEBDIR}
+    Debug:OBJECTS_DIR = $${DEBDIR}
+    Debug:MOC_DIR = $${DEBDIR}
+    Debug:RCC_DIR = $${DEBDIR}
+    Debug:UI_DIR = $${DEBDIR}
+}
+macx {
+    RELDIR = ../release64
+    DEBDIR = ../debug64
+    Release:DESTDIR = $${RELDIR}
+    Release:OBJECTS_DIR = $${RELDIR}
+    Release:MOC_DIR = $${RELDIR}
+    Release:RCC_DIR = $${RELDIR}
+    Release:UI_DIR = $${RELDIR}
+
+    Debug:DESTDIR = $${DEBDIR}
+    Debug:OBJECTS_DIR = $${DEBDIR}
+    Debug:MOC_DIR = $${DEBDIR}
+    Debug:RCC_DIR = $${DEBDIR}
+    Debug:UI_DIR = $${DEBDIR}
+
+    #QMAKE_MAC_SDK = macosx10.11            # uncomment/adapt for your version of OSX
+    CONFIG += x86_64 # x86 ppc
+    QMAKE_INFO_PLIST = FritzingInfo.plist
+    #DEFINES += QT_NO_DEBUG                # uncomment this for xcode
+    LIBS += -lz
+    LIBS += /usr/lib/libz.dylib
+    LIBS += /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation
+    LIBS += /System/Library/Frameworks/Carbon.framework/Carbon
+    LIBS += /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit
+    LIBS += -liconv
+}
+unix {
+    !macx { # unix is defined on mac
+        HARDWARE_PLATFORM = $$system(uname -m)
+        contains(HARDWARE_PLATFORM, x86_64) {
+            DEFINES += LINUX_64
+        } else {
+            DEFINES += LINUX_32
+        }
+        !contains(DEFINES, QUAZIP_INSTALLED) {
+            LIBS += -lz
+        }
+    }
+
+    isEmpty(PREFIX) {
+        PREFIX = /usr
+    }
+    BINDIR = $$PREFIX/bin
+    DATADIR = $$PREFIX/share
+    PKGDATADIR = $$DATADIR/fritzing
+
+    DEFINES += DATADIR=\\\"$$DATADIR\\\" PKGDATADIR=\\\"$$PKGDATADIR\\\"
+
+    target.path = $$BINDIR
+
+    desktop.path = $$DATADIR/applications
+    desktop.files += org.fritzing.Fritzing.desktop
+
+    appdata.path = $$DATADIR/metainfo
+    appdata.files += org.fritzing.Fritzing.appdata.xml
+
+    mimedb.path = $$DATADIR/mime/packages
+    mimedb.files += resources/system_icons/linux/fritzing.xml
+
+    manpage.path = $$DATADIR/man/man1
+    manpage.files += Fritzing.1
+
+    icon.path = $$DATADIR/pixmaps
+    icon.extra = install -D -m 0644 $$PWD/resources/images/fritzing_icon.png $(INSTALL_ROOT)$$DATADIR/pixmaps/fritzing.png
+
+    parts.path = $$PKGDATADIR
+    parts.files += parts
+
+    help.path = $$PKGDATADIR
+    help.files += help
+
+    sketches.path = $$PKGDATADIR
+    sketches.files += sketches
+
+    bins.path = $$PKGDATADIR
+    bins.files += bins
+
+    translations.path = $$PKGDATADIR/translations
+    isEmpty(LINGUAS) {
+        translations.files += $$system(find $$PWD/translations -name "*.qm" -size +128c)
+    } else {
+        for(lang, LINGUAS):translations.files += $$system(find $$PWD/translations -name "fritzing_$${lang}.qm" -size +128c)
+        isEmpty(translations.files):error("No translations found for $$LINGUAS")
+    }
+
+    syntax.path = $$PKGDATADIR/translations/syntax
+    syntax.files += translations/syntax/*.xml
+
+    INSTALLS += target desktop appdata mimedb manpage icon parts sketches bins translations syntax help
+}
+
+ICON = resources/system_icons/macosx/fritzing_icon.icns
+
+macx {
+    FILE_ICONS.files = resources/system_icons/macosx/mac_fz_icon.icns resources/system_icons/macosx/mac_fzz_icon.icns resources/system_icons/macosx/mac_fzb_icon.icns resources/system_icons/macosx/mac_fzp_icon.icns resources/system_icons/macosx/mac_fzm_icon.icns resources/system_icons/macosx/mac_fzpz_icon.icns
+    FILE_ICONS.path = Contents/Resources
+    QMAKE_BUNDLE_DATA += FILE_ICONS
+}
+
+QT += concurrent core gui network printsupport serialport sql svg widgets xml
+
+RC_FILE = fritzing.rc
+RESOURCES += phoenixresources.qrc
+
+# Disable this if you have (and want) libgit2 dynamically
+LIBGIT_STATIC = true
+include(pri/libgit2detect.pri)
+
+include(pri/boostdetect.pri)
+
+include(pri/kitchensink.pri)
+include(pri/mainwindow.pri)
+include(pri/partsbinpalette.pri)
+include(pri/partseditor.pri)
+include(pri/referencemodel.pri)
+include(pri/svg.pri)
+include(pri/help.pri)
+include(pri/version.pri)
+include(pri/eagle.pri)
+include(pri/utils.pri)
+include(pri/dock.pri)
+include(pri/items.pri)
+include(pri/autoroute.pri)
+include(pri/dialogs.pri)
+include(pri/connectors.pri)
+include(pri/infoview.pri)
+include(pri/model.pri)
+include(pri/sketch.pri)
+include(pri/translations.pri)
+include(pri/program.pri)
+include(pri/qtsysteminfo.pri)
+include(test/version.pri)
+
+contains(DEFINES, QUAZIP_INSTALLED) {
+    !build_pass:message("using installed QuaZIP library")
+    LIBS += -lquazip5
+} else {
+    include(pri/quazip.pri)
+}
+
+TARGET = Fritzing
+TEMPLATE = app
+
+!build_pass:message("libs $$LIBS")
diff -Naur fritzing-app-0.9.6/pri/version.pri fritzing-app-0.9.6.fedora/pri/version.pri
--- fritzing-app-0.9.6/pri/version.pri	2021-02-21 01:53:04.000000000 -0800
+++ fritzing-app-0.9.6.fedora/pri/version.pri	2021-06-19 22:12:46.909282361 -0700
@@ -17,17 +17,11 @@
 
 HEADERS += \
 	src/version/modfiledialog.h \
-	src/version/updatedialog.h \
 	src/version/version.h \
-	src/version/versionchecker.h \
-	src/version/partschecker.h
 
 SOURCES += \
 	src/version/modfiledialog.cpp \
-	src/version/updatedialog.cpp \
 	src/version/version.cpp \
-	src/version/versionchecker.cpp \
-	src/version/partschecker.cpp
 
 FORMS += \
 	src/version/modfiledialog.ui
diff -Naur fritzing-app-0.9.6/src/fapplication.cpp fritzing-app-0.9.6.fedora/src/fapplication.cpp
--- fritzing-app-0.9.6/src/fapplication.cpp	2021-02-21 01:53:04.000000000 -0800
+++ fritzing-app-0.9.6.fedora/src/fapplication.cpp	2021-06-19 22:12:03.249726729 -0700
@@ -27,7 +27,6 @@
 #include "dialogs/prefsdialog.h"
 #include "fsvgrenderer.h"
 #include "version/versionchecker.h"
-#include "version/updatedialog.h"
 #include "itemdrag.h"
 #include "items/wire.h"
 #include "partsbinpalette/binmanager/binmanager.h"
@@ -61,7 +60,6 @@
 #include "sketch/pcbsketchwidget.h"
 #include "help/firsttimehelpdialog.h"
 #include "help/aboutbox.h"
-#include "version/partschecker.h"
 
 // dependency injection :P
 #include "referencemodel/sqlitereferencemodel.h"
@@ -607,10 +605,6 @@
 
 	clearModels();
 
-	if (m_updateDialog) {
-		delete m_updateDialog;
-	}
-
 	FSvgRenderer::cleanup();
 	ViewLayer::cleanup();
 	ViewLayer::cleanup();
@@ -780,19 +774,6 @@
 	QFileInfo info(dbPath);
 	bool dbExists = (info.size() > 0) && !fullLoad;
 
-	QString sha;
-	if (!dbExists) {
-		// fullLoad == true means we are creating the parts database
-		// so get the sha for last commit of the parts folder and store it in the database
-		// this sha will be used to determine whether the user's parts folder can be updated from the remote repo
-		sha = PartsChecker::getSha(dir.absolutePath());
-		if (sha.isEmpty()) {
-			DebugDialog::debug(QString("1.6 SHA empty"));
-			return false;
-		}
-		referenceModel->setSha(sha);
-	}
-
 	// loads local parts, resource parts, and any other parts in files not in the db--these part override db parts with the same moduleID
 	QString db = databaseName;
 	if (databaseName.isEmpty() && !dbExists) {
@@ -1218,12 +1199,6 @@
 	splash.hide();
 	m_splash = NULL;
 
-	m_updateDialog = new UpdateDialog();
-	m_updateDialog->setRepoPath(FolderUtils::getAppPartsSubFolderPath(""), m_referenceModel->sha());
-	connect(m_updateDialog, SIGNAL(enableAgainSignal(bool)), this, SLOT(enableCheckUpdates(bool)));
-	connect(m_updateDialog, SIGNAL(installNewParts()), this, SLOT(installNewParts()));
-	checkForUpdates(false);
-
 	return 0;
 }
 
@@ -1396,55 +1371,6 @@
 };
 
 
-void FApplication::checkForUpdates() {
-	checkForUpdates(true);
-}
-
-void FApplication::checkForUpdates(bool atUserRequest)
-{
-	enableCheckUpdates(false);
-
-	VersionChecker * versionChecker = new VersionChecker();
-
-	QSettings settings;
-	if (!atUserRequest) {
-		// if I've already been notified about these updates, don't bug me again
-		QString lastMainVersionChecked = settings.value("lastMainVersionChecked").toString();
-		if (!lastMainVersionChecked.isEmpty()) {
-			versionChecker->ignore(lastMainVersionChecked, false);
-		}
-		QString lastInterimVersionChecked = settings.value("lastInterimVersionChecked").toString();
-		if (!lastInterimVersionChecked.isEmpty()) {
-			versionChecker->ignore(lastInterimVersionChecked, true);
-		}
-	}
-
-	QString atom = QString("http%3://fritzing.org/download/feed/atom/%1/%2")
-	               .arg(PLATFORM_NAME)
-				   .arg(Version::makeRequestParamsString(true))
-				   .arg(QSslSocket::supportsSsl() ? "s" : "");
-	DebugDialog::debug(atom);
-	versionChecker->setUrl(atom);
-	m_updateDialog->setAtUserRequest(atUserRequest);
-	m_updateDialog->setVersionChecker(versionChecker);
-
-	if (atUserRequest) {
-		m_updateDialog->exec();
-	}
-}
-
-void FApplication::enableCheckUpdates(bool enabled)
-{
-	//DebugDialog::debug("before enable check updates");
-	foreach (QWidget *widget, QApplication::topLevelWidgets()) {
-		MainWindow *mainWindow = qobject_cast<MainWindow *>(widget);
-		if (mainWindow) {
-			mainWindow->enableCheckUpdates(enabled);
-		}
-	}
-	//DebugDialog::debug("after enable check updates");
-}
-
 void FApplication::createUserDataStoreFolderStructures() {
 	FolderUtils::createUserDataStoreFolders();
 	FolderUtils::copyBin(BinManager::MyPartsBinLocation, BinManager::MyPartsBinTemplateLocation);
@@ -2045,10 +1971,7 @@
 	if (thread == NULL) return;
 
 	QDialog * progressDialog = thread->progressDialog();
-	if (progressDialog == m_updateDialog) {
-		m_updateDialog->installFinished(thread->error());
-	}
-	else {
+	{
 		if (thread->error().isEmpty()) {
 			QTimer::singleShot(50, Qt::PreciseTimer, this, SLOT(quit()));
 		}
@@ -2065,7 +1988,3 @@
 
 	thread->deleteLater();
 }
-
-void FApplication::installNewParts() {
-	regeneratePartsDatabaseAux(m_updateDialog);
-}
diff -Naur fritzing-app-0.9.6/src/fapplication.h fritzing-app-0.9.6.fedora/src/fapplication.h
--- fritzing-app-0.9.6/src/fapplication.h	2021-02-21 01:53:04.000000000 -0800
+++ fritzing-app-0.9.6.fedora/src/fapplication.h	2021-06-19 22:12:03.249726729 -0700
@@ -131,9 +131,6 @@
 public slots:
 	void preferences();
 	void preferencesAfter();
-	void checkForUpdates();
-	void checkForUpdates(bool atUserRequest);
-	void enableCheckUpdates(bool enabled);
 	void createUserDataStoreFolderStructures();
 	void changeActivation(bool activate, QWidget * originator);
 	void updateActivation();
@@ -146,7 +143,6 @@
 	void doCommand(const QString & command, const QString & params, QString & result, int & status);
 	void regeneratePartsDatabase();
 	void regenerateDatabaseFinished();
-	void installNewParts();
 
 
 protected:
@@ -211,7 +207,6 @@
 	QStringList m_filesToLoad;
 	QString m_libPath;
 	QString m_translationPath;
-	class UpdateDialog * m_updateDialog = nullptr;
 	QTimer m_activationTimer;
 	QPointer<class FritzingWindow> m_lastTopmostWindow;
 	QList<QWidget *> m_orderedTopLevelWidgets;
diff -Naur fritzing-app-0.9.6/src/mainwindow/mainwindow.cpp fritzing-app-0.9.6.fedora/src/mainwindow/mainwindow.cpp
--- fritzing-app-0.9.6/src/mainwindow/mainwindow.cpp	2021-02-21 01:53:04.000000000 -0800
+++ fritzing-app-0.9.6.fedora/src/mainwindow/mainwindow.cpp	2021-06-19 22:12:03.250726742 -0700
@@ -323,7 +323,6 @@
 	m_welcomeView = NULL;
 	m_windowMenuSeparator = NULL;
 	m_schematicWireColorMenu = m_breadboardWireColorMenu = NULL;
-	m_checkForUpdatesAct = NULL;
 	m_fileProgressDialog = NULL;
 	m_currentGraphicsView = NULL;
 	m_comboboxChanged = false;
@@ -2070,13 +2069,6 @@
 	FritzingWindow::resizeEvent(event);
 }
 
-void MainWindow::enableCheckUpdates(bool enabled)
-{
-	if (m_checkForUpdatesAct) {
-		m_checkForUpdatesAct->setEnabled(enabled);
-	}
-}
-
 void MainWindow::swapSelectedDelay(const QString & family, const QString & prop, QMap<QString, QString> & currPropsMap, ItemBase * itemBase)
 {
 	//DebugDialog::debug("swap selected delay");
diff -Naur fritzing-app-0.9.6/src/mainwindow/mainwindow.h fritzing-app-0.9.6.fedora/src/mainwindow/mainwindow.h
--- fritzing-app-0.9.6/src/mainwindow/mainwindow.h	2021-02-21 01:53:04.000000000 -0800
+++ fritzing-app-0.9.6.fedora/src/mainwindow/mainwindow.h	2021-06-19 22:12:03.250726742 -0700
@@ -171,7 +171,6 @@
 	QAction *raiseWindowAction();
 	QSizeGrip *sizeGrip();
 	QStatusBar *realStatusBar();
-	void enableCheckUpdates(bool enabled);
 
 	void getPartsEditorNewAnd(ItemBase * fromItem);
 	void addDefaultParts();
@@ -872,7 +871,6 @@
 	QAction *m_examplesAct = nullptr;
 	QAction *m_partsRefAct = nullptr;
 	QAction *m_visitFritzingDotOrgAct = nullptr;
-	QAction *m_checkForUpdatesAct = nullptr;
 	QAction *m_aboutQtAct = nullptr;
 	QAction *m_reportBugAct = nullptr;
 	QAction *m_enableDebugAct = nullptr;
diff -Naur fritzing-app-0.9.6/src/mainwindow/mainwindow_menu.cpp fritzing-app-0.9.6.fedora/src/mainwindow/mainwindow_menu.cpp
--- fritzing-app-0.9.6/src/mainwindow/mainwindow_menu.cpp	2021-02-21 01:53:04.000000000 -0800
+++ fritzing-app-0.9.6.fedora/src/mainwindow/mainwindow_menu.cpp	2021-06-19 22:12:03.250726742 -0700
@@ -1244,10 +1244,6 @@
 	m_visitFritzingDotOrgAct->setStatusTip(tr("fritzing.org"));
 	connect(m_visitFritzingDotOrgAct, SIGNAL(triggered(bool)), this, SLOT(visitFritzingDotOrg()));
 
-	m_checkForUpdatesAct = new QAction(tr("Check for updates..."), this);
-	m_checkForUpdatesAct->setStatusTip(tr("Check whether a newer version of Fritzing is available for download"));
-	connect(m_checkForUpdatesAct, SIGNAL(triggered()), QApplication::instance(), SLOT(checkForUpdates()));
-
 	m_aboutAct = new QAction(tr("&About"), this);
 	m_aboutAct->setStatusTip(tr("Show the application's about box"));
 	connect(m_aboutAct, SIGNAL(triggered()), this, SLOT(about()));
@@ -1581,8 +1577,6 @@
 	m_helpMenu->addSeparator();
 	m_helpMenu->addAction(m_partsEditorHelpAct);
 	m_helpMenu->addSeparator();
-	m_helpMenu->addAction(m_checkForUpdatesAct);
-	m_helpMenu->addSeparator();
 	m_helpMenu->addAction(m_reportBugAct);
 	m_helpMenu->addAction(m_enableDebugAct);
 	m_helpMenu->addSeparator();

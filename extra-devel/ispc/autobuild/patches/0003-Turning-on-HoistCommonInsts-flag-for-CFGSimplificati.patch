From fef66ebc5d43a76971f356d4350938592c370363 Mon Sep 17 00:00:00 2001
From: Deepak Rajendrakumaran <deepak.rajendrakumaran@intel.com>
Date: Fri, 29 Jan 2021 14:28:53 -0800
Subject: [PATCH] Turning on HoistCommonInsts flag for CFGSimplificationPass.

---
 src/opt.cpp                      | 44 ++++++++++++++++++++++++++++++++
 tests/lit-tests/simplifyCFG.ispc | 23 +++++++++++++++++
 2 files changed, 67 insertions(+)
 create mode 100644 tests/lit-tests/simplifyCFG.ispc

diff --git a/src/opt.cpp b/src/opt.cpp
index 9d6cae05..4ad8c5d1 100644
--- a/src/opt.cpp
+++ b/src/opt.cpp
@@ -482,6 +482,10 @@ void Optimize(llvm::Module *module, int optLevel) {
     }
     optPM.add(llvm::createIndVarSimplifyPass());
 
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+    llvm::SimplifyCFGOptions simplifyCFGopt;
+    simplifyCFGopt.HoistCommonInsts = true;
+#endif
     if (optLevel == 0) {
         // This is more or less the minimum set of optimizations that we
         // need to do to generate code that will actually run.  (We can't
@@ -517,7 +521,11 @@ void Optimize(llvm::Module *module, int optLevel) {
 #endif
         optPM.add(llvm::createFunctionInliningPass());
         optPM.add(CreateMakeInternalFuncsStaticPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
 #ifdef ISPC_GENX_ENABLED
         if (g->target->isGenXTarget()) {
             optPM.add(llvm::createPromoteMemoryToRegisterPass());
@@ -569,7 +577,11 @@ void Optimize(llvm::Module *module, int optLevel) {
         // An alternative is to call populateFunctionPassManager()
         optPM.add(llvm::createTypeBasedAAWrapperPass(), 190);
         optPM.add(llvm::createBasicAAWrapperPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
 
         optPM.add(llvm::createSROAPass());
 
@@ -581,7 +593,11 @@ void Optimize(llvm::Module *module, int optLevel) {
         optPM.add(llvm::createReassociatePass(), 200);
         optPM.add(llvm::createInstSimplifyLegacyPass());
         optPM.add(llvm::createDeadCodeEliminationPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
 
         optPM.add(llvm::createPromoteMemoryToRegisterPass());
         optPM.add(llvm::createAggressiveDCEPass());
@@ -599,7 +615,11 @@ void Optimize(llvm::Module *module, int optLevel) {
         // On to more serious optimizations
         optPM.add(llvm::createSROAPass());
         optPM.add(llvm::createInstructionCombiningPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
         optPM.add(llvm::createPromoteMemoryToRegisterPass());
         optPM.add(llvm::createGlobalOptimizerPass());
         optPM.add(llvm::createReassociatePass());
@@ -616,7 +636,11 @@ void Optimize(llvm::Module *module, int optLevel) {
 
         optPM.add(llvm::createDeadArgEliminationPass(), 230);
         optPM.add(llvm::createInstructionCombiningPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
         optPM.add(llvm::createPruneEHPass());
 #ifdef ISPC_GENX_ENABLED
         if (g->target->isGenXTarget())
@@ -632,14 +656,22 @@ void Optimize(llvm::Module *module, int optLevel) {
         optPM.add(llvm::createFunctionInliningPass());
         optPM.add(llvm::createInstSimplifyLegacyPass());
         optPM.add(llvm::createDeadCodeEliminationPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
 
         optPM.add(llvm::createArgumentPromotionPass());
 
         optPM.add(llvm::createAggressiveDCEPass());
         optPM.add(llvm::createInstructionCombiningPass(), 241);
         optPM.add(llvm::createJumpThreadingPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
 
         optPM.add(llvm::createSROAPass());
 
@@ -698,7 +730,11 @@ void Optimize(llvm::Module *module, int optLevel) {
         optPM.add(llvm::createDeadArgEliminationPass());
         optPM.add(llvm::createAggressiveDCEPass());
         optPM.add(llvm::createInstructionCombiningPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
 
         if (g->opt.disableHandlePseudoMemoryOps == false) {
             optPM.add(CreateReplacePseudoMemoryOpsPass(), 280);
@@ -717,7 +753,11 @@ void Optimize(llvm::Module *module, int optLevel) {
 
         optPM.add(llvm::createInstructionCombiningPass());
         optPM.add(CreateInstructionSimplifyPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
         optPM.add(llvm::createReassociatePass());
         optPM.add(llvm::createLoopRotatePass());
         optPM.add(llvm::createLICMPass());
@@ -751,7 +791,11 @@ void Optimize(llvm::Module *module, int optLevel) {
         optPM.add(llvm::createCorrelatedValuePropagationPass());
         optPM.add(llvm::createDeadStoreEliminationPass());
         optPM.add(llvm::createAggressiveDCEPass());
+#if ISPC_LLVM_VERSION >= ISPC_LLVM_12_0
+        optPM.add(llvm::createCFGSimplificationPass(simplifyCFGopt));
+#else
         optPM.add(llvm::createCFGSimplificationPass());
+#endif
         optPM.add(llvm::createInstructionCombiningPass());
         optPM.add(CreateInstructionSimplifyPass());
 #ifdef ISPC_GENX_ENABLED
diff --git a/tests/lit-tests/simplifyCFG.ispc b/tests/lit-tests/simplifyCFG.ispc
new file mode 100644
index 00000000..b7de618a
--- /dev/null
+++ b/tests/lit-tests/simplifyCFG.ispc
@@ -0,0 +1,23 @@
+// This test checks if instruction hoisting happens with CFGSimplificationPass.
+// This is verified by checking for all_on/some_on basic blocks in test_cond_uni.
+// These blocks will be optimized away if hoisting happens.
+
+//; RUN: %{ispc} %s --target=host --emit-llvm-text -O2 --nowrap -o - | FileCheck %s
+
+void foo(uniform int &arg0, uniform int &arg1) {
+    if (arg0 < arg1) {
+        uniform int temp = arg1;
+        arg1 = arg0;
+        arg0 = temp;
+    }
+}
+
+//; CHECK: define i32 @test_cond__uni___uniuni
+//; CHECK-NOT: all_on
+//; CHECK-NOT: some_on
+uniform int test_cond__uni(uniform int arg0, uniform int arg1) {
+        foo(arg0, arg1);
+        if (arg0 > arg1)
+            return 0;
+        return 1;
+}
-- 
2.30.0


From 8e067f5d9d9163ab0fb16f8553f664c0c59da374 Mon Sep 17 00:00:00 2001
From: liushuyu <liushuyu011@gmail.com>
Date: Sat, 26 Dec 2020 16:44:01 -0700
Subject: [PATCH] fix build with llvm 11

---
 IGC/Compiler/CISACodeGen/ResolveGAS.cpp                       | 3 ++-
 .../OpenCLPasses/PrivateMemory/PrivateMemoryToSLM.cpp         | 2 +-
 IGC/VectorCompiler/lib/GenXCodeGen/GenXPatternMatch.cpp       | 2 +-
 .../lib/GenXCodeGen/GenXThreadPrivateMemory.cpp               | 4 ++--
 IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.cpp               | 4 ++--
 IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.h                 | 2 +-
 IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h       | 2 +-
 7 files changed, 10 insertions(+), 9 deletions(-)

diff --git a/IGC/Compiler/CISACodeGen/ResolveGAS.cpp b/IGC/Compiler/CISACodeGen/ResolveGAS.cpp
index 090d4fbe..a7e4a46a 100644
--- a/IGC/Compiler/CISACodeGen/ResolveGAS.cpp
+++ b/IGC/Compiler/CISACodeGen/ResolveGAS.cpp
@@ -38,6 +38,7 @@ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include <llvm/ADT/SmallVector.h>
 #include <llvm/ADT/PostOrderIterator.h>
 #include <llvm/Analysis/LoopInfo.h>
+#include <llvm/Analysis/AliasAnalysis.h>
 #include <llvm/IR/IRBuilder.h>
 #include <llvm/IR/NoFolder.h>
 #include <llvm/Pass.h>
@@ -889,4 +890,4 @@ bool GASResolving::checkGenericArguments(Function& F) const {
         }
     }
     return false;
-}
\ No newline at end of file
+}
diff --git a/IGC/Compiler/Optimizer/OpenCLPasses/PrivateMemory/PrivateMemoryToSLM.cpp b/IGC/Compiler/Optimizer/OpenCLPasses/PrivateMemory/PrivateMemoryToSLM.cpp
index fd1e7656..293fcd5e 100644
--- a/IGC/Compiler/Optimizer/OpenCLPasses/PrivateMemory/PrivateMemoryToSLM.cpp
+++ b/IGC/Compiler/Optimizer/OpenCLPasses/PrivateMemory/PrivateMemoryToSLM.cpp
@@ -191,7 +191,7 @@ namespace IGC
             {
                 PointerType* ptrType = dyn_cast<PointerType>(offsets.m_Var->getType());
                 Type* varType = ptrType->getElementType();
-                offset = iSTD::Align(offset, DL.getPreferredAlignment(offsets.m_Var));
+                offset = iSTD::Align(offset, DL.getPreferredAlign(offsets.m_Var).value());
                 offset += (unsigned int) DL.getTypeAllocSize(varType);
             }
 
diff --git a/IGC/VectorCompiler/lib/GenXCodeGen/GenXThreadPrivateMemory.cpp b/IGC/VectorCompiler/lib/GenXCodeGen/GenXThreadPrivateMemory.cpp
index e8529e7a..4421a0eb 100644
--- a/IGC/VectorCompiler/lib/GenXCodeGen/GenXThreadPrivateMemory.cpp
+++ b/IGC/VectorCompiler/lib/GenXCodeGen/GenXThreadPrivateMemory.cpp
@@ -359,7 +359,7 @@ Value *GenXThreadPrivateMemory::lookForPtrReplacement(Value *Ptr) const {
   if (isa<UndefValue>(Ptr)) {
     if (auto PtrVecTy = dyn_cast<VectorType>(PtrTy))
       return UndefValue::get(
-          VectorType::get(MemTy, PtrVecTy->getNumElements()));
+          IGCLLVM::FixedVectorType::get(MemTy, PtrVecTy->getNumElements()));
     return UndefValue::get(MemTy);
   } else if (auto BC = dyn_cast<BitCastInst>(Ptr))
     return lookForPtrReplacement(BC->getOperand(0));
@@ -467,7 +467,7 @@ bool GenXThreadPrivateMemory::replaceShuffleVector(
   Value *NewVec1 = lookForPtrReplacement(Vec1);
   Value *NewVec2 = lookForPtrReplacement(Vec2);
   auto NewShuffleVec = new ShuffleVectorInst(
-      NewVec1, NewVec2, ShuffleVec->getMask(), ShuffleVec->getName() + ".tpm");
+      NewVec1, NewVec2, ShuffleVec->getOperand(2), ShuffleVec->getName() + ".tpm");
   NewShuffleVec->insertAfter(ShuffleVec);
 
   auto CastToOldTy =
diff --git a/IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.cpp b/IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.cpp
index 2de96fb9..f985c13d 100644
--- a/IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.cpp
+++ b/IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.cpp
@@ -356,7 +356,7 @@ bool genx::isIntNot(Instruction *Inst)
  * invertCondition : Invert the given predicate value, possibly reusing
  * an existing copy.
  */
-Value *genx::invertCondition(Value *Condition)
+/*Value *genx::invertCondition(Value *Condition)
 {
   IGC_ASSERT(Condition->getType()->getScalarType()->isIntegerTy(1) &&
       "Condition is not of predicate type");
@@ -384,7 +384,7 @@ Value *genx::invertCondition(Value *Condition)
     Inverted->insertBefore(&*Parent->getFirstInsertionPt());
   }
   return Inverted;
-}
+}*/
 
 /***********************************************************************
  * ShuffleVectorAnalyzer::getAsSlice : see if the shufflevector is a slice on
diff --git a/IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.h b/IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.h
index 431a6b6c..e1792ea7 100644
--- a/IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.h
+++ b/IGC/VectorCompiler/lib/GenXCodeGen/GenXUtil.h
@@ -203,7 +203,7 @@ Value *getMaskOperand(const Instruction *Inst);
 
 // invertCondition : Invert the given predicate value, possibly reusing
 //    an existing copy.
-Value *invertCondition(Value *Condition);
+//Value *invertCondition(Value *Condition);
 
 // if V is a function pointer return function it points to,
 //    nullptr otherwise
diff --git a/IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h b/IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h
index 6cf5f06d..00079a89 100644
--- a/IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h
+++ b/IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h
@@ -96,7 +96,7 @@ namespace IGCLLVM {
 #elif LLVM_VERSION_MAJOR <= 10
         return llvm::MaybeAlign(Val.getAlignment());
 #else
-        return Val.getAlign();
+        return llvm::Align(Val.getAlignment());
 #endif
     }
 
--- intel-graphics-compiler-igc-1.0.5964/IGC/VectorCompiler/lib/GenXCodeGen/GenXLegalization.cpp	2020-12-24 05:04:21.000000000 -0800
+++ intel-graphics-compiler-igc-1.0.5964-bak/IGC/VectorCompiler/lib/GenXCodeGen/GenXLegalization.cpp	2021-01-22 23:10:17.181133688 -0800
@@ -2105,7 +2105,7 @@
   if (OldElemSize * OldNumElems % NewElemSize)
     return nullptr;
   return VectorType::get(NewScalarType,
-                         OldElemSize * OldNumElems / NewElemSize);
+                         OldElemSize * OldNumElems / NewElemSize, false);
 }
 
 /***********************************************************************
--- a/IGC/VectorCompiler/lib/GenXCodeGen/GenXPatternMatch.cpp	2021-01-22 23:18:20.513033428 -0800
+++ b/IGC/VectorCompiler/lib/GenXCodeGen/GenXPatternMatch.cpp	2021-01-22 23:18:36.069213137 -0800
@@ -2281,7 +2281,7 @@
 
   auto createConstant = [](unsigned int OperandWidth, Type *Ty, int Value) {
     return OperandWidth != 0 ? ConstantDataVector::getSplat(
-                                   IGCLLVM::getElementCount(OperandWidth),
+                                   OperandWidth,
                                    ConstantInt::get(Ty, Value))
                              : ConstantInt::get(Ty, Value);
     ;

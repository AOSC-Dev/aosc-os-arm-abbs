diff -Naur intel-graphics-compiler-igc-1.0.6812/IGC/Compiler/ConvertMSAAPayloadTo16Bit.cpp intel-graphics-compiler-igc-1.0.6812-bak/IGC/Compiler/ConvertMSAAPayloadTo16Bit.cpp
--- intel-graphics-compiler-igc-1.0.6812/IGC/Compiler/ConvertMSAAPayloadTo16Bit.cpp	2021-03-22 02:55:24.000000000 -0700
+++ intel-graphics-compiler-igc-1.0.6812-bak/IGC/Compiler/ConvertMSAAPayloadTo16Bit.cpp	2021-04-09 15:55:14.670369025 -0700
@@ -153,15 +153,15 @@
             // There are uses of ldmcs other then ldms, using vector of int32 type.
             // Fix them to use newly created 16bit ldmcs.
             if (ldmcs->getType()->isVectorTy() &&
-                ldmcs->getType()->getVectorElementType() == m_builder->getInt32Ty())
+                cast<VectorType>(ldmcs->getType())->getElementType() == m_builder->getInt32Ty())
             {
                 m_builder->SetInsertPoint(ldmcs);
 
-                uint ldmcsNumOfElements = ldmcs->getType()->getVectorNumElements();
-                uint newLdmcsNumOfElements = new_mcs_call->getType()->getVectorNumElements();
+                uint ldmcsNumOfElements = cast<VectorType>(ldmcs->getType())->getNumElements();
+                uint newLdmcsNumOfElements = cast<VectorType>(new_mcs_call->getType())->getNumElements();
 
                 // vec of 16bit ints to vec of 32bit ints
-                Type* newLdmcsVecType = VectorType::get(m_builder->getInt32Ty(), newLdmcsNumOfElements);
+                Type* newLdmcsVecType = VectorType::get(m_builder->getInt32Ty(), newLdmcsNumOfElements, false);
                 Value* ldmcsExtendedToInt32 = m_builder->CreateSExt(new_mcs_call, newLdmcsVecType);
 
                 // if ldmcs has fewer elements than new ldmcs, extend vector
@@ -175,7 +175,7 @@
                     }
                     auto* pMask = ConstantDataVector::get(I.getContext(), maskVals);
 
-                    ldmcsInt32CorrectlySized = m_builder->CreateShuffleVector(ldmcsExtendedToInt32, UndefValue::get(VectorType::get(m_builder->getInt32Ty(), ldmcsNumOfElements)), pMask);
+                    ldmcsInt32CorrectlySized = m_builder->CreateShuffleVector(ldmcsExtendedToInt32, UndefValue::get(VectorType::get(m_builder->getInt32Ty(), ldmcsNumOfElements, false)), pMask);
                 }
                 else
                 {
diff -Naur intel-graphics-compiler-igc-1.0.6812/IGC/Compiler/Legalizer/InstPromoter.cpp intel-graphics-compiler-igc-1.0.6812-bak/IGC/Compiler/Legalizer/InstPromoter.cpp
--- intel-graphics-compiler-igc-1.0.6812/IGC/Compiler/Legalizer/InstPromoter.cpp	2021-03-22 02:55:24.000000000 -0700
+++ intel-graphics-compiler-igc-1.0.6812-bak/IGC/Compiler/Legalizer/InstPromoter.cpp	2021-04-09 15:48:51.001080379 -0700
@@ -394,10 +394,10 @@
         unsigned N =
             Val->getType()->getScalarSizeInBits() / DestTy->getScalarSizeInBits();
         Value* BC =
-            IRB->CreateBitCast(Val, VectorType::get(DestTy->getScalarType(), N));
+            IRB->CreateBitCast(Val, VectorType::get(DestTy->getScalarType(), N, false));
 
         std::vector<Constant*> Vals;
-        for (unsigned i = 0; i < DestTy->getVectorNumElements(); i++)
+        for (unsigned i = 0; i < cast<VectorType>(DestTy)->getNumElements(); i++)
             Vals.push_back(IRB->getInt32(i));
 
         Value* Mask = ConstantVector::get(Vals);
diff -Naur intel-graphics-compiler-igc-1.0.6812/IGC/Compiler/Optimizer/OpenCLPasses/WIFuncs/WIFuncResolution.cpp intel-graphics-compiler-igc-1.0.6812-bak/IGC/Compiler/Optimizer/OpenCLPasses/WIFuncs/WIFuncResolution.cpp
--- intel-graphics-compiler-igc-1.0.6812/IGC/Compiler/Optimizer/OpenCLPasses/WIFuncs/WIFuncResolution.cpp	2021-03-22 02:55:24.000000000 -0700
+++ intel-graphics-compiler-igc-1.0.6812-bak/IGC/Compiler/Optimizer/OpenCLPasses/WIFuncs/WIFuncResolution.cpp	2021-04-09 15:45:34.096918429 -0700
@@ -28,6 +28,7 @@
 #include "common/LLVMWarningsPush.hpp"
 #include <llvm/IR/Function.h>
 #include <llvm/IR/Instructions.h>
+#include <llvm/IR/DerivedTypes.h>
 #include "common/LLVMWarningsPop.hpp"
 #include "Probe/Assertion.h"
 #include <llvmWrapper/Support/Alignment.h>
@@ -303,7 +304,7 @@
     auto Size = ElemByteSize;
     if (DataType->isVectorTy())
     {
-        Size *= DataType->getVectorNumElements();
+        Size *= cast<VectorType>(DataType)->getNumElements();
     }
     unsigned int AlignedOffset = (Offset / ElemByteSize) * ElemByteSize;
     unsigned int LoadByteSize = (Offset == AlignedOffset) ? Size : Size * 2;
diff -Naur intel-graphics-compiler-igc-1.0.6812/IGC/VectorCompiler/lib/GenXCodeGen/GenXPatternMatch.cpp intel-graphics-compiler-igc-1.0.6812-bak/IGC/VectorCompiler/lib/GenXCodeGen/GenXPatternMatch.cpp
--- intel-graphics-compiler-igc-1.0.6812/IGC/VectorCompiler/lib/GenXCodeGen/GenXPatternMatch.cpp	2021-03-22 02:55:24.000000000 -0700
+++ intel-graphics-compiler-igc-1.0.6812-bak/IGC/VectorCompiler/lib/GenXCodeGen/GenXPatternMatch.cpp	2021-04-09 16:09:00.917881444 -0700
@@ -2233,7 +2233,7 @@
 
 bool GenXPatternMatch::clearDeadInstructions(Function &F) {
   bool Changed = false;
-  SmallVector<Instruction *, 8> ToErase;
+  SmallVector<WeakTrackingVH, 8> ToErase;
   for (auto &Inst : instructions(F))
     if (isInstructionTriviallyDead(&Inst))
       ToErase.push_back(&Inst);

diff --git a/IGC/Compiler/CISACodeGen/ResolveGAS.cpp b/IGC/Compiler/CISACodeGen/ResolveGAS.cpp
index 090d4fbe..a7e4a46a 100644
--- a/IGC/Compiler/CISACodeGen/ResolveGAS.cpp
+++ b/IGC/Compiler/CISACodeGen/ResolveGAS.cpp
@@ -38,6 +38,7 @@ SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 #include <llvm/ADT/SmallVector.h>
 #include <llvm/ADT/PostOrderIterator.h>
 #include <llvm/Analysis/LoopInfo.h>
+#include <llvm/Analysis/AliasAnalysis.h>
 #include <llvm/IR/IRBuilder.h>
 #include <llvm/IR/NoFolder.h>
 #include <llvm/Pass.h>
@@ -889,4 +890,4 @@ bool GASResolving::checkGenericArguments(Function& F) const {
         }
     }
     return false;
-}
\ No newline at end of file
+}
diff --git a/IGC/VectorCompiler/lib/GenXCodeGen/GenXThreadPrivateMemory.cpp b/IGC/VectorCompiler/lib/GenXCodeGen/GenXThreadPrivateMemory.cpp
index e8529e7a..4421a0eb 100644
--- a/IGC/VectorCompiler/lib/GenXCodeGen/GenXThreadPrivateMemory.cpp
+++ b/IGC/VectorCompiler/lib/GenXCodeGen/GenXThreadPrivateMemory.cpp
@@ -359,7 +359,7 @@ Value *GenXThreadPrivateMemory::lookForPtrReplacement(Value *Ptr) const {
   if (isa<UndefValue>(Ptr)) {
     if (auto PtrVecTy = dyn_cast<VectorType>(PtrTy))
       return UndefValue::get(
-          VectorType::get(MemTy, PtrVecTy->getNumElements()));
+          IGCLLVM::FixedVectorType::get(MemTy, PtrVecTy->getNumElements()));
     return UndefValue::get(MemTy);
   } else if (auto BC = dyn_cast<BitCastInst>(Ptr))
     return lookForPtrReplacement(BC->getOperand(0));
@@ -467,7 +467,7 @@ bool GenXThreadPrivateMemory::replaceShuffleVector(
   Value *NewVec1 = lookForPtrReplacement(Vec1);
   Value *NewVec2 = lookForPtrReplacement(Vec2);
   auto NewShuffleVec = new ShuffleVectorInst(
-      NewVec1, NewVec2, ShuffleVec->getMask(), ShuffleVec->getName() + ".tpm");
+      NewVec1, NewVec2, ShuffleVec->getOperand(2), ShuffleVec->getName() + ".tpm");
   NewShuffleVec->insertAfter(ShuffleVec);
 
   auto CastToOldTy =
diff --git a/IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h b/IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h
index 6cf5f06d..00079a89 100644
--- a/IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h
+++ b/IGC/WrapperLLVM/include/llvmWrapper/Support/Alignment.h
@@ -96,7 +96,7 @@ namespace IGCLLVM {
 #elif LLVM_VERSION_MAJOR <= 10
         return llvm::MaybeAlign(Val.getAlignment());
 #else
-        return Val.getAlign();
+        return llvm::Align(Val.getAlignment());
 #endif
     }
 

From 33d9af438ebdde08b483ac37d4533b01c4738718 Mon Sep 17 00:00:00 2001
From: miwu04 <mail@alanlin.icu>
Date: Tue, 5 Nov 2024 01:19:03 +0800
Subject: [PATCH 2/2] Remove auto update feature

---
 src/main/resolve/autoUpdater.ts               | 116 ------------------
 src/main/utils/ipc.ts                         |   5 -
 src/main/utils/template.ts                    |   1 -
 src/renderer/src/App.tsx                      |   3 -
 .../src/components/settings/actions.tsx       |  35 +-----
 .../components/settings/general-config.tsx    |  10 --
 .../src/components/updater/updater-button.tsx |  68 ----------
 .../src/components/updater/updater-modal.tsx  |  94 --------------
 src/renderer/src/utils/ipc.ts                 |  10 --
 src/shared/types.d.ts                         |   1 -
 10 files changed, 1 insertion(+), 342 deletions(-)
 delete mode 100644 src/main/resolve/autoUpdater.ts
 delete mode 100644 src/renderer/src/components/updater/updater-button.tsx
 delete mode 100644 src/renderer/src/components/updater/updater-modal.tsx

diff --git a/src/main/resolve/autoUpdater.ts b/src/main/resolve/autoUpdater.ts
deleted file mode 100644
index b1a1cb1..0000000
--- a/src/main/resolve/autoUpdater.ts
+++ /dev/null
@@ -1,116 +0,0 @@
-import axios from 'axios'
-import yaml from 'yaml'
-import { app, shell } from 'electron'
-import { getControledMihomoConfig } from '../config'
-import { dataDir, exeDir, exePath, isPortable, resourcesFilesDir } from '../utils/dirs'
-import { copyFile, rm, writeFile } from 'fs/promises'
-import path from 'path'
-import { existsSync } from 'fs'
-import os from 'os'
-import { exec, execSync, spawn } from 'child_process'
-import { promisify } from 'util'
-
-export async function checkUpdate(): Promise<IAppVersion | undefined> {
-  const { 'mixed-port': mixedPort = 7890 } = await getControledMihomoConfig()
-  const res = await axios.get(
-    'https://github.com/mihomo-party-org/mihomo-party/releases/latest/download/latest.yml',
-    {
-      headers: { 'Content-Type': 'application/octet-stream' },
-      proxy: {
-        protocol: 'http',
-        host: '127.0.0.1',
-        port: mixedPort
-      },
-      responseType: 'text'
-    }
-  )
-  const latest = yaml.parse(res.data, { merge: true }) as IAppVersion
-  const currentVersion = app.getVersion()
-  if (latest.version !== currentVersion) {
-    return latest
-  } else {
-    return undefined
-  }
-}
-
-export async function downloadAndInstallUpdate(version: string): Promise<void> {
-  const { 'mixed-port': mixedPort = 7890 } = await getControledMihomoConfig()
-  const baseUrl = `https://github.com/mihomo-party-org/mihomo-party/releases/download/v${version}/`
-  const fileMap = {
-    'win32-x64': `mihomo-party-windows-${version}-x64-setup.exe`,
-    'win32-ia32': `mihomo-party-windows-${version}-ia32-setup.exe`,
-    'win32-arm64': `mihomo-party-windows-${version}-arm64-setup.exe`,
-    'darwin-x64': `mihomo-party-macos-${version}-x64.pkg`,
-    'darwin-arm64': `mihomo-party-macos-${version}-arm64.pkg`
-  }
-  let file = fileMap[`${process.platform}-${process.arch}`]
-  if (isPortable()) {
-    file = file.replace('-setup.exe', '-portable.7z')
-  }
-  if (!file) {
-    throw new Error('不支持自动更新，请手动下载更新')
-  }
-  if (process.platform === 'win32' && parseInt(os.release()) < 10) {
-    file = file.replace('windows', 'win7')
-  }
-  if (process.platform === 'darwin') {
-    const productVersion = execSync('sw_vers -productVersion', { encoding: 'utf8' })
-      .toString()
-      .trim()
-    if (parseInt(productVersion) < 11) {
-      file = file.replace('macos', 'catalina')
-    }
-  }
-  try {
-    if (!existsSync(path.join(dataDir(), file))) {
-      const res = await axios.get(`${baseUrl}${file}`, {
-        responseType: 'arraybuffer',
-        proxy: {
-          protocol: 'http',
-          host: '127.0.0.1',
-          port: mixedPort
-        },
-        headers: {
-          'Content-Type': 'application/octet-stream'
-        }
-      })
-      await writeFile(path.join(dataDir(), file), res.data)
-    }
-    if (file.endsWith('.exe')) {
-      spawn(path.join(dataDir(), file), ['/S', '--force-run'], {
-        detached: true,
-        stdio: 'ignore'
-      }).unref()
-    }
-    if (file.endsWith('.7z')) {
-      await copyFile(path.join(resourcesFilesDir(), '7za.exe'), path.join(dataDir(), '7za.exe'))
-      spawn(
-        'cmd',
-        [
-          '/C',
-          `"timeout /t 2 /nobreak >nul && "${path.join(dataDir(), '7za.exe')}" x -o"${exeDir()}" -y "${path.join(dataDir(), file)}" & start "" "${exePath()}""`
-        ],
-        {
-          shell: true,
-          detached: true
-        }
-      ).unref()
-      app.quit()
-    }
-    if (file.endsWith('.pkg')) {
-      try {
-        const execPromise = promisify(exec)
-        const shell = `installer -pkg ${path.join(dataDir(), file).replace(' ', '\\\\ ')} -target /`
-        const command = `do shell script "${shell}" with administrator privileges`
-        await execPromise(`osascript -e '${command}'`)
-        app.relaunch()
-        app.quit()
-      } catch {
-        shell.openPath(path.join(dataDir(), file))
-      }
-    }
-  } catch (e) {
-    rm(path.join(dataDir(), file))
-    throw e
-  }
-}
diff --git a/src/main/utils/ipc.ts b/src/main/utils/ipc.ts
index dd3b9a5..fbcf359 100644
--- a/src/main/utils/ipc.ts
+++ b/src/main/utils/ipc.ts
@@ -53,7 +53,6 @@ import {
 } from '../resolve/server'
 import { manualGrantCorePermition, quitWithoutCore, restartCore } from '../core/manager'
 import { triggerSysProxy } from '../sys/sysproxy'
-import { checkUpdate, downloadAndInstallUpdate } from '../resolve/autoUpdater'
 import {
   getFilePath,
   openFile,
@@ -174,10 +173,6 @@ export function registerIpcMainHandlers(): void {
   ipcMain.handle('readTextFile', (_e, filePath) => ipcErrorWrapper(readTextFile)(filePath))
   ipcMain.handle('getRuntimeConfigStr', ipcErrorWrapper(getRuntimeConfigStr))
   ipcMain.handle('getRuntimeConfig', ipcErrorWrapper(getRuntimeConfig))
-  ipcMain.handle('downloadAndInstallUpdate', (_e, version) =>
-    ipcErrorWrapper(downloadAndInstallUpdate)(version)
-  )
-  ipcMain.handle('checkUpdate', ipcErrorWrapper(checkUpdate))
   ipcMain.handle('getVersion', () => app.getVersion())
   ipcMain.handle('platform', () => process.platform)
   ipcMain.handle('openUWPTool', ipcErrorWrapper(openUWPTool))
diff --git a/src/main/utils/template.ts b/src/main/utils/template.ts
index 91e390f..7ef5735 100644
--- a/src/main/utils/template.ts
+++ b/src/main/utils/template.ts
@@ -11,7 +11,6 @@ export const defaultConfig: IAppConfig = {
   useSubStore: true,
   proxyDisplayMode: 'simple',
   proxyDisplayOrder: 'default',
-  autoCheckUpdate: true,
   autoCloseConnection: true,
   useNameserverPolicy: false,
   controlDns: true,
diff --git a/src/renderer/src/App.tsx b/src/renderer/src/App.tsx
index aef0099..87b03c6 100644
--- a/src/renderer/src/App.tsx
+++ b/src/renderer/src/App.tsx
@@ -26,7 +26,6 @@ import ConnCard from '@renderer/components/sider/conn-card'
 import LogCard from '@renderer/components/sider/log-card'
 import MihomoCoreCard from '@renderer/components/sider/mihomo-core-card'
 import ResourceCard from '@renderer/components/sider/resource-card'
-import UpdaterButton from '@renderer/components/updater/updater-button'
 import { useAppConfig } from '@renderer/hooks/use-app-config'
 import { applyTheme, setNativeTheme, setTitleBarOverlay } from '@renderer/utils/ipc'
 import { platform } from '@renderer/utils/init'
@@ -200,7 +199,6 @@ const App: React.FC = () => {
             {platform !== 'darwin' && (
               <MihomoIcon className="h-[32px] leading-[32px] text-lg mx-[1px]" />
             )}
-            <UpdaterButton iconOnly={true} />
           </div>
           <div className="h-[calc(100%-110px)] overflow-y-auto no-scrollbar">
             <div className="h-full w-full flex flex-col gap-2">
@@ -239,7 +237,6 @@ const App: React.FC = () => {
                 <MihomoIcon className="h-[32px] leading-[32px] text-lg mx-[1px]" />
                 <h3 className="text-lg font-bold leading-[32px]">ihomo Party</h3>
               </div>
-              <UpdaterButton />
               <Button
                 size="sm"
                 className="app-nodrag"
diff --git a/src/renderer/src/components/settings/actions.tsx b/src/renderer/src/components/settings/actions.tsx
index e446486..ff9358e 100644
--- a/src/renderer/src/components/settings/actions.tsx
+++ b/src/renderer/src/components/settings/actions.tsx
@@ -1,9 +1,8 @@
 import { Button, Tooltip } from '@nextui-org/react'
 import SettingCard from '../base/base-setting-card'
 import SettingItem from '../base/base-setting-item'
-import { checkUpdate, createHeapSnapshot, quitApp, quitWithoutCore } from '@renderer/utils/ipc'
+import { createHeapSnapshot, quitApp, quitWithoutCore } from '@renderer/utils/ipc'
 import { useState } from 'react'
-import UpdaterModal from '../updater/updater-modal'
 import { version } from '@renderer/utils/init'
 import { IoIosHelpCircle } from 'react-icons/io'
 import { firstDriver } from '@renderer/App'
@@ -16,44 +15,12 @@ const Actions: React.FC = () => {
 
   return (
     <>
-      {openUpdate && (
-        <UpdaterModal
-          onClose={() => setOpenUpdate(false)}
-          version={newVersion}
-          changelog={changelog}
-        />
-      )}
       <SettingCard>
         <SettingItem title="打开引导页面" divider>
           <Button size="sm" onPress={() => firstDriver.drive()}>
             打开引导页面
           </Button>
         </SettingItem>
-        <SettingItem title="检查更新" divider>
-          <Button
-            size="sm"
-            isLoading={checkingUpdate}
-            onPress={async () => {
-              try {
-                setCheckingUpdate(true)
-                const version = await checkUpdate()
-                if (version) {
-                  setNewVersion(version.version)
-                  setChangelog(version.changelog)
-                  setOpenUpdate(true)
-                } else {
-                  new window.Notification('当前已是最新版本', { body: '无需更新' })
-                }
-              } catch (e) {
-                alert(e)
-              } finally {
-                setCheckingUpdate(false)
-              }
-            }}
-          >
-            检查更新
-          </Button>
-        </SettingItem>
         <SettingItem
           title="创建堆快照"
           actions={
diff --git a/src/renderer/src/components/settings/general-config.tsx b/src/renderer/src/components/settings/general-config.tsx
index c595074..f74e4c9 100644
--- a/src/renderer/src/components/settings/general-config.tsx
+++ b/src/renderer/src/components/settings/general-config.tsx
@@ -49,7 +49,6 @@ const GeneralConfig: React.FC = () => {
     autoQuitWithoutCoreDelay = 60,
     customTheme = 'default.css',
     envType = [platform === 'win32' ? 'powershell' : 'bash'],
-    autoCheckUpdate,
     appTheme = 'system'
   } = appConfig || {}
 
@@ -92,15 +91,6 @@ const GeneralConfig: React.FC = () => {
             }}
           />
         </SettingItem>
-        <SettingItem title="自动检查更新" divider>
-          <Switch
-            size="sm"
-            isSelected={autoCheckUpdate}
-            onValueChange={(v) => {
-              patchAppConfig({ autoCheckUpdate: v })
-            }}
-          />
-        </SettingItem>
         <SettingItem title="静默启动" divider>
           <Switch
             size="sm"
diff --git a/src/renderer/src/components/updater/updater-button.tsx b/src/renderer/src/components/updater/updater-button.tsx
deleted file mode 100644
index d3da9e0..0000000
--- a/src/renderer/src/components/updater/updater-button.tsx
+++ /dev/null
@@ -1,68 +0,0 @@
-import { Button } from '@nextui-org/react'
-import { useAppConfig } from '@renderer/hooks/use-app-config'
-import { checkUpdate } from '@renderer/utils/ipc'
-import React, { useState } from 'react'
-import useSWR from 'swr'
-import UpdaterModal from './updater-modal'
-import { platform } from '@renderer/utils/init'
-import { MdNewReleases } from 'react-icons/md'
-
-interface Props {
-  iconOnly?: boolean
-}
-
-const UpdaterButton: React.FC<Props> = (props) => {
-  const { appConfig } = useAppConfig()
-  const { iconOnly } = props
-  const { autoCheckUpdate, useWindowFrame = false } = appConfig || {}
-  const [openModal, setOpenModal] = useState(false)
-  const { data: latest } = useSWR(
-    autoCheckUpdate ? 'checkUpdate' : undefined,
-    autoCheckUpdate ? checkUpdate : (): undefined => {},
-    {
-      refreshInterval: 1000 * 60 * 10
-    }
-  )
-  if (!latest) return null
-
-  return (
-    <>
-      {openModal && (
-        <UpdaterModal
-          version={latest.version}
-          changelog={latest.changelog}
-          onClose={() => {
-            setOpenModal(false)
-          }}
-        />
-      )}
-      {iconOnly ? (
-        <Button
-          isIconOnly
-          variant="flat"
-          className={`fixed rounded-full app-nodrag`}
-          color="danger"
-          size="md"
-          onPress={() => {
-            setOpenModal(true)
-          }}
-        >
-          <MdNewReleases className="text-[35px]" />
-        </Button>
-      ) : (
-        <Button
-          className={`fixed left-[85px] app-nodrag ${!useWindowFrame && platform === 'darwin' ? 'ml-[60px]' : ''}`}
-          color="danger"
-          size="sm"
-          onPress={() => {
-            setOpenModal(true)
-          }}
-        >
-          v{latest.version}
-        </Button>
-      )}
-    </>
-  )
-}
-
-export default UpdaterButton
diff --git a/src/renderer/src/components/updater/updater-modal.tsx b/src/renderer/src/components/updater/updater-modal.tsx
deleted file mode 100644
index 4f13c41..0000000
--- a/src/renderer/src/components/updater/updater-modal.tsx
+++ /dev/null
@@ -1,94 +0,0 @@
-import {
-  Modal,
-  ModalContent,
-  ModalHeader,
-  ModalBody,
-  ModalFooter,
-  Button,
-  Code
-} from '@nextui-org/react'
-import ReactMarkdown from 'react-markdown'
-import React, { useState } from 'react'
-import { downloadAndInstallUpdate } from '@renderer/utils/ipc'
-
-interface Props {
-  version: string
-  changelog: string
-  onClose: () => void
-}
-const UpdaterModal: React.FC<Props> = (props) => {
-  const { version, changelog, onClose } = props
-  const [downloading, setDownloading] = useState(false)
-  const onUpdate = async (): Promise<void> => {
-    try {
-      await downloadAndInstallUpdate(version)
-    } catch (e) {
-      alert(e)
-    }
-  }
-
-  return (
-    <Modal
-      backdrop="blur"
-      classNames={{ backdrop: 'top-[48px]' }}
-      hideCloseButton
-      isOpen={true}
-      onOpenChange={onClose}
-      scrollBehavior="inside"
-    >
-      <ModalContent className="h-full w-[calc(100%-100px)]">
-        <ModalHeader className="flex justify-between app-drag">
-          <div>v{version} 版本就绪</div>
-          <Button
-            color="primary"
-            size="sm"
-            className="flex app-nodrag"
-            onPress={() => {
-              open(`https://github.com/mihomo-party-org/mihomo-party/releases/tag/v${version}`)
-            }}
-          >
-            前往下载
-          </Button>
-        </ModalHeader>
-        <ModalBody className="h-full">
-          <ReactMarkdown
-            className="markdown-body select-text"
-            components={{
-              a: ({ ...props }) => <a target="_blank" className="text-primary" {...props} />,
-              code: ({ children }) => <Code size="sm">{children}</Code>,
-              h3: ({ ...props }) => <h3 className="text-lg font-bold" {...props} />,
-              li: ({ children }) => <li className="list-disc list-inside">{children}</li>
-            }}
-          >
-            {changelog}
-          </ReactMarkdown>
-        </ModalBody>
-        <ModalFooter>
-          <Button size="sm" variant="light" onPress={onClose}>
-            取消
-          </Button>
-          <Button
-            size="sm"
-            color="primary"
-            isLoading={downloading}
-            onPress={async () => {
-              try {
-                setDownloading(true)
-                await onUpdate()
-                onClose()
-              } catch (e) {
-                alert(e)
-              } finally {
-                setDownloading(false)
-              }
-            }}
-          >
-            更新
-          </Button>
-        </ModalFooter>
-      </ModalContent>
-    </Modal>
-  )
-}
-
-export default UpdaterModal
diff --git a/src/renderer/src/utils/ipc.ts b/src/renderer/src/utils/ipc.ts
index 1097967..646f312 100644
--- a/src/renderer/src/utils/ipc.ts
+++ b/src/renderer/src/utils/ipc.ts
@@ -221,16 +221,6 @@ export async function getRuntimeConfig(): Promise<IMihomoConfig> {
   return ipcErrorWrapper(await window.electron.ipcRenderer.invoke('getRuntimeConfig'))
 }
 
-export async function checkUpdate(): Promise<IAppVersion | undefined> {
-  return ipcErrorWrapper(await window.electron.ipcRenderer.invoke('checkUpdate'))
-}
-
-export async function downloadAndInstallUpdate(version: string): Promise<void> {
-  return ipcErrorWrapper(
-    await window.electron.ipcRenderer.invoke('downloadAndInstallUpdate', version)
-  )
-}
-
 export async function getVersion(): Promise<string> {
   return ipcErrorWrapper(await window.electron.ipcRenderer.invoke('getVersion'))
 }
diff --git a/src/shared/types.d.ts b/src/shared/types.d.ts
index 4644c00..f034d9a 100644
--- a/src/shared/types.d.ts
+++ b/src/shared/types.d.ts
@@ -258,7 +258,6 @@ interface IAppConfig {
   siderWidth: number
   appTheme: AppTheme
   customTheme?: string
-  autoCheckUpdate: boolean
   silentStart: boolean
   autoCloseConnection: boolean
   sysProxy: ISysProxyConfig
-- 
2.47.0


From d4691f735b52ea2c14abea503c3c7f2f92ee68c5 Mon Sep 17 00:00:00 2001
From: Tianhao Chai <cth451@gmail.com>
Date: Sun, 7 Nov 2021 18:19:12 -0600
Subject: [PATCH] Explicit cast drawSometing parameters to integers

---
 source/frontend/widgets/digitalpeakmeter.py | 58 ++++++++++++---------
 source/frontend/widgets/scalabledial.py     | 15 ++++--
 2 files changed, 42 insertions(+), 31 deletions(-)

diff --git a/source/frontend/widgets/digitalpeakmeter.py b/source/frontend/widgets/digitalpeakmeter.py
index b5e27c4f9..92a602949 100644
--- a/source/frontend/widgets/digitalpeakmeter.py
+++ b/source/frontend/widgets/digitalpeakmeter.py
@@ -21,13 +21,12 @@
 
 from math import sqrt
 
-from PyQt5.QtCore import qCritical, Qt, QTimer, QSize
+from PyQt5.QtCore import qCritical, Qt, QTimer, QSize, QPoint, QRect
 from PyQt5.QtGui import QColor, QLinearGradient, QPainter, QPen, QPixmap
 from PyQt5.QtWidgets import QWidget
 
 # ------------------------------------------------------------------------------------------------------------
 # Widget Class
-
 class DigitalPeakMeter(QWidget):
     # enum Color
     COLOR_GREEN = 1
@@ -296,6 +295,13 @@ class DigitalPeakMeter(QWidget):
         return QSize(self.width(), self.height())
 
     # --------------------------------------------------------------------------------------------------------
+    # Dirty Hacks
+    def __drawLineWrapper(self, painter: QPainter, x1, y1, x2, y2):
+        painter.drawLine(int(x1), int(y1), int(x2), int(y2))
+
+    def __drawRectWrapper(self, painter: QPainter, x1, y1, x2, y2):
+        painter.drawRect(int(x1), int(y1), int(x2), int(y2))
+
 
     def drawCalf(self, event):
         painter = QPainter(self)
@@ -305,7 +311,7 @@ class DigitalPeakMeter(QWidget):
         if self.fChannelCount == 0:
             painter.setPen(QPen(Qt.black, 2))
             painter.setBrush(Qt.black)
-            painter.drawRect(0, 0, self.width(), self.height())
+            self.__drawRectWrapper(painter, 0, 0, self.width(), self.height())
             return
 
         for i in range(self.fChannelCount):
@@ -334,7 +340,7 @@ class DigitalPeakMeter(QWidget):
         # draw background
         painter.setPen(QPen(self.fMeterBackground, 2))
         painter.setBrush(self.fMeterBackground)
-        painter.drawRect(0, 0, width, height)
+        self.__drawRectWrapper(painter, 0, 0, width, height)
 
         if self.fChannelCount == 0:
             return
@@ -362,9 +368,9 @@ class DigitalPeakMeter(QWidget):
             if level == 0.0:
                 pass
             elif self.fMeterOrientation == self.HORIZONTAL:
-                painter.drawRect(0, meterPos, int(sqrt(level) * float(width)), meterSize)
+                self.__drawRectWrapper(painter, 0, meterPos, int(sqrt(level) * float(width)), meterSize)
             elif self.fMeterOrientation == self.VERTICAL:
-                painter.drawRect(meterPos, height - int(sqrt(level) * float(height)), meterSize, height)
+                self.__drawRectWrapper(painter, meterPos, height - int(sqrt(level) * float(height)), meterSize, height)
 
             meterPos += meterSize+meterPad
 
@@ -379,32 +385,32 @@ class DigitalPeakMeter(QWidget):
 
             if self.fMeterStyle == self.STYLE_OPENAV:
                 painter.setPen(QColor(37, 37, 37, 100))
-                painter.drawLine(lsmall * 0.25, 2, lsmall * 0.25, lfull-2.0)
-                painter.drawLine(lsmall * 0.50, 2, lsmall * 0.50, lfull-2.0)
-                painter.drawLine(lsmall * 0.75, 2, lsmall * 0.75, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.25, 2, lsmall * 0.25, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.50, 2, lsmall * 0.50, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.75, 2, lsmall * 0.75, lfull-2.0)
 
                 if self.fChannelCount > 1:
-                    painter.drawLine(1, lfull/2-1, lsmall-1, lfull/2-1)
+                    self.__drawLineWrapper(painter, 1, lfull/2-1, lsmall-1, lfull/2-1)
 
             else:
                 # Base
                 painter.setBrush(Qt.black)
                 painter.setPen(QPen(self.fMeterColorBaseAlt, 1))
-                painter.drawLine(lsmall * 0.25, 2, lsmall * 0.25, lfull-2.0)
-                painter.drawLine(lsmall * 0.50, 2, lsmall * 0.50, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.25, 2, lsmall * 0.25, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.50, 2, lsmall * 0.50, lfull-2.0)
 
                 # Yellow
                 painter.setPen(QColor(110, 110, 15, 100))
-                painter.drawLine(lsmall * 0.70, 2, lsmall * 0.70, lfull-2.0)
-                painter.drawLine(lsmall * 0.83, 2, lsmall * 0.83, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.70, 2, lsmall * 0.70, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.83, 2, lsmall * 0.83, lfull-2.0)
 
                 # Orange
                 painter.setPen(QColor(180, 110, 15, 100))
-                painter.drawLine(lsmall * 0.90, 2, lsmall * 0.90, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.90, 2, lsmall * 0.90, lfull-2.0)
 
                 # Red
                 painter.setPen(QColor(110, 15, 15, 100))
-                painter.drawLine(lsmall * 0.96, 2, lsmall * 0.96, lfull-2.0)
+                self.__drawLineWrapper(painter, lsmall * 0.96, 2, lsmall * 0.96, lfull-2.0)
 
         elif self.fMeterOrientation == self.VERTICAL:
             # Variables
@@ -413,32 +419,32 @@ class DigitalPeakMeter(QWidget):
 
             if self.fMeterStyle == self.STYLE_OPENAV:
                 painter.setPen(QColor(37, 37, 37, 100))
-                painter.drawLine(2, lsmall - (lsmall * 0.25), lfull-2.0, lsmall - (lsmall * 0.25))
-                painter.drawLine(2, lsmall - (lsmall * 0.50), lfull-2.0, lsmall - (lsmall * 0.50))
-                painter.drawLine(2, lsmall - (lsmall * 0.75), lfull-2.0, lsmall - (lsmall * 0.75))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.25), lfull-2.0, lsmall - (lsmall * 0.25))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.50), lfull-2.0, lsmall - (lsmall * 0.50))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.75), lfull-2.0, lsmall - (lsmall * 0.75))
 
                 if self.fChannelCount > 1:
-                    painter.drawLine(lfull/2-1, 1, lfull/2-1, lsmall-1)
+                    self.__drawLineWrapper(painter, lfull/2-1, 1, lfull/2-1, lsmall-1)
 
             else:
                 # Base
                 painter.setBrush(Qt.black)
                 painter.setPen(QPen(self.fMeterColorBaseAlt, 1))
-                painter.drawLine(2, lsmall - (lsmall * 0.25), lfull-2.0, lsmall - (lsmall * 0.25))
-                painter.drawLine(2, lsmall - (lsmall * 0.50), lfull-2.0, lsmall - (lsmall * 0.50))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.25), lfull-2.0, lsmall - (lsmall * 0.25))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.50), lfull-2.0, lsmall - (lsmall * 0.50))
 
                 # Yellow
                 painter.setPen(QColor(110, 110, 15, 100))
-                painter.drawLine(2, lsmall - (lsmall * 0.70), lfull-2.0, lsmall - (lsmall * 0.70))
-                painter.drawLine(2, lsmall - (lsmall * 0.82), lfull-2.0, lsmall - (lsmall * 0.82))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.70), lfull-2.0, lsmall - (lsmall * 0.70))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.82), lfull-2.0, lsmall - (lsmall * 0.82))
 
                 # Orange
                 painter.setPen(QColor(180, 110, 15, 100))
-                painter.drawLine(2, lsmall - (lsmall * 0.90), lfull-2.0, lsmall - (lsmall * 0.90))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.90), lfull-2.0, lsmall - (lsmall * 0.90))
 
                 # Red
                 painter.setPen(QColor(110, 15, 15, 100))
-                painter.drawLine(2, lsmall - (lsmall * 0.96), lfull-2.0, lsmall - (lsmall * 0.96))
+                self.__drawLineWrapper(painter, 2, lsmall - (lsmall * 0.96), lfull-2.0, lsmall - (lsmall * 0.96))
 
     # --------------------------------------------------------------------------------------------------------
 
diff --git a/source/frontend/widgets/scalabledial.py b/source/frontend/widgets/scalabledial.py
index 65a2f3c7f..dbdd7cb02 100644
--- a/source/frontend/widgets/scalabledial.py
+++ b/source/frontend/widgets/scalabledial.py
@@ -116,11 +116,16 @@ class ScalableDial(QDial):
 
         # Fake internal value, custom precision
         QDial.setMinimum(self, 0)
-        QDial.setMaximum(self, self.fPrecision)
+        QDial.setMaximum(self, int(self.fPrecision))
         QDial.setValue(self, 0)
 
         self.valueChanged.connect(self.slot_valueChanged)
 
+    # -----------------------------------------------------------------------------------------------------
+    # Dirty Hacks
+    def __drawArcWrapper(self, painter, x1, y1, x2, y2, startAngle, spanAngle):
+        painter.drawArc(int(x1), int(y1), int(x2), int(y2), int(startAngle), int(spanAngle))
+
     def getIndex(self):
         return self.fIndex
 
@@ -250,7 +255,7 @@ class ScalableDial(QDial):
     def setPrecision(self, value, isInteger):
         self.fPrecision = value
         self.fIsInteger = isInteger
-        QDial.setMaximum(self, value)
+        QDial.setMaximum(self, int(value))
 
     def setMinimum(self, value):
         self.fMinimum = value
@@ -437,7 +442,7 @@ class ScalableDial(QDial):
                     painter.setBrush(colorBlue)
                     painter.setPen(QPen(colorBlue, 3))
 
-                painter.drawArc(4.0, 4.0, 26.0, 26.0, startAngle, spanAngle)
+                self.__drawArcWrapper(painter, 4.0, 4.0, 26.0, 26.0, startAngle, spanAngle)
 
             # Custom knobs (L and R)
             elif self.fCustomPaintMode in (self.CUSTOM_PAINT_MODE_CARLA_L, self.CUSTOM_PAINT_MODE_CARLA_R):
@@ -466,7 +471,7 @@ class ScalableDial(QDial):
                     spanAngle  = 255.0*16*(1.0-normValue)
 
                 painter.setPen(QPen(color, 2.5))
-                painter.drawArc(3.5, 3.5, 22.0, 22.0, startAngle, spanAngle)
+                self.__drawArcWrapper(painter, 3.5, 3.5, 22.0, 22.0, startAngle, spanAngle)
 
             # Custom knobs (Color)
             elif self.fCustomPaintMode == self.CUSTOM_PAINT_MODE_COLOR:
@@ -491,7 +496,7 @@ class ScalableDial(QDial):
 
                 painter.setBrush(color)
                 painter.setPen(QPen(color, 3))
-                painter.drawArc(4.0, 4.8, 26.0, 26.0, startAngle, spanAngle)
+                self.__drawArcWrapper(painter, 4.0, 4.8, 26.0, 26.0, startAngle, spanAngle)
 
             # Custom knobs (Zita)
             elif self.fCustomPaintMode == self.CUSTOM_PAINT_MODE_ZITA:
-- 
2.30.2


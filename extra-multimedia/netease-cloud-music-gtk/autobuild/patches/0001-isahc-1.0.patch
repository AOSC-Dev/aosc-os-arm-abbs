From 37da2a0f3a9c194bd24f91e511b5a00dc7940e46 Mon Sep 17 00:00:00 2001
From: gmg137 <gmg137@live.com>
Date: Thu, 31 Dec 2020 15:34:16 +0800
Subject: [PATCH] =?UTF-8?q?=E4=BF=AE=E5=A4=8D=20isahc=201.0=20=E7=89=88?=
 =?UTF-8?q?=E6=9C=AC=E5=85=BC=E5=AE=B9=E9=97=AE=E9=A2=98?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 Cargo.toml          |  2 +-
 src/musicapi/mod.rs |  6 +++---
 src/utils.rs        | 10 +++++++---
 3 files changed, 11 insertions(+), 7 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index bbd3bf2..a64cdcb 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -36,7 +36,7 @@ fragile = "*"
 xdg = "*"
 futures = "^0.3"
 async-std = "^1.6.1"
-isahc = { version = "*", features = ["cookies"] }
+isahc = { version = "^1.0.1", features = ["cookies"] }
 custom_error = "*"
 
 log = "*"
diff --git a/src/musicapi/mod.rs b/src/musicapi/mod.rs
index f6e08a0..4eb508b 100644
--- a/src/musicapi/mod.rs
+++ b/src/musicapi/mod.rs
@@ -7,7 +7,7 @@ mod encrypt;
 pub(crate) mod model;
 use crate::model::{Errors, NCMResult};
 use encrypt::Crypto;
-use isahc::prelude::*;
+use isahc::{prelude::*, *};
 use lazy_static::lazy_static;
 use model::*;
 use regex::Regex;
@@ -128,14 +128,14 @@ impl MusicApi {
                         }
                     }
                 }
-                response.text_async().await.map_err(|_| Errors::NoneError)
+                response.text().await.map_err(|_| Errors::NoneError)
             }
             Method::GET => self
                 .client
                 .get_async(&url)
                 .await
                 .map_err(|_| Errors::NoneError)?
-                .text_async()
+                .text()
                 .await
                 .map_err(|_| Errors::NoneError),
         }
diff --git a/src/utils.rs b/src/utils.rs
index 5369310..ba25516 100644
--- a/src/utils.rs
+++ b/src/utils.rs
@@ -20,7 +20,7 @@ use cairo::{Context, ImageSurface};
 use gdk::{pixbuf_get_from_surface, prelude::GdkContextExt};
 use gdk_pixbuf::Pixbuf;
 use glib::Sender;
-use isahc::{prelude::*, ResponseExt};
+use isahc::{prelude::*, *};
 use rand::{seq::SliceRandom, thread_rng};
 use serde::{Deserialize, Serialize};
 use std::{io, io::Error, time::Duration};
@@ -43,7 +43,9 @@ where
         let mut response = client.get_async(music_url).await?;
         if response.status().is_success() {
             let tmp_path = format!("{}.tmp", path);
-            response.copy_to_file(&tmp_path)?;
+            let mut buf = vec![];
+            response.copy_to(&mut buf).await?;
+            fs::write(&tmp_path, buf).await?;
             fs::rename(&tmp_path, path).await?;
         }
     }
@@ -69,7 +71,9 @@ where
         let client = HttpClient::builder().timeout(Duration::from_millis(timeout)).build()?;
         let mut response = client.get_async(image_url).await?;
         if response.status().is_success() {
-            response.copy_to_file(path)?;
+            let mut buf = vec![];
+            response.copy_to(&mut buf).await?;
+            fs::write(&path, buf).await?;
         }
     }
     Ok(())
-- 
2.30.0


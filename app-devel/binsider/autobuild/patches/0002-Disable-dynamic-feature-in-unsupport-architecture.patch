From beb35576817d41128e32a6177f047e6891fc7d9c Mon Sep 17 00:00:00 2001
From: eatradish <sakiiily@aosc.io>
Date: Sat, 14 Sep 2024 00:36:05 +0800
Subject: [PATCH 2/2] Disable dynamic feature in unsupport architecture

---
 Cargo.toml         |   5 +-
 src/app.rs         |   5 +-
 src/lib.rs         |   4 ++
 src/tui/command.rs |   2 +
 src/tui/event.rs   |   7 ++-
 src/tui/state.rs   | 126 +++++++++++++++++++++++++++++++++++++++++++++
 src/tui/ui.rs      |  72 +++++++++++++++++++++++++-
 7 files changed, 217 insertions(+), 4 deletions(-)

diff --git a/Cargo.toml b/Cargo.toml
index cb92184..52bd709 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -30,7 +30,6 @@ tui-input = "0.10.1"
 tui-popup = "0.5.0"
 unicode-width = "0.1.11"
 textwrap = "0.16.1"
-lurk-cli = { git = "https://github.com/JakWai01/lurk", rev = "f28e066dc5da831d2b3db66eb43d4677864d0c54" }
 nix = { version = "0.29.0", features = ["ptrace", "signal"] }
 ansi-to-tui = "6.0.0"
 console = "0.15.8"
@@ -44,6 +43,10 @@ webbrowser = "1.0.1"
 lddtree = "0.3.5"
 itertools = "0.13.0"
 
+
+[target.'cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch="riscv64"))'.dependencies]
+lurk-cli = { git = "https://github.com/JakWai01/lurk", rev = "f28e066dc5da831d2b3db66eb43d4677864d0c54" }
+
 [dev-dependencies]
 pretty_assertions = "1.4.0"
 
diff --git a/src/app.rs b/src/app.rs
index 7b766d5..2062a8a 100644
--- a/src/app.rs
+++ b/src/app.rs
@@ -2,9 +2,10 @@ use crate::{
     elf::Elf,
     error::{Error, Result},
     file::FileInfo,
-    tracer::TraceData,
     tui::event::Event,
 };
+    #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
+use crate::tracer::TraceData;
 use elf::{endian::AnyEndian, ElfBytes};
 use heh::app::Application as Heh;
 use heh::decoder::Encoding;
@@ -32,6 +33,7 @@ pub struct Analyzer<'a> {
     pub strings_len: usize,
     /// Heh application.
     pub heh: Heh,
+    #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
     /// Tracer data.
     pub tracer: TraceData,
     /// System calls.
@@ -67,6 +69,7 @@ impl<'a> Analyzer<'a> {
             strings: None,
             strings_len,
             heh,
+                #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
             tracer: TraceData::default(),
             system_calls: Vec::new(),
             dependencies,
diff --git a/src/lib.rs b/src/lib.rs
index dc34fd8..4fbb0b4 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -19,6 +19,7 @@ pub mod args;
 /// Error handler implementation.
 pub mod error;
 
+    #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
 /// System call tracer.
 pub mod tracer;
 
@@ -34,6 +35,7 @@ use prelude::*;
 use ratatui::backend::CrosstermBackend;
 use ratatui::Terminal;
 use std::{env, fs, io};
+    #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
 use tracer::TraceData;
 use tui::{state::State, ui::Tab, Tui};
 
@@ -101,11 +103,13 @@ pub fn start_tui(analyzer: Analyzer, args: Args) -> Result<()> {
                     state.handle_tab()?;
                 }
             }
+                #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
             Event::Trace => {
                 state.system_calls_loaded = false;
                 tui.toggle_pause()?;
                 tracer::trace_syscalls(state.analyzer.file.path, tui.events.sender.clone());
             }
+                #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
             Event::TraceResult(syscalls) => {
                 state.analyzer.tracer = match syscalls {
                     Ok(v) => v,
diff --git a/src/tui/command.rs b/src/tui/command.rs
index e31c64c..14d927e 100644
--- a/src/tui/command.rs
+++ b/src/tui/command.rs
@@ -39,6 +39,7 @@ pub enum Command {
     Input(InputCommand),
     /// Hexdump command.
     Hexdump(HexdumpCommand),
+        #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
     /// Trace system calls.
     TraceCalls,
     /// Exit application.
@@ -96,6 +97,7 @@ impl From<KeyEvent> for Command {
             KeyCode::Backspace => Self::Input(InputCommand::Resume(Event::Key(key_event))),
             KeyCode::Enter => Self::ShowDetails,
             KeyCode::Char('o') => Self::OpenRepo,
+                #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
             KeyCode::Char('r') => Self::TraceCalls,
             _ => Self::Nothing,
         }
diff --git a/src/tui/event.rs b/src/tui/event.rs
index 6d94e2b..d2aa04b 100644
--- a/src/tui/event.rs
+++ b/src/tui/event.rs
@@ -1,4 +1,7 @@
-use crate::{error::Result, tracer::TraceData};
+use crate::error::Result;
+    #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
+use crate::tracer::TraceData;
+
 use ratatui::crossterm::event::{self, Event as CrosstermEvent, KeyEvent, MouseEvent};
 use std::path::PathBuf;
 use std::sync::{
@@ -21,8 +24,10 @@ pub enum Event {
     Resize(u16, u16),
     /// Result of `strings` call.
     FileStrings(Result<Vec<(String, u64)>>),
+        #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
     /// Trace system calls.
     Trace,
+        #[cfg(any(target_arch = "x86_64", target_arch = "aarch64", target_arch = "riscv64"))]
     /// Results of tracer.
     TraceResult(Result<TraceData>),
     /// Restart TUI with a new path.
diff --git a/src/tui/state.rs b/src/tui/state.rs
index c69c721..5ee14eb 100644
--- a/src/tui/state.rs
+++ b/src/tui/state.rs
@@ -7,6 +7,11 @@ use crate::tui::command::*;
 use crate::tui::event::Event;
 use crate::tui::ui::{Tab, ELF_INFO_TABS, MAIN_TABS};
 use crate::tui::widgets::SelectableList;
+#[cfg(any(
+    target_arch = "x86_64",
+    target_arch = "aarch64",
+    target_arch = "riscv64"
+))]
 use ansi_to_tui::IntoText;
 use heh::windows::Window;
 use tui_input::backend::crossterm::EventHandler;
@@ -85,11 +90,21 @@ impl<'a> State<'a> {
                 match command {
                     InputCommand::Handle(event) => {
                         self.input.handle_event(&event);
+                        #[cfg(any(
+                            target_arch = "x86_64",
+                            target_arch = "aarch64",
+                            target_arch = "riscv64"
+                        ))]
                         if self.tab == Tab::DynamicAnalysis {
                             self.dynamic_scroll_index = 0;
                         }
                     }
                     InputCommand::Enter => {
+                        #[cfg(any(
+                            target_arch = "x86_64",
+                            target_arch = "aarch64",
+                            target_arch = "riscv64"
+                        ))]
                         if self.tab != Tab::DynamicAnalysis || self.system_calls_loaded {
                             self.input_mode = true;
                         }
@@ -166,6 +181,27 @@ impl<'a> State<'a> {
                 }
             },
             Command::ShowDetails => {
+                #[cfg(not(any(
+                    target_arch = "x86_64",
+                    target_arch = "aarch64",
+                    target_arch = "riscv64"
+                )))]
+                if self.tab == Tab::General {
+                    if let Some(path) = self.list.selected().map(|v| PathBuf::from(v[1].clone())) {
+                        event_sender
+                            .send(Event::Restart(Some(path)))
+                            .expect("failed to send trace event");
+                    }
+                    return Ok(());
+                } else {
+                    self.show_details = !self.show_details;
+                }
+
+                #[cfg(any(
+                    target_arch = "x86_64",
+                    target_arch = "aarch64",
+                    target_arch = "riscv64"
+                ))]
                 if self.tab == Tab::General {
                     if let Some(path) = self.list.selected().map(|v| PathBuf::from(v[1].clone())) {
                         event_sender
@@ -187,6 +223,11 @@ impl<'a> State<'a> {
                     webbrowser::open(env!("CARGO_PKG_HOMEPAGE"))?;
                 }
             }
+            #[cfg(any(
+                target_arch = "x86_64",
+                target_arch = "aarch64",
+                target_arch = "riscv64"
+            ))]
             Command::TraceCalls => {
                 event_sender
                     .send(Event::Trace)
@@ -210,6 +251,11 @@ impl<'a> State<'a> {
                     }
                 }
                 ScrollType::List => {
+                    #[cfg(any(
+                        target_arch = "x86_64",
+                        target_arch = "aarch64",
+                        target_arch = "riscv64"
+                    ))]
                     if self.tab == Tab::DynamicAnalysis {
                         self.dynamic_scroll_index =
                             self.dynamic_scroll_index.saturating_add(amount);
@@ -228,6 +274,27 @@ impl<'a> State<'a> {
                     } else {
                         self.list.next(amount)
                     }
+
+                    #[cfg(not(any(
+                        target_arch = "x86_64",
+                        target_arch = "aarch64",
+                        target_arch = "riscv64"
+                    )))]
+                    if self.tab == Tab::StaticAnalysis {
+                        match self.block_index {
+                            0 => {
+                                self.headers_scroll_index =
+                                    self.headers_scroll_index.saturating_add(amount);
+                            }
+                            1 => {
+                                self.notes_scroll_index =
+                                    self.notes_scroll_index.saturating_add(amount);
+                            }
+                            _ => self.list.next(amount),
+                        }
+                    } else {
+                        self.list.next(amount)
+                    }
                 }
                 ScrollType::Block => {
                     if self.tab == Tab::StaticAnalysis {
@@ -252,6 +319,11 @@ impl<'a> State<'a> {
                     }
                 }
                 ScrollType::List => {
+                    #[cfg(any(
+                        target_arch = "x86_64",
+                        target_arch = "aarch64",
+                        target_arch = "riscv64"
+                    ))]
                     if self.tab == Tab::DynamicAnalysis {
                         self.dynamic_scroll_index =
                             self.dynamic_scroll_index.saturating_sub(amount);
@@ -270,6 +342,27 @@ impl<'a> State<'a> {
                     } else {
                         self.list.previous(amount)
                     }
+
+                    #[cfg(not(any(
+                        target_arch = "x86_64",
+                        target_arch = "aarch64",
+                        target_arch = "riscv64"
+                    )))]
+                    if self.tab == Tab::StaticAnalysis {
+                        match self.block_index {
+                            0 => {
+                                self.headers_scroll_index =
+                                    self.headers_scroll_index.saturating_sub(amount);
+                            }
+                            1 => {
+                                self.notes_scroll_index =
+                                    self.notes_scroll_index.saturating_sub(amount);
+                            }
+                            _ => self.list.previous(amount),
+                        }
+                    } else {
+                        self.list.previous(amount)
+                    }
                 }
                 ScrollType::Block => {
                     if self.tab == Tab::StaticAnalysis {
@@ -278,13 +371,30 @@ impl<'a> State<'a> {
                 }
             },
             Command::Top => {
+                #[cfg(any(
+                    target_arch = "x86_64",
+                    target_arch = "aarch64",
+                    target_arch = "riscv64"
+                ))]
                 if self.tab == Tab::DynamicAnalysis {
                     self.dynamic_scroll_index = 0;
                 } else {
                     self.list.first();
                 }
+
+                #[cfg(not(any(
+                    target_arch = "x86_64",
+                    target_arch = "aarch64",
+                    target_arch = "riscv64"
+                )))]
+                self.list.first();
             }
             Command::Bottom => {
+                #[cfg(any(
+                    target_arch = "x86_64",
+                    target_arch = "aarch64",
+                    target_arch = "riscv64"
+                ))]
                 if self.tab == Tab::DynamicAnalysis {
                     self.dynamic_scroll_index = self
                         .analyzer
@@ -297,6 +407,12 @@ impl<'a> State<'a> {
                 } else {
                     self.list.last();
                 }
+                #[cfg(not(any(
+                    target_arch = "x86_64",
+                    target_arch = "aarch64",
+                    target_arch = "riscv64"
+                )))]
+                self.list.last();
             }
             Command::Increment => {
                 if self.tab == Tab::Strings {
@@ -369,6 +485,11 @@ impl<'a> State<'a> {
                         .collect(),
                 );
             }
+            #[cfg(any(
+                target_arch = "x86_64",
+                target_arch = "aarch64",
+                target_arch = "riscv64"
+            ))]
             Tab::DynamicAnalysis => {
                 self.analyzer.system_calls = self
                     .analyzer
@@ -435,6 +556,11 @@ impl<'a> State<'a> {
                 ("Tab", "Next"),
                 ("q", "Quit"),
             ],
+            #[cfg(any(
+                target_arch = "x86_64",
+                target_arch = "aarch64",
+                target_arch = "riscv64"
+            ))]
             Tab::DynamicAnalysis => {
                 if self.system_calls_loaded {
                     vec![
diff --git a/src/tui/ui.rs b/src/tui/ui.rs
index a2cbe5c..5fb8201 100644
--- a/src/tui/ui.rs
+++ b/src/tui/ui.rs
@@ -1,4 +1,9 @@
 use crate::{elf::Info, tui::state::State};
+#[cfg(any(
+    target_arch = "x86_64",
+    target_arch = "aarch64",
+    target_arch = "riscv64"
+))]
 use ansi_to_tui::IntoText;
 use ratatui::{
     layout::{Alignment, Constraint, Direction, Layout, Margin, Position, Rect},
@@ -34,8 +39,30 @@ pub const ELF_INFO_TABS: &[Info] = &[
     Info::Relocations,
 ];
 
+#[cfg(not(any(
+    target_arch = "x86_64",
+    target_arch = "aarch64",
+    target_arch = "riscv64"
+)))]
 /// Application tab.
 #[derive(Clone, Copy, Debug, Eq, PartialEq)]
+pub enum Tab {
+    /// General information.
+    General = 0,
+    /// Static analysis.
+    StaticAnalysis = 1,
+    /// String.
+    Strings = 2,
+    /// Hexdump.
+    Hexdump = 3,
+}
+
+#[cfg(any(
+    target_arch = "x86_64",
+    target_arch = "aarch64",
+    target_arch = "riscv64"
+))]
+#[derive(Clone, Copy, Debug, Eq, PartialEq)]
 pub enum Tab {
     /// General information.
     General = 0,
@@ -58,10 +85,26 @@ impl Default for Tab {
 impl Tab {
     /// Returns the available tabs.
     const fn get_headers() -> &'static [&'static str] {
-        &["General", "Static", "Dynamic", "Strings", "Hexdump"]
+        &[
+            "General",
+            "Static",
+            #[cfg(any(
+                target_arch = "x86_64",
+                target_arch = "aarch64",
+                target_arch = "riscv64"
+            ))]
+            "Dynamic",
+            "Strings",
+            "Hexdump",
+        ]
     }
 }
 
+#[cfg(any(
+    target_arch = "x86_64",
+    target_arch = "aarch64",
+    target_arch = "riscv64"
+))]
 impl From<usize> for Tab {
     fn from(v: usize) -> Self {
         match v {
@@ -75,6 +118,23 @@ impl From<usize> for Tab {
     }
 }
 
+#[cfg(not(any(
+    target_arch = "x86_64",
+    target_arch = "aarch64",
+    target_arch = "riscv64"
+)))]
+impl From<usize> for Tab {
+    fn from(v: usize) -> Self {
+        match v {
+            0 => Self::General,
+            1 => Self::StaticAnalysis,
+            2 => Self::Strings,
+            3 => Self::Hexdump,
+            _ => Self::default(),
+        }
+    }
+}
+
 /// Renders the user interface widgets.
 pub fn render(state: &mut State, frame: &mut Frame) {
     let chunks = Layout::new(
@@ -140,6 +200,11 @@ pub fn render(state: &mut State, frame: &mut Frame) {
         Tab::StaticAnalysis => {
             render_static_analysis(state, frame, chunks[1]);
         }
+        #[cfg(any(
+            target_arch = "x86_64",
+            target_arch = "aarch64",
+            target_arch = "riscv64"
+        ))]
         Tab::DynamicAnalysis => {
             render_dynamic_analysis(state, frame, chunks[1]);
         }
@@ -974,6 +1039,11 @@ pub fn render_dynamic_analysis(state: &mut State, frame: &mut Frame, rect: Rect)
             &mut ScrollbarState::new(max_height).position(state.dynamic_scroll_index),
         );
 
+        #[cfg(any(
+            target_arch = "x86_64",
+            target_arch = "aarch64",
+            target_arch = "riscv64"
+        ))]
         if state.show_details && !state.analyzer.tracer.summary.is_empty() {
             let summary = state
                 .analyzer
-- 
2.46.0


From ab38b618725cbbac679849c121aa610b0bb7c8e5 Mon Sep 17 00:00:00 2001
From: Student Main <studentmain@aosc.io>
Date: Sat, 5 Oct 2024 02:24:15 +0800
Subject: [PATCH 1/2] Add loongarch64 support

---
 core/config/engine.cpp                                        | 3 +++
 core/os/os.cpp                                                | 4 ++++
 editor/editor_property_name_processor.cpp                     | 1 +
 editor/plugins/gdextension_export_plugin.h                    | 1 +
 platform/linuxbsd/detect.py                                   | 2 +-
 .../linuxbsd/doc_classes/EditorExportPlatformLinuxBSD.xml     | 2 +-
 platform/linuxbsd/export/export_plugin.cpp                    | 2 +-
 platform_methods.py                                           | 3 ++-
 8 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/core/config/engine.cpp b/core/config/engine.cpp
index 3574430cf7..5a8cd0fb55 100644
--- a/core/config/engine.cpp
+++ b/core/config/engine.cpp
@@ -238,6 +238,9 @@ String Engine::get_architecture_name() const {
 	return "ppc";
 #endif
 
+#elif defined(__loongarch__)
+	return "loongarch64";
+
 #elif defined(__wasm__)
 #if defined(__wasm64__)
 	return "wasm64";
diff --git a/core/os/os.cpp b/core/os/os.cpp
index 642de11a9f..4a7b660ac3 100644
--- a/core/os/os.cpp
+++ b/core/os/os.cpp
@@ -504,6 +504,10 @@ bool OS::has_feature(const String &p_feature) {
 	if (p_feature == "wasm") {
 		return true;
 	}
+#elif defined(__loongarch__)
+	if (p_feature == "loongarch64") {
+		return true;
+	}
 #endif
 
 #if defined(IOS_SIMULATOR)
diff --git a/editor/editor_property_name_processor.cpp b/editor/editor_property_name_processor.cpp
index f23cab676c..6dcec0bce6 100644
--- a/editor/editor_property_name_processor.cpp
+++ b/editor/editor_property_name_processor.cpp
@@ -233,6 +233,7 @@ EditorPropertyNameProcessor::EditorPropertyNameProcessor() {
 	capitalize_string_remaps["lod"] = "LOD";
 	capitalize_string_remaps["lods"] = "LODs";
 	capitalize_string_remaps["lowpass"] = "Low-pass";
+	capitalize_string_remaps["loongarch64"] = "loongarch64";
 	capitalize_string_remaps["macos"] = "macOS";
 	capitalize_string_remaps["mb"] = "(MB)"; // Unit.
 	capitalize_string_remaps["mjpeg"] = "MJPEG";
diff --git a/editor/plugins/gdextension_export_plugin.h b/editor/plugins/gdextension_export_plugin.h
index da136b70ae..c8abe33040 100644
--- a/editor/plugins/gdextension_export_plugin.h
+++ b/editor/plugins/gdextension_export_plugin.h
@@ -72,6 +72,7 @@ void GDExtensionExportPlugin::_export_file(const String &p_path, const String &p
 	all_archs.insert("ppc32");
 	all_archs.insert("ppc64");
 	all_archs.insert("wasm32");
+	all_archs.insert("loongarch64");
 	all_archs.insert("universal");
 
 	HashSet<String> archs;
diff --git a/platform/linuxbsd/detect.py b/platform/linuxbsd/detect.py
index d1de760f34..ddc8bb83cf 100644
--- a/platform/linuxbsd/detect.py
+++ b/platform/linuxbsd/detect.py
@@ -73,7 +73,7 @@ def get_flags():
 
 def configure(env: "SConsEnvironment"):
     # Validate arch.
-    supported_arches = ["x86_32", "x86_64", "arm32", "arm64", "rv64", "ppc32", "ppc64"]
+    supported_arches = ["x86_32", "x86_64", "arm32", "arm64", "rv64", "ppc32", "ppc64", "loongarch64"]
     if env["arch"] not in supported_arches:
         print_error(
             'Unsupported CPU architecture "%s" for Linux / *BSD. Supported architectures are: %s.'
diff --git a/platform/linuxbsd/doc_classes/EditorExportPlatformLinuxBSD.xml b/platform/linuxbsd/doc_classes/EditorExportPlatformLinuxBSD.xml
index a44c86202e..2ffae6f7a5 100644
--- a/platform/linuxbsd/doc_classes/EditorExportPlatformLinuxBSD.xml
+++ b/platform/linuxbsd/doc_classes/EditorExportPlatformLinuxBSD.xml
@@ -11,7 +11,7 @@
 	<members>
 		<member name="binary_format/architecture" type="String" setter="" getter="">
 			Application executable architecture.
-			Supported architectures: [code]x86_32[/code], [code]x86_64[/code], [code]arm64[/code], [code]arm32[/code], [code]rv64[/code], [code]ppc64[/code], and [code]ppc32[/code].
+			Supported architectures: [code]x86_32[/code], [code]x86_64[/code], [code]arm64[/code], [code]arm32[/code], [code]rv64[/code], [code]ppc64[/code], [code]ppc32[/code] and [code]loongarch64[/code].
 			Official export templates include [code]x86_32[/code] and [code]x86_64[/code] binaries only.
 		</member>
 		<member name="binary_format/embed_pck" type="bool" setter="" getter="">
diff --git a/platform/linuxbsd/export/export_plugin.cpp b/platform/linuxbsd/export/export_plugin.cpp
index 936adddda3..ac2102f7d3 100644
--- a/platform/linuxbsd/export/export_plugin.cpp
+++ b/platform/linuxbsd/export/export_plugin.cpp
@@ -166,7 +166,7 @@ bool EditorExportPlatformLinuxBSD::get_export_option_visibility(const EditorExpo
 void EditorExportPlatformLinuxBSD::get_export_options(List<ExportOption> *r_options) const {
 	EditorExportPlatformPC::get_export_options(r_options);
 
-	r_options->push_back(ExportOption(PropertyInfo(Variant::STRING, "binary_format/architecture", PROPERTY_HINT_ENUM, "x86_64,x86_32,arm64,arm32,rv64,ppc64,ppc32"), "x86_64"));
+	r_options->push_back(ExportOption(PropertyInfo(Variant::STRING, "binary_format/architecture", PROPERTY_HINT_ENUM, "x86_64,x86_32,arm64,arm32,rv64,ppc64,ppc32,loongarch64"), "x86_64"));
 
 	String run_script = "#!/usr/bin/env bash\n"
 						"export DISPLAY=:0\n"
diff --git a/platform_methods.py b/platform_methods.py
index 2b157da22b..446bfd8bd4 100644
--- a/platform_methods.py
+++ b/platform_methods.py
@@ -8,7 +8,7 @@ import methods
 
 
 # CPU architecture options.
-architectures = ["x86_32", "x86_64", "arm32", "arm64", "rv64", "ppc32", "ppc64", "wasm32"]
+architectures = ["x86_32", "x86_64", "arm32", "arm64", "rv64", "ppc32", "ppc64", "wasm32", "loongarch64"]
 architecture_aliases = {
     "x86": "x86_32",
     "x64": "x86_64",
@@ -23,6 +23,7 @@ architecture_aliases = {
     "ppcle": "ppc32",
     "ppc": "ppc32",
     "ppc64le": "ppc64",
+    "loong64": "loongarch64",
 }
 
 
-- 
2.46.2


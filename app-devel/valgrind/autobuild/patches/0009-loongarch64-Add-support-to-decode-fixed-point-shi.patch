From ae34eb1f6b4fa6d32fee76f875503c1f915fbc5d Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Wed, 16 Mar 2022 10:28:41 +0800
Subject: [PATCH v4 009/123] loongarch64: Add support to decode fixed point
 shift insns

---
 VEX/priv/guest_loongarch64_toIR.c | 198 +++++++++++++++++++++++++++---
 1 file changed, 182 insertions(+), 16 deletions(-)

diff --git a/VEX/priv/guest_loongarch64_toIR.c b/VEX/priv/guest_loongarch64_toIR.c
index 11d1e79be..0686032aa 100644
--- a/VEX/priv/guest_loongarch64_toIR.c
+++ b/VEX/priv/guest_loongarch64_toIR.c
@@ -1285,112 +1285,278 @@ static Bool gen_sll_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("sll.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* shl = binop(Iop_Shl32, getIReg32(rj), getIReg8(rk));
+   putIReg(rd, extendS(Ity_I32, shl));
+
+   return True;
 }
 
 static Bool gen_srl_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("srl.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* shr = binop(Iop_Shr32, getIReg32(rj), getIReg8(rk));
+   putIReg(rd, extendS(Ity_I32, shr));
+
+   return True;
 }
 
 static Bool gen_sra_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("sra.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* sar = binop(Iop_Sar32, getIReg32(rj), getIReg8(rk));
+   putIReg(rd, extendS(Ity_I32, sar));
+
+   return True;
 }
 
 static Bool gen_sll_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("sll.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_Shl64, getIReg64(rj), getIReg8(rk)));
+
+   return True;
 }
 
 static Bool gen_srl_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("srl.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_Shr64, getIReg64(rj), getIReg8(rk)));
+
+   return True;
 }
 
 static Bool gen_sra_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("sra.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_Sar64, getIReg64(rj), getIReg8(rk)));
+
+   return True;
 }
 
 static Bool gen_rotr_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("rotr.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp tmp1 = newTemp(Ity_I32);
+   assign(tmp1, getIReg32(rj));
+   IRTemp tmp2 = newTemp(Ity_I8);
+   assign(tmp2, getIReg8(rk));
+   IRExpr* shr = binop(Iop_Shr32, mkexpr(tmp1), mkexpr(tmp2));
+   IRExpr* imm = unop(Iop_8Uto32, mkexpr(tmp2));
+   IRExpr* sub = binop(Iop_Sub32, mkU32(32), imm);
+   IRExpr* imm2 = unop(Iop_32to8, sub);
+   IRExpr* shl = binop(Iop_Shl32, mkexpr(tmp1), imm2);
+   IRExpr* or = binop(Iop_Or32, shr, shl);
+   putIReg(rd, extendS(Ity_I32, or));
+
+   return True;
 }
 
 static Bool gen_rotr_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("rotr.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp tmp1 = newTemp(Ity_I64);
+   assign(tmp1, getIReg64(rj));
+   IRTemp tmp2 = newTemp(Ity_I8);
+   assign(tmp2, getIReg8(rk));
+   IRExpr* shr = binop(Iop_Shr64, mkexpr(tmp1), mkexpr(tmp2));
+   IRExpr* imm = unop(Iop_8Uto64, mkexpr(tmp2));
+   IRExpr* sub = binop(Iop_Sub64, mkU64(64), imm);
+   IRExpr* imm2 = unop(Iop_64to8, sub);
+   IRExpr* shl = binop(Iop_Shl64, mkexpr(tmp1), imm2);
+   putIReg(rd, binop(Iop_Or64, shr, shl));
+
+   return True;
 }
 
 static Bool gen_slli_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui5 = get_ui5(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("slli.w %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui5);
+
+   IRExpr* shl = binop(Iop_Shl32, getIReg32(rj), mkU8(ui5));
+   putIReg(rd, extendS(Ity_I32, shl));
+
+   return True;
 }
 
 static Bool gen_slli_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui6 = get_ui6(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("slli.d %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui6);
+
+   putIReg(rd, binop(Iop_Shl64, getIReg64(rj), mkU8(ui6)));
+
+   return True;
 }
 
 static Bool gen_srli_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui5 = get_ui5(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("srli.w %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui5);
+
+   IRExpr* shr = binop(Iop_Shr32, getIReg32(rj), mkU8(ui5));
+   putIReg(rd, extendS(Ity_I32, shr));
+
+   return True;
 }
 
 static Bool gen_srli_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui6 = get_ui6(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("srli.d %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui6);
+
+   putIReg(rd, binop(Iop_Shr64, getIReg64(rj), mkU8(ui6)));
+
+   return True;
 }
 
 static Bool gen_srai_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui5 = get_ui5(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("srai.w %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui5);
+
+   IRExpr* sar = binop(Iop_Sar32, getIReg32(rj), mkU8(ui5));
+   putIReg(rd, extendS(Ity_I32, sar));
+
+   return True;
 }
 
 static Bool gen_srai_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui6 = get_ui6(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("srai.d %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui6);
+
+   putIReg(rd, binop(Iop_Sar64, getIReg64(rj), mkU8(ui6)));
+
+   return True;
 }
 
 static Bool gen_rotri_w ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui5 = get_ui5(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("rotri.w %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui5);
+
+   IRTemp tmp = newTemp(Ity_I32);
+   assign(tmp, getIReg32(rj));
+   IRExpr* shr = binop(Iop_Shr32, mkexpr(tmp), mkU8(ui5));
+   IRExpr* shl = binop(Iop_Shl32, mkexpr(tmp), mkU8(32 - ui5));
+   if (32 - ui5 == 32)
+      shl = mkU32(0);
+   IRExpr* or = binop(Iop_Or32, shr, shl);
+   putIReg(rd, extendS(Ity_I32, or));
+
+   return True;
 }
 
 static Bool gen_rotri_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui6 = get_ui6(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("rotri.d %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui6);
+
+   IRTemp tmp = newTemp(Ity_I64);
+   assign(tmp, getIReg64(rj));
+   IRExpr* shr = binop(Iop_Shr64, mkexpr(tmp), mkU8(ui6));
+   IRExpr* shl = binop(Iop_Shl64, mkexpr(tmp), mkU8(64 - ui6));
+   if (64 - ui6 == 64)
+      shl = mkU64(0);
+   putIReg(rd, binop(Iop_Or64, shr, shl));
+
+   return True;
 }
 
 
-- 
2.39.1


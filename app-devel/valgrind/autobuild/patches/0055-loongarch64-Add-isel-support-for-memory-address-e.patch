From 0b44c8e97a85edecd6779f0e1474fd2b13dfb2a6 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Tue, 22 Mar 2022 10:03:56 +0800
Subject: [PATCH v4 055/123] loongarch64: Add isel support for memory address
 expressions

---
 VEX/priv/host_loongarch64_isel.c | 24 +++++++++++++++++++++++-
 1 file changed, 23 insertions(+), 1 deletion(-)

diff --git a/VEX/priv/host_loongarch64_isel.c b/VEX/priv/host_loongarch64_isel.c
index ecff42e65..10372fe38 100644
--- a/VEX/priv/host_loongarch64_isel.c
+++ b/VEX/priv/host_loongarch64_isel.c
@@ -649,7 +649,29 @@ static LOONGARCH64AMode* iselIntExpr_AMode ( ISelEnv* env,
 static LOONGARCH64AMode* iselIntExpr_AMode_wrk ( ISelEnv* env,
                                                  IRExpr* e, IRType dty )
 {
-   return NULL;
+   IRType ty = typeOfIRExpr(env->type_env, e);
+   vassert(e);
+   vassert(ty == Ity_I64);
+
+   /* Add64(expr, i), where i <= 0x7ff */
+   if (e->tag == Iex_Binop && e->Iex.Binop.op == Iop_Add64
+       && e->Iex.Binop.arg2->tag == Iex_Const
+       && e->Iex.Binop.arg2->Iex.Const.con->tag == Ico_U64
+       && e->Iex.Binop.arg2->Iex.Const.con->Ico.U64 <= 0x7ff) {
+      return LOONGARCH64AMode_RI(iselIntExpr_R(env, e->Iex.Binop.arg1),
+                                 (UShort)e->Iex.Binop.arg2->Iex.Const.con->Ico.U64);
+   }
+
+   /* Add64(expr, expr) */
+   if (e->tag == Iex_Binop && e->Iex.Binop.op == Iop_Add64) {
+      HReg base = iselIntExpr_R(env, e->Iex.Binop.arg1);
+      HReg index = iselIntExpr_R(env, e->Iex.Binop.arg2);
+      return LOONGARCH64AMode_RR(base, index);
+   }
+
+   /* Doesn't match anything in particular.  Generate it into
+      a register and use that. */
+   return LOONGARCH64AMode_RI(iselIntExpr_R(env, e), 0);
 }
 
 /* --------------------- RI --------------------- */
-- 
2.39.1


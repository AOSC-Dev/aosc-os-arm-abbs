From 425c071f754a6c86683571faca52637ea86a97d2 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Mon, 8 Aug 2022 10:50:00 +0800
Subject: [PATCH v4 019/123] loongarch64: Add support to decode floating point
 load/store insns

---
 VEX/priv/guest_loongarch64_toIR.c | 316 ++++++++++++++++++++++++++++--
 1 file changed, 300 insertions(+), 16 deletions(-)

diff --git a/VEX/priv/guest_loongarch64_toIR.c b/VEX/priv/guest_loongarch64_toIR.c
index 620b8e972..abe7914d8 100644
--- a/VEX/priv/guest_loongarch64_toIR.c
+++ b/VEX/priv/guest_loongarch64_toIR.c
@@ -7438,112 +7438,396 @@ static Bool gen_fld_s ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   fd = get_fd(insn);
+
+   DIP("fld.s %s, %s, %d\n", nameFReg(fd), nameIReg(rj),
+                             (Int)extend32(si12, 12));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   putFReg32(fd, load(Ity_F32, addr));
+
+   return True;
 }
 
 static Bool gen_fst_s ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   fd = get_fd(insn);
+
+   DIP("fst.s %s, %s, %d\n", nameFReg(fd), nameIReg(rj),
+                             (Int)extend32(si12, 12));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   store(addr, getFReg32(fd));
+
+   return True;
 }
 
 static Bool gen_fld_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   fd = get_fd(insn);
+
+   DIP("fld.d %s, %s, %d\n", nameFReg(fd), nameIReg(rj),
+                             (Int)extend32(si12, 12));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   putFReg64(fd, load(Ity_F64, addr));
+
+   return True;
 }
 
 static Bool gen_fst_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   fd = get_fd(insn);
+
+   DIP("fst.d %s, %s, %d\n", nameFReg(fd), nameIReg(rj),
+                             (Int)extend32(si12, 12));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   store(addr, getFReg64(fd));
+
+   return True;
 }
 
 static Bool gen_fldx_s ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fldx.s %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   putFReg32(fd, load(Ity_F32, addr));
+
+   return True;
 }
 
 static Bool gen_fldx_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fldx.d %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   putFReg64(fd, load(Ity_F64, addr));
+
+   return True;
 }
 
 static Bool gen_fstx_s ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fstx.s %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   store(addr, getFReg32(fd));
+
+   return True;
 }
 
 static Bool gen_fstx_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fstx.d %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   store(addr, getFReg64(fd));
+
+   return True;
 }
 
 static Bool gen_fldgt_s ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fldgt.s %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x3)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   putFReg32(fd, load(Ity_F32, mkexpr(addr)));
+
+   return True;
 }
 
 static Bool gen_fldgt_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fldgt.d %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x7)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   putFReg64(fd, load(Ity_F64, mkexpr(addr)));
+
+   return True;
 }
 
 static Bool gen_fldle_s ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fldle.s %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x3)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   putFReg32(fd, load(Ity_F32, mkexpr(addr)));
+
+   return True;
 }
 
 static Bool gen_fldle_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fldle.d %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x7)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   putFReg64(fd, load(Ity_F64, mkexpr(addr)));
+
+   return True;
 }
 
 static Bool gen_fstgt_s ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fstgt.s %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x3)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   store(mkexpr(addr), getFReg32(fd));
+
+   return True;
 }
 
 static Bool gen_fstgt_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fstgt.d %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x7)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   store(mkexpr(addr), getFReg64(fd));
+
+   return True;
 }
 
 static Bool gen_fstle_s ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fstle.s %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x3)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   store(mkexpr(addr), getFReg32(fd));
+
+   return True;
 }
 
 static Bool gen_fstle_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fstle.d %s, %s, %s\n", nameFReg(fd), nameIReg(rj), nameIReg(rk));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x7)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   store(mkexpr(addr), getFReg64(fd));
+
+   return True;
 }
 
 
-- 
2.39.1


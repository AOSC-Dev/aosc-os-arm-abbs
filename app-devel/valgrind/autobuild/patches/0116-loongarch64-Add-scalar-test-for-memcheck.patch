From 7c02086649856fbe2aa99a581e041e2946b3e7bd Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Fri, 1 Jul 2022 15:30:21 +0800
Subject: [PATCH v4 116/123] loongarch64: Add scalar test for memcheck

---
 memcheck/tests/loongarch64-linux/scalar.c     | 1293 +++++++-
 memcheck/tests/loongarch64-linux/scalar.h     |   63 +-
 .../tests/loongarch64-linux/scalar.stderr.exp | 2716 +++++++++++++++++
 3 files changed, 4069 insertions(+), 3 deletions(-)

diff --git a/memcheck/tests/loongarch64-linux/scalar.c b/memcheck/tests/loongarch64-linux/scalar.c
index 3bdaac2fa..e39069213 100644
--- a/memcheck/tests/loongarch64-linux/scalar.c
+++ b/memcheck/tests/loongarch64-linux/scalar.c
@@ -1,7 +1,1296 @@
+/* This is the loongarch64 variant of memcheck/tests/x86-linux/scalar.c.
+   Syscalls are in x86 number order to make exp comparison easier. */
+#define _GNU_SOURCE
+#include "../../memcheck.h"
 #include "scalar.h"
+#include <unistd.h>
+#include <sched.h>
+#include <signal.h>
+#include <linux/mman.h> // MREMAP_FIXED
 
+// Here we are trying to trigger every syscall error (scalar errors and
+// memory errors) for every syscall.  We do this by passing a lot of bogus
+// arguments, mostly 0 and 1 (often it's 1 because NULL ptr args often aren't
+// checked for memory errors, or in order to have a non-zero length used
+// with some buffer).  So most of the syscalls don't actually succeed and do
+// anything.
+//
+// Occasionally we have to be careful not to cause Valgrind to seg fault in
+// its pre-syscall wrappers;  it does so because it can't know in general
+// when memory is unaddressable, and so tries to dereference it when doing
+// PRE_MEM_READ/PRE_MEM_WRITE calls.  (Note that Memcheck will
+// always issue an error message immediately before these seg faults occur).
+//
+// The output has numbers like "3s 2m" for each syscall.  "s" is short for
+// "scalar", ie. the argument itself is undefined.  "m" is short for "memory",
+// ie. the argument points to memory which is unaddressable.
 int main(void)
 {
-   /* TODO */
-   return 0;
+   // uninitialised, but we know px[0] is 0x0
+   long* px  = malloc(sizeof(long));
+   long  x0  = px[0];
+   long  res;
+
+   // All __NR_xxx numbers are taken from x86
+
+   // __NR_restart_syscall 0  // XXX: not yet handled, perhaps should be...
+   GO(__NR_restart_syscall, "n/a");
+   //SY(__NR_restart_syscall); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_exit 1
+   GO(__NR_exit, "below");
+   // (see below)
+
+   // __NR_fork 2
+   //GO(__NR_fork, "other");
+   // (sse scalar_fork.c)
+
+   // __NR_read 3
+   // Nb: here we are also getting an error from the syscall arg itself.
+   GO(__NR_read, "1+3s 1m");
+   SY(__NR_read+x0, x0, x0, x0+1); FAILx(EFAULT);
+
+   // __NR_write 4
+   GO(__NR_write, "3s 1m");
+   SY(__NR_write, x0, x0, x0+1); FAIL;
+
+   // __NR_open 5
+   //GO(__NR_open, "(2-args) 2s 1m");
+   //SY(__NR_open, x0, x0); FAIL;
+
+   // Only 1s 0m errors -- the other 2s 1m have been checked in the previous
+   // open test, and if we test them they may be commoned up but they also
+   // may not.
+   //GO(__NR_open, "(3-args) 1s 0m");
+   //SY(__NR_open, "scalar.c", O_CREAT|O_EXCL, x0); FAIL;
+
+   // __NR_close 6
+   GO(__NR_close, "1s 0m");
+   SY(__NR_close, x0-1); FAIL;
+
+   // __NR_waitpid 7
+   //GO(__NR_waitpid, "3s 1m");
+   //SY(__NR_waitpid, x0, x0+1, x0); FAIL;
+
+   // __NR_creat 8
+   //GO(__NR_creat, "2s 1m");
+   //SY(__NR_creat, x0, x0); FAIL;
+
+   // __NR_link 9
+   //GO(__NR_link, "2s 2m");
+   //SY(__NR_link, x0, x0); FAIL;
+
+   // __NR_unlink 10
+   //GO(__NR_unlink, "1s 1m");
+   //SY(__NR_unlink, x0); FAIL;
+
+   // __NR_execve 11
+   GO(__NR_execve, "3s 1m");
+   SY(__NR_execve, x0 + 1, x0 + 1, x0); FAIL;
+
+   GO(__NR_execve, "3s 1m");
+   SY(__NR_execve, x0 + 1, x0, x0 + 1); FAIL;
+
+   char *argv_envp[] = {(char *) (x0 + 1), NULL};
+   GO(__NR_execve, "4s 2m");
+   SY(__NR_execve, x0 + 1, x0 + argv_envp, x0); FAIL;
+   char *argv_ok[] = {"frob", NULL};
+   GO(__NR_execve, "4s 2m");
+   SY(__NR_execve, x0 + 1, x0 + argv_ok, x0 + argv_envp); FAIL;
+
+   // __NR_chdir 12
+   GO(__NR_chdir, "1s 1m");
+   SY(__NR_chdir, x0); FAIL;
+
+   // __NR_time 13
+   //GO(__NR_time, "1s 1m");
+   //SY(__NR_time, x0+1); FAIL;
+
+   // __NR_mknod 14
+   //O(__NR_mknod, "3s 1m");
+   //Y(__NR_mknod, x0, x0, x0); FAIL;
+
+   // __NR_chmod 15
+   //GO(__NR_chmod, "2s 1m");
+   //SY(__NR_chmod, x0, x0); FAIL;
+
+   // __NR_lchown 16
+   //GO(__NR_lchown, "n/a");
+   //SY(__NR_lchown); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_break 17
+   //GO(__NR_break, "ni");
+   //SY(__NR_break); FAIL;
+
+   // __NR_oldstat 18
+   //GO(__NR_oldstat, "n/a");
+   // (obsolete, not handled by Valgrind)
+
+   // __NR_lseek 19
+   GO(__NR_lseek, "3s 0m");
+   SY(__NR_lseek, x0-1, x0, x0); FAILx(EBADF);
+
+   // __NR_getpid 20
+   GO(__NR_getpid, "0s 0m");
+   SY(__NR_getpid); SUCC;
+
+   // __NR_mount 21
+   GO(__NR_mount, "5s 3m");
+   SY(__NR_mount, x0, x0, x0, x0, x0); FAIL;
+
+   // __NR_umount 22
+   //GO(__NR_umount, "1s 1m");
+   //SY(__NR_umount, x0); FAIL;
+
+   // __NR_setuid 23
+   GO(__NR_setuid, "1s 0m");
+   SY(__NR_setuid, x0-1); FAIL;
+
+   // __NR_getuid 24
+   GO(__NR_getuid, "0s 0m");
+   SY(__NR_getuid); SUCC;
+
+   // __NR_stime 25
+   //GO(__NR_stime, "n/a");
+   //SY(__NR_stime); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_ptrace 26
+   // XXX: memory pointed to be arg3 goes unchecked... otherwise would be 2m
+   //GO(__NR_ptrace, "4s 1m");
+   //SY(__NR_ptrace, x0+PTRACE_GETREGS, x0, x0, x0); FAIL;
+
+   // __NR_alarm 27
+   //GO(__NR_alarm, "1s 0m");
+   //SY(__NR_alarm, x0); SUCC;
+
+   // __NR_oldfstat 28
+   //GO(__NR_oldfstat, "n/a");
+   // (obsolete, not handled by Valgrind)
+
+   // __NR_pause 29
+   //GO(__NR_pause, "ignore");
+   // (hard to test, and no args so not much to be gained -- don't bother)
+
+   // __NR_utime 30
+   //GO(__NR_utime, "2s 2m");
+   //SY(__NR_utime, x0, x0+1); FAIL;
+
+   // __NR_stty 31
+   //GO(__NR_stty, "ni");
+   //SY(__NR_stty); FAIL;
+
+   // __NR_gtty 32
+   //GO(__NR_gtty, "ni");
+   //SY(__NR_gtty); FAIL;
+
+   // __NR_access 33
+   //GO(__NR_access, "2s 1m");
+   //SY(__NR_access, x0, x0); FAIL;
+
+   // __NR_nice 34
+   //GO(__NR_nice, "1s 0m");
+   //SY(__NR_nice, x0); SUCC;
+
+   // __NR_ftime 35
+   //GO(__NR_ftime, "ni");
+   //SY(__NR_ftime); FAIL;
+
+   // __NR_sync 36
+   GO(__NR_sync, "0s 0m");
+   SY(__NR_sync); SUCC;
+
+   // __NR_kill 37
+   GO(__NR_kill, "2s 0m");
+   SY(__NR_kill, x0, x0); SUCC;
+
+   // __NR_rename 38
+   //GO(__NR_rename, "2s 2m");
+   //SY(__NR_rename, x0, x0); FAIL;
+
+   // __NR_mkdir 39
+   //GO(__NR_mkdir, "2s 1m");
+   //SY(__NR_mkdir, x0, x0); FAIL;
+
+   // __NR_rmdir 40
+   //GO(__NR_rmdir, "1s 1m");
+   //SY(__NR_rmdir, x0); FAIL;
+
+   // __NR_dup 41
+   GO(__NR_dup, "1s 0m");
+   SY(__NR_dup, x0-1); FAIL;
+
+   // __NR_pipe 42
+   //GO(__NR_pipe, "1s 1m");
+   //SY(__NR_pipe, x0); FAIL;
+
+   // __NR_times 43
+   GO(__NR_times, "1s 1m");
+   SY(__NR_times, x0+1); FAIL;
+
+   // __NR_prof 44
+   //GO(__NR_prof, "ni");
+   //SY(__NR_prof); FAIL;
+
+   // __NR_brk 45
+   GO(__NR_brk, "1s 0m");
+   SY(__NR_brk, x0); SUCC;
+
+   // __NR_setgid 46
+   GO(__NR_setgid, "1s 0m");
+   SY(__NR_setgid, x0-1); FAIL;
+
+   // __NR_getgid 47
+   GO(__NR_getgid, "0s 0m");
+   SY(__NR_getgid); SUCC;
+
+   // __NR_signal 48
+   //GO(__NR_signal, "n/a");
+   //SY(__NR_signal); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_geteuid 49
+   GO(__NR_geteuid, "0s 0m");
+   SY(__NR_geteuid); SUCC;
+
+   // __NR_getegid 50
+   GO(__NR_getegid, "0s 0m");
+   SY(__NR_getegid); SUCC;
+
+   // __NR_acct 51
+   GO(__NR_acct, "1s 1m");
+   SY(__NR_acct, x0-1); FAIL;
+
+   // __NR_umount2 52
+   GO(__NR_umount2, "2s 1m");
+   SY(__NR_umount2, x0, x0); FAIL;
+
+   // __NR_lock 53
+   //GO(__NR_lock, "ni");
+   //SY(__NR_lock); FAIL;
+
+   // __NR_ioctl 54
+#include <asm/ioctls.h>
+   GO(__NR_ioctl, "3s 1m");
+   SY(__NR_ioctl, x0, x0+TCSETS, x0); FAIL;
+
+   // __NR_fcntl 55
+   // As with sys_open(), the 'fd' error is suppressed for the later ones.
+   // For F_GETFD the 3rd arg is ignored
+   GO(__NR_fcntl, "(GETFD) 2s 0m");
+   SY(__NR_fcntl, x0-1, x0+F_GETFD, x0); FAILx(EBADF);
+
+   // For F_DUPFD the 3rd arg is 'arg'.  We don't check the 1st two args
+   // because any errors may or may not be commoned up with the ones from
+   // the previous fcntl call.
+   GO(__NR_fcntl, "(DUPFD) 1s 0m");
+   SY(__NR_fcntl, -1, F_DUPFD, x0); FAILx(EBADF);
+
+   // For F_GETLK the 3rd arg is 'lock'.  On x86, this fails w/EBADF.  But
+   // on amd64 in 32-bit mode it fails w/EFAULT.  We don't check the 1st two
+   // args for the reason given above.
+   GO(__NR_fcntl, "(GETLK) 1s 5m");
+   SY(__NR_fcntl, -1, F_GETLK, x0); FAIL; //FAILx(EBADF);
+
+   // __NR_mpx 56
+   //GO(__NR_mpx, "ni");
+   //SY(__NR_mpx); FAIL;
+
+   // __NR_setpgid 57
+   GO(__NR_setpgid, "2s 0m");
+   SY(__NR_setpgid, x0, x0-1); FAIL;
+
+   // __NR_ulimit 58
+   //GO(__NR_ulimit, "ni");
+   //SY(__NR_ulimit); FAIL;
+
+   // __NR_oldolduname 59
+   //GO(__NR_oldolduname, "n/a");
+   // (obsolete, not handled by Valgrind)
+
+   // __NR_umask 60
+   GO(__NR_umask, "1s 0m");
+   SY(__NR_umask, x0+022); SUCC;
+
+   // __NR_chroot 61
+   GO(__NR_chroot, "1s 1m");
+   SY(__NR_chroot, x0); FAIL;
+
+   // __NR_ustat 62
+   //GO(__NR_ustat, "n/a");
+   // (deprecated, not handled by Valgrind)
+
+   // __NR_dup2 63
+   //GO(__NR_dup2, "2s 0m");
+   //SY(__NR_dup2, x0-1, x0); FAIL;
+
+   // __NR_getppid 64
+   GO(__NR_getppid, "0s 0m");
+   SY(__NR_getppid); SUCC;
+
+   // __NR_getpgrp 65
+   //GO(__NR_getpgrp, "0s 0m");
+   //SY(__NR_getpgrp); SUCC;
+
+   // __NR_setsid 66
+   GO(__NR_setsid, "0s 0m");
+   SY(__NR_setsid); SUCC_OR_FAIL;
+
+   // __NR_sigaction 67
+   //GO(__NR_sigaction, "3s 4m");
+   //SY(__NR_sigaction, x0, x0+&px[1], x0+&px[1]); FAIL;
+
+   // __NR_sgetmask 68 sys_sgetmask()
+   //GO(__NR_sgetmask, "n/a");
+   //SY(__NR_sgetmask); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_ssetmask 69
+   //GO(__NR_ssetmask, "n/a");
+   //SY(__NR_ssetmask); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_setreuid 70
+   GO(__NR_setreuid, "2s 0m");
+   SY(__NR_setreuid, x0-1, x0-1); SUCC;
+
+   // __NR_setregid 71
+   GO(__NR_setregid, "2s 0m");
+   SY(__NR_setregid, x0-1, x0-1); SUCC;
+
+   // __NR_sigsuspend 72
+   // XXX: how do you use this function?
+   //GO(__NR_sigsuspend, "ignore");
+   // (I don't know how to test this...)
+
+   // __NR_sigpending 73
+   //GO(__NR_sigpending, "1s 1m");
+   //SY(__NR_sigpending, x0); FAIL;
+
+   // __NR_sethostname 74
+   GO(__NR_sethostname, "n/a");
+   //SY(__NR_sethostname); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_setrlimit 75
+   //GO(__NR_setrlimit, "2s 1m");
+   //SY(__NR_setrlimit, x0, x0); FAIL;
+
+   // __NR_getrlimit 76
+   //GO(__NR_getrlimit, "2s 1m");
+   //SY(__NR_getrlimit, x0, x0); FAIL;
+
+   // __NR_getrusage 77
+   GO(__NR_getrusage, "2s 1m");
+   SY(__NR_getrusage, x0, x0); FAIL;
+
+   // __NR_gettimeofday 78
+   GO(__NR_gettimeofday, "2s 2m");
+   SY(__NR_gettimeofday, x0+1, x0+1); FAIL;
+
+   // __NR_settimeofday 79
+   GO(__NR_settimeofday, "2s 2m");
+   SY(__NR_settimeofday, x0+1, x0+1); FAIL;
+
+   // __NR_getgroups 80
+   GO(__NR_getgroups, "2s 1m");
+   SY(__NR_getgroups, x0+1, x0+1); FAIL;
+
+   // __NR_setgroups 81
+   GO(__NR_setgroups, "2s 1m");
+   SY(__NR_setgroups, x0+1, x0+1); FAIL;
+
+   // __NR_select 82
+   //{
+   //   long args[5] = { x0+8, x0+0xffffffee, x0+1, x0+1, x0+1 };
+   //   GO(__NR_select, "1s 5m");
+   //   SY(__NR_select, args+x0); FAIL;
+   //}
+
+   // __NR_symlink 83
+   //GO(__NR_symlink, "2s 2m");
+   //SY(__NR_symlink, x0, x0); FAIL;
+
+   // __NR_oldlstat 84
+   //GO(__NR_oldlstat, "n/a");
+   // (obsolete, not handled by Valgrind)
+
+   // __NR_readlink 85
+   //GO(__NR_readlink, "3s 2m");
+   //SY(__NR_readlink, x0+1, x0+1, x0+1); FAIL;
+
+   // __NR_uselib 86
+   //GO(__NR_uselib, "n/a");
+   //SY(__NR_uselib); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_swapon 87
+   GO(__NR_swapon, "n/a");
+   //SY(__NR_swapon); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_reboot 88
+   GO(__NR_reboot, "n/a");
+   //SY(__NR_reboot); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_readdir 89
+   //GO(__NR_readdir, "n/a");
+   // (superseded, not handled by Valgrind)
+
+   // __NR_mmap 90
+   {
+      long args[6] = { x0, x0, x0, x0, x0-1, x0 };
+      GO(__NR_mmap, "1s 1m");
+      SY(__NR_mmap, args+x0); FAIL;
+   }
+
+   // __NR_munmap 91
+   GO(__NR_munmap, "2s 0m");
+   SY(__NR_munmap, x0, x0); FAIL;
+
+   // __NR_truncate 92
+   GO(__NR_truncate, "2s 1m");
+   SY(__NR_truncate, x0, x0); FAIL;
+
+   // __NR_ftruncate 93
+   GO(__NR_ftruncate, "2s 0m");
+   SY(__NR_ftruncate, x0, x0); FAIL;
+
+   // __NR_fchmod 94
+   GO(__NR_fchmod, "2s 0m");
+   SY(__NR_fchmod, x0-1, x0); FAIL;
+
+   // __NR_fchown 95
+   GO(__NR_fchown, "3s 0m");
+   SY(__NR_fchown, x0-1, x0, x0); FAIL;
+
+   // __NR_getpriority 96
+   GO(__NR_getpriority, "2s 0m");
+   SY(__NR_getpriority, x0-1, x0); FAIL;
+
+   // __NR_setpriority 97
+   GO(__NR_setpriority, "3s 0m");
+   SY(__NR_setpriority, x0-1, x0, x0); FAIL;
+
+   // __NR_profil 98
+   //GO(__NR_profil, "ni");
+   //SY(__NR_profil); FAIL;
+
+   // __NR_statfs 99
+   GO(__NR_statfs, "2s 2m");
+   SY(__NR_statfs, x0, x0); FAIL;
+
+   // __NR_fstatfs 100
+   GO(__NR_fstatfs, "2s 1m");
+   SY(__NR_fstatfs, x0, x0); FAIL;
+
+   // __NR_ioperm 101
+   //GO(__NR_ioperm, "3s 0m");
+   //SY(__NR_ioperm, x0, x0, x0); FAIL;
+
+   // __NR_socketcall 102
+   //GO(__NR_socketcall, "XXX");
+   // (XXX: need to do all sub-cases properly)
+
+   // __NR_syslog 103
+   GO(__NR_syslog, "3s 1m");
+   SY(__NR_syslog, x0+2, x0, x0+1); FAIL;
+
+   // __NR_setitimer 104
+   GO(__NR_setitimer, "3s 2m");
+   SY(__NR_setitimer, x0, x0+1, x0+1); FAIL;
+
+   // __NR_getitimer 105
+   GO(__NR_getitimer, "2s 1m");
+   SY(__NR_getitimer, x0, x0, x0); FAIL;
+
+   // __NR_stat 106
+   //GO(__NR_stat, "2s 2m");
+   //SY(__NR_stat, x0, x0); FAIL;
+
+   // __NR_lstat 107
+   //GO(__NR_lstat, "2s 2m");
+   //SY(__NR_lstat, x0, x0); FAIL;
+
+   // __NR_fstat 108
+   //GO(__NR_fstat, "2s 1m");
+   //SY(__NR_fstat, x0, x0); FAIL;
+
+   // __NR_olduname 109
+   //GO(__NR_olduname, "n/a");
+   // (obsolete, not handled by Valgrind)
+
+   // __NR_iopl 110
+   //GO(__NR_iopl, "1s 0m");
+   //SY(__NR_iopl, x0+100); FAIL;
+
+   // __NR_vhangup 111
+   GO(__NR_vhangup, "0s 0m");
+   SY(__NR_vhangup); SUCC_OR_FAIL;  // Will succeed for superuser
+
+   // __NR_idle 112
+   //GO(__NR_idle, "ni");
+   //SY(__NR_idle); FAIL;
+
+   // __NR_vm86old 113
+   //GO(__NR_vm86old, "n/a");
+   // (will probably never be handled by Valgrind)
+
+   // __NR_wait4 114
+   GO(__NR_wait4, "4s 2m");
+   SY(__NR_wait4, x0, x0+1, x0, x0+1); FAIL;
+
+   // __NR_swapoff 115
+   GO(__NR_swapoff, "n/a");
+   //SY(__NR_swapoff); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_sysinfo 116
+   GO(__NR_sysinfo, "1s 1m");
+   SY(__NR_sysinfo, x0); FAIL;
+
+   // __NR_ipc 117
+   // XXX: This is simplistic -- need to do all the sub-cases properly.
+   // XXX: Also, should be 6 scalar errors, except glibc's syscall() doesn't
+   //      use the 6th one!
+   //GO(__NR_ipc, "5s 0m");
+   //SY(__NR_ipc, x0+4, x0, x0, x0, x0, x0); FAIL;
+
+   // __NR_fsync 118
+   GO(__NR_fsync, "1s 0m");
+   SY(__NR_fsync, x0-1); FAIL;
+
+   // __NR_sigreturn 119
+   //GO(__NR_sigreturn, "n/a");
+   //SY(__NR_sigreturn); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_clone 120
+#ifndef CLONE_PARENT_SETTID
+#define CLONE_PARENT_SETTID	0x00100000
+#endif
+   GO(__NR_clone, "5s 3m");
+   SY(__NR_clone, x0|CLONE_PARENT_SETTID|CLONE_SETTLS|CLONE_CHILD_SETTID|SIGCHLD, x0, x0, x0, x0); FAIL;
+   if (0 == res) {
+      SY(__NR_exit, 0); FAIL;
+   }
+
+   // __NR_setdomainname 121
+   GO(__NR_setdomainname, "n/a");
+   //SY(__NR_setdomainname); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_uname 122
+   GO(__NR_uname, "1s 1m");
+   SY(__NR_uname, x0); FAIL;
+
+   // __NR_modify_ldt 123
+   //GO(__NR_modify_ldt, "3s 1m");
+   //SY(__NR_modify_ldt, x0+1, x0, x0+1); FAILx(EINVAL);
+
+   // __NR_adjtimex 124
+   // XXX: need to do properly, but deref'ing NULL causing Valgrind to crash...
+   GO(__NR_adjtimex, "XXX");
+   //SY(__NR_adjtimex, x0); FAIL;
+
+   // __NR_mprotect 125
+   GO(__NR_mprotect, "3s 0m");
+   SY(__NR_mprotect, x0+1, x0, x0); FAILx(EINVAL);
+
+   // __NR_sigprocmask 126
+   //GO(__NR_sigprocmask, "3s 2m");
+   //SY(__NR_sigprocmask, x0, x0+&px[1], x0+&px[1]); SUCC;
+
+   // __NR_create_module 127
+   //GO(__NR_create_module, "ni");
+   //SY(__NR_create_module); FAIL;
+
+   // __NR_init_module 128
+   GO(__NR_init_module, "3s 2m");
+   SY(__NR_init_module, x0, x0+1, x0); FAIL;
+
+   // __NR_delete_module 129
+   GO(__NR_delete_module, "n/a");
+   //SY(__NR_delete_module); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_get_kernel_syms 130
+   //GO(__NR_get_kernel_syms, "ni");
+   //SY(__NR_get_kernel_syms); FAIL;
+
+   // __NR_quotactl 131
+   GO(__NR_quotactl, "4s 1m");
+   SY(__NR_quotactl, x0, x0, x0, x0); FAIL;
+
+   // __NR_getpgid 132
+   GO(__NR_getpgid, "1s 0m");
+   SY(__NR_getpgid, x0-1); FAIL;
+
+   // __NR_fchdir 133
+   GO(__NR_fchdir, "1s 0m");
+   SY(__NR_fchdir, x0-1); FAIL;
+
+   // __NR_bdflush 134
+   //GO(__NR_bdflush, "n/a");
+   //SY(__NR_bdflush); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_sysfs 135
+   //GO(__NR_sysfs, "n/a");
+   //SY(__NR_sysfs); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_personality 136
+   GO(__NR_personality, "1s 0m");
+   SY(__NR_personality, x0+0xffffffff); SUCC;
+
+   // __NR_afs_syscall 137
+   //GO(__NR_afs_syscall, "ni");
+   //SY(__NR_afs_syscall); FAIL;
+
+   // __NR_setfsuid 138
+   GO(__NR_setfsuid, "1s 0m");
+   SY(__NR_setfsuid, x0); SUCC;  // This syscall has a stupid return value
+
+   // __NR_setfsgid 139
+   GO(__NR_setfsgid, "1s 0m");
+   SY(__NR_setfsgid, x0); SUCC;  // This syscall has a stupid return value
+
+   // __NR__llseek 140
+   //GO(__NR__llseek, "5s 1m");
+   //SY(__NR__llseek, x0, x0, x0, x0, x0); FAIL;
+
+   // __NR_getdents 141
+   //GO(__NR_getdents, "3s 1m");
+   //SY(__NR_getdents, x0, x0, x0+1); FAIL;
+
+   // __NR__newselect 142
+   //GO(__NR__newselect, "5s 4m");
+   //SY(__NR__newselect, x0+8, x0+0xffffffff, x0+1, x0+1, x0+1); FAIL;
+
+   // __NR_flock 143
+   GO(__NR_flock, "2s 0m");
+   SY(__NR_flock, x0, x0); FAIL;
+
+   // __NR_msync 144
+   GO(__NR_msync, "3s 1m");
+   SY(__NR_msync, x0, x0+1, x0); FAIL;
+
+   // __NR_readv 145
+   GO(__NR_readv, "3s 1m");
+   SY(__NR_readv, x0, x0, x0+1); FAIL;
+
+   // __NR_writev 146
+   GO(__NR_writev, "3s 1m");
+   SY(__NR_writev, x0, x0, x0+1); FAIL;
+
+   // __NR_getsid 147
+   GO(__NR_getsid, "1s 0m");
+   SY(__NR_getsid, x0-1); FAIL;
+
+   // __NR_fdatasync 148
+   GO(__NR_fdatasync, "1s 0m");
+   SY(__NR_fdatasync, x0-1); FAIL;
+
+   // __NR__sysctl 149
+   //GO(__NR__sysctl, "1s 1m");
+   //SY(__NR__sysctl, x0); FAIL;
+
+   // __NR_mlock 150
+   GO(__NR_mlock, "2s 0m");
+   SY(__NR_mlock, x0, x0+1); FAIL;
+
+   // __NR_munlock 151
+   GO(__NR_munlock, "2s 0m");
+   SY(__NR_munlock, x0, x0+1); FAIL;
+
+   // __NR_mlockall 152
+   GO(__NR_mlockall, "1s 0m");
+   SY(__NR_mlockall, x0-1); FAIL;
+
+   // __NR_munlockall 153
+   GO(__NR_munlockall, "0s 0m");
+   SY(__NR_munlockall); SUCC_OR_FAILx(EPERM);
+
+   // __NR_sched_setparam 154
+   GO(__NR_sched_setparam, "2s 1m");
+   SY(__NR_sched_setparam, x0, x0); FAIL;
+
+   // __NR_sched_getparam 155
+   GO(__NR_sched_getparam, "2s 1m");
+   SY(__NR_sched_getparam, x0, x0); FAIL;
+
+   // __NR_sched_setscheduler 156
+   GO(__NR_sched_setscheduler, "3s 1m");
+   SY(__NR_sched_setscheduler, x0-1, x0, x0+1); FAIL;
+
+   // __NR_sched_getscheduler 157
+   GO(__NR_sched_getscheduler, "1s 0m");
+   SY(__NR_sched_getscheduler, x0-1); FAIL;
+
+   // __NR_sched_yield 158
+   GO(__NR_sched_yield, "0s 0m");
+   SY(__NR_sched_yield); SUCC;
+
+   // __NR_sched_get_priority_max 159
+   GO(__NR_sched_get_priority_max, "1s 0m");
+   SY(__NR_sched_get_priority_max, x0-1); FAIL;
+
+   // __NR_sched_get_priority_min 160
+   GO(__NR_sched_get_priority_min, "1s 0m");
+   SY(__NR_sched_get_priority_min, x0-1); FAIL;
+
+   // __NR_sched_rr_get_interval 161
+   GO(__NR_sched_rr_get_interval, "n/a");
+   //SY(__NR_sched_rr_get_interval); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_nanosleep 162
+   GO(__NR_nanosleep, "2s 2m");
+   SY(__NR_nanosleep, x0, x0+1); FAIL;
+
+   // __NR_mremap 163
+   GO(__NR_mremap, "5s 0m");
+   SY(__NR_mremap, x0+1, x0, x0, x0+MREMAP_FIXED, x0); FAILx(EINVAL);
+
+   // __NR_setresuid 164
+   GO(__NR_setresuid, "3s 0m");
+   SY(__NR_setresuid, x0-1, x0-1, x0-1); SUCC;
+
+   // __NR_getresuid 165
+   GO(__NR_getresuid, "3s 3m");
+   SY(__NR_getresuid, x0, x0, x0); FAIL;
+
+   // __NR_vm86 166
+   //GO(__NR_vm86, "n/a");
+   // (will probably never be handled by Valgrind)
+
+   // __NR_query_module 167
+   //GO(__NR_query_module, "ni");
+   //SY(__NR_query_module); FAIL;
+
+   // __NR_poll 168
+   //GO(__NR_poll, "3s 1m");
+   //SY(__NR_poll, x0, x0+1, x0); FAIL;
+
+   // __NR_nfsservctl 169
+   GO(__NR_nfsservctl, "n/a");
+   //SY(__NR_nfsservctl); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_setresgid 170
+   GO(__NR_setresgid, "3s 0m");
+   SY(__NR_setresgid, x0-1, x0-1, x0-1); SUCC;
+
+   // __NR_getresgid 171
+   GO(__NR_getresgid, "3s 3m");
+   SY(__NR_getresgid, x0, x0, x0); FAIL;
+
+   // __NR_prctl 172
+#include <sys/prctl.h>
+   GO(__NR_prctl, "5s 0m");
+   SY(__NR_prctl, x0, x0, x0, x0, x0); FAIL;
+
+   char buf16[16] = "123456789012345.";
+   buf16[15] = x0; // this will cause 'using unitialised value'
+   GO(__NR_prctl, "2s 0m");
+   SY(__NR_prctl, x0 + PR_SET_NAME, buf16); SUCC;
+
+   char buf17[17] = "1234567890123456.";
+   buf17[16] = x0; // this must not cause 'using unitialised value'
+   GO(__NR_prctl, "1s 0m");
+   SY(__NR_prctl, x0 + PR_SET_NAME, buf17); SUCC;
+
+   // __NR_rt_sigreturn 173
+   GO(__NR_rt_sigreturn, "n/a");
+   //SY(__NR_rt_sigreturn); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_rt_sigaction 174
+   GO(__NR_rt_sigaction, "4s 4m");
+   SY(__NR_rt_sigaction, x0, x0+&px[2], x0+&px[2], x0); FAIL;
+
+   // __NR_rt_sigprocmask 175
+   GO(__NR_rt_sigprocmask, "4s 2m");
+   SY(__NR_rt_sigprocmask, x0, x0+1, x0+1, x0); FAIL;
+
+   // __NR_rt_sigpending 176
+   GO(__NR_rt_sigpending, "2s 1m");
+   SY(__NR_rt_sigpending, x0, x0+1); FAIL;
+
+   // __NR_rt_sigtimedwait 177
+   GO(__NR_rt_sigtimedwait, "4s 3m");
+   SY(__NR_rt_sigtimedwait, x0+1, x0+1, x0+1, x0); FAIL;
+
+   // __NR_rt_sigqueueinfo 178
+   GO(__NR_rt_sigqueueinfo, "3s 1m");
+   SY(__NR_rt_sigqueueinfo, x0, x0+1, x0); FAIL;
+
+   // __NR_rt_sigsuspend 179
+   GO(__NR_rt_sigsuspend, "2s 1m");
+   SY(__NR_rt_sigsuspend, x0 + 1, x0 + sizeof(sigset_t)); FAILx(EFAULT);
+
+   // __NR_pread64 180
+   GO(__NR_pread64, "5s 1m");
+   SY(__NR_pread64, x0, x0, x0+1, x0, x0); FAIL;
+
+   // __NR_pwrite64 181
+   GO(__NR_pwrite64, "5s 1m");
+   SY(__NR_pwrite64, x0, x0, x0+1, x0, x0); FAIL;
+
+   // __NR_chown 182
+   //GO(__NR_chown, "3s 1m");
+   //SY(__NR_chown, x0, x0, x0); FAIL;
+
+   // __NR_getcwd 183
+   GO(__NR_getcwd, "2s 1m");
+   SY(__NR_getcwd, x0, x0+1); FAIL;
+
+   // __NR_capget 184
+   GO(__NR_capget, "2s 2m");
+   SY(__NR_capget, x0, x0+1); FAIL;
+
+   // __NR_capset 185
+   GO(__NR_capset, "2s 2m");
+   SY(__NR_capset, x0, x0); FAIL;
+
+   // __NR_sigaltstack 186
+   {
+      struct our_sigaltstack {
+         void *ss_sp;
+         int ss_flags;
+         size_t ss_size;
+      } ss;
+      ss.ss_sp     = NULL;
+      ss.ss_flags  = 0;
+      ss.ss_size   = 0;
+      VALGRIND_MAKE_MEM_NOACCESS(& ss, sizeof(struct our_sigaltstack));
+      GO(__NR_sigaltstack, "2s 2m");
+      SY(__NR_sigaltstack, x0+&ss, x0+&ss); SUCC;
+   }
+
+   // __NR_sendfile 187
+   GO(__NR_sendfile, "4s 1m");
+   SY(__NR_sendfile, x0, x0, x0+1, x0); FAIL;
+
+   // __NR_getpmsg 188
+   // Could do 5s 4m with more effort, but I can't be bothered for this
+   // crappy non-standard syscall.
+   //GO(__NR_getpmsg, "5s 0m");
+   //SY(__NR_getpmsg, x0, x0, x0, x0); FAIL;
+
+   // __NR_putpmsg 189
+   // Could do 5s 2m with more effort, but I can't be bothered for this
+   // crappy non-standard syscall.
+   //GO(__NR_putpmsg, "5s 0m");
+   //SY(__NR_putpmsg, x0, x0, x0, x0, x0); FAIL;
+
+   // __NR_vfork 190
+   //GO(__NR_vfork, "other");
+   // (sse scalar_vfork.c)
+
+   // __NR_ugetrlimit 191
+   //GO(__NR_ugetrlimit, "2s 1m");
+   //SY(__NR_ugetrlimit, x0, x0); FAIL;
+
+   // __NR_mmap2 192
+   //GO(__NR_mmap2, "6s 0m");
+   //SY(__NR_mmap2, x0, x0, x0, x0, x0-1, x0); FAIL;
+
+   // __NR_truncate64 193
+   //GO(__NR_truncate64, "3s 1m");
+   //SY(__NR_truncate64, x0, x0, x0); FAIL;
+
+   // __NR_ftruncate64 194
+   //GO(__NR_ftruncate64, "3s 0m");
+   //SY(__NR_ftruncate64, x0, x0, x0); FAIL;
+
+   // __NR_stat64 195
+   //GO(__NR_stat64, "2s 2m");
+   //SY(__NR_stat64, x0, x0); FAIL;
+
+   // __NR_lstat64 196
+   //GO(__NR_lstat64, "2s 2m");
+   //SY(__NR_lstat64, x0, x0); FAIL;
+
+   // __NR_fstat64 197
+   //GO(__NR_fstat64, "2s 1m");
+   //SY(__NR_fstat64, x0, x0); FAIL;
+
+   // __NR_lchown32 198
+   //GO(__NR_lchown32, "3s 1m");
+   //SY(__NR_lchown32, x0, x0, x0); FAIL;
+
+   // __NR_getuid32 199
+   //GO(__NR_getuid32, "0s 0m");
+   //SY(__NR_getuid32); SUCC;
+
+   // __NR_getgid32 200
+   //GO(__NR_getgid32, "0s 0m");
+   //SY(__NR_getgid32); SUCC;
+
+   // __NR_geteuid32 201
+   //GO(__NR_geteuid32, "0s 0m");
+   //SY(__NR_geteuid32); SUCC;
+
+   // __NR_getegid32 202
+   //GO(__NR_getegid32, "0s 0m");
+   //SY(__NR_getegid32); SUCC;
+
+   // __NR_setreuid32 203
+   //GO(__NR_setreuid32, "2s 0m");
+   //SY(__NR_setreuid32, x0-1, x0-1); SUCC;
+
+   // __NR_setregid32 204
+   //GO(__NR_setregid32, "2s 0m");
+   //SY(__NR_setregid32, x0-1, x0-1); SUCC;
+
+   // __NR_getgroups32 205
+   //GO(__NR_getgroups32, "2s 1m");
+   //SY(__NR_getgroups32, x0+1, x0+1); FAIL;
+
+   // __NR_setgroups32 206
+   //GO(__NR_setgroups32, "2s 1m");
+   //SY(__NR_setgroups32, x0+1, x0+1); FAIL;
+
+   // __NR_fchown32 207
+   //GO(__NR_fchown32, "3s 0m");
+   //SY(__NR_fchown32, x0-1, x0, x0); FAIL;
+
+   // __NR_setresuid32 208
+   //GO(__NR_setresuid32, "3s 0m");
+   //SY(__NR_setresuid32, x0-1, x0-1, x0-1); SUCC;
+
+   // __NR_getresuid32 209
+   //GO(__NR_getresuid32, "3s 3m");
+   //SY(__NR_getresuid32, x0, x0, x0); FAIL;
+
+   // __NR_setresgid32 210
+   //GO(__NR_setresgid32, "3s 0m");
+   //SY(__NR_setresgid32, x0-1, x0-1, x0-1); SUCC;
+
+   // __NR_getresgid32 211
+   //GO(__NR_getresgid32, "3s 3m");
+   //SY(__NR_getresgid32, x0, x0, x0); FAIL;
+
+   // __NR_chown32 212
+   //GO(__NR_chown32, "3s 1m");
+   //SY(__NR_chown32, x0, x0, x0); FAIL;
+
+   // __NR_setuid32 213
+   //GO(__NR_setuid32, "1s 0m");
+   //SY(__NR_setuid32, x0-1); FAIL;
+
+   // __NR_setgid32 214
+   //GO(__NR_setgid32, "1s 0m");
+   //SY(__NR_setgid32, x0-1); FAIL;
+
+   // __NR_setfsuid32 215
+   //GO(__NR_setfsuid32, "1s 0m");
+   //SY(__NR_setfsuid32, x0); SUCC;  // This syscall has a stupid return value
+
+   // __NR_setfsgid32 216
+   //GO(__NR_setfsgid32, "1s 0m");
+   //SY(__NR_setfsgid32, x0); SUCC;  // This syscall has a stupid return value
+
+   // __NR_pivot_root 217
+   GO(__NR_pivot_root, "n/a");
+   //SY(__NR_pivot_root); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_mincore 218
+   GO(__NR_mincore, "3s 1m");
+   SY(__NR_mincore, x0, x0+40960, x0); FAIL;
+
+   // __NR_madvise 219
+   GO(__NR_madvise, "3s 0m");
+   SY(__NR_madvise, x0, x0+1, x0); FAILx(ENOMEM);
+
+   // __NR_getdents64 220
+   GO(__NR_getdents64, "3s 1m");
+   SY(__NR_getdents64, x0, x0, x0+1); FAIL;
+
+   // __NR_fcntl64 221
+   // As with sys_open(), we don't trigger errors for the 1st two args for
+   // the later ones.
+   // For F_GETFD the 3rd arg is ignored.
+   //GO(__NR_fcntl64, "(GETFD) 2s 0m");
+   //SY(__NR_fcntl64, x0-1, x0+F_GETFD, x0); FAILx(EBADF);
+
+   // For F_DUPFD the 3rd arg is 'arg'
+   //GO(__NR_fcntl64, "(DUPFD) 1s 0m");
+   //SY(__NR_fcntl64, -1, F_DUPFD, x0); FAILx(EBADF);
+
+   // For F_GETLK the 3rd arg is 'lock'.
+   // On x86, this fails w/EBADF.  But on amd64 in 32-bit mode it fails
+   // w/EFAULT.
+   //GO(__NR_fcntl64, "(GETLK) 1s 0m");
+   //SY(__NR_fcntl64, -1, +F_GETLK, x0); FAIL; //FAILx(EBADF);
+
+   // 222
+   GO(222, "ni");
+   SY(222); FAIL;
+
+   // 223
+   GO(223, "ni");
+   SY(223); FAIL;
+
+   // __NR_gettid 224
+   GO(__NR_gettid, "n/a");
+   //SY(__NR_gettid); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_readahead 225
+   GO(__NR_readahead, "n/a");
+   //SY(__NR_readahead); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_setxattr 226
+   GO(__NR_setxattr, "5s 3m");
+   SY(__NR_setxattr, x0, x0, x0, x0+1, x0); FAIL;
+
+   // __NR_lsetxattr 227
+   GO(__NR_lsetxattr, "5s 3m");
+   SY(__NR_lsetxattr, x0, x0, x0, x0+1, x0); FAIL;
+
+   // __NR_fsetxattr 228
+   GO(__NR_fsetxattr, "5s 2m");
+   SY(__NR_fsetxattr, x0, x0, x0, x0+1, x0); FAIL;
+
+   // __NR_getxattr 229
+   GO(__NR_getxattr, "4s 3m");
+   SY(__NR_getxattr, x0, x0, x0, x0+1); FAIL;
+
+   // __NR_lgetxattr 230
+   GO(__NR_lgetxattr, "4s 3m");
+   SY(__NR_lgetxattr, x0, x0, x0, x0+1); FAIL;
+
+   // __NR_fgetxattr 231
+   GO(__NR_fgetxattr, "4s 2m");
+   SY(__NR_fgetxattr, x0, x0, x0, x0+1); FAIL;
+
+   // __NR_listxattr 232
+   GO(__NR_listxattr, "3s 2m");
+   SY(__NR_listxattr, x0, x0, x0+1); FAIL;
+
+   // __NR_llistxattr 233
+   GO(__NR_llistxattr, "3s 2m");
+   SY(__NR_llistxattr, x0, x0, x0+1); FAIL;
+
+   // __NR_flistxattr 234
+   GO(__NR_flistxattr, "3s 1m");
+   SY(__NR_flistxattr, x0-1, x0, x0+1); FAIL; /* kernel returns EBADF, but both seem correct */
+
+   // __NR_removexattr 235
+   GO(__NR_removexattr, "2s 2m");
+   SY(__NR_removexattr, x0, x0); FAIL;
+
+   // __NR_lremovexattr 236
+   GO(__NR_lremovexattr, "2s 2m");
+   SY(__NR_lremovexattr, x0, x0); FAIL;
+
+   // __NR_fremovexattr 237
+   GO(__NR_fremovexattr, "2s 1m");
+   SY(__NR_fremovexattr, x0, x0); FAIL;
+
+   // __NR_tkill 238
+   GO(__NR_tkill, "n/a");
+   //SY(__NR_tkill); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_sendfile64 239
+   //GO(__NR_sendfile64, "4s 1m");
+   //SY(__NR_sendfile64, x0, x0, x0+1, x0); FAIL;
+
+   // __NR_futex 240
+#ifndef FUTEX_WAIT
+#define FUTEX_WAIT   0
+#endif
+   // XXX: again, glibc not doing 6th arg means we have only 5s errors
+   GO(__NR_futex, "4s 2m");
+   SY(__NR_futex, x0+FUTEX_WAIT, x0, x0, x0+1); FAIL;
+
+   // __NR_sched_setaffinity 241
+   GO(__NR_sched_setaffinity, "3s 1m");
+   SY(__NR_sched_setaffinity, x0, x0+1, x0); FAIL;
+
+   // __NR_sched_getaffinity 242
+   GO(__NR_sched_getaffinity, "3s 1m");
+   SY(__NR_sched_getaffinity, x0, x0+1, x0); FAIL;
+
+   // __NR_set_thread_area 243
+   //GO(__NR_set_thread_area, "1s 1m");
+   //SY(__NR_set_thread_area, x0); FAILx(EFAULT);
+
+   // __NR_get_thread_area 244
+   //GO(__NR_get_thread_area, "1s 1m");
+   //SY(__NR_get_thread_area, x0); FAILx(EFAULT);
+
+   // __NR_io_setup 245
+   GO(__NR_io_setup, "2s 1m");
+   SY(__NR_io_setup, x0, x0); FAIL;
+
+   // __NR_io_destroy 246
+   {
+      // jump through hoops to prevent the PRE(io_destroy) wrapper crashing.
+      struct fake_aio_ring {
+        unsigned        id;     /* kernel internal index number */
+        unsigned        nr;     /* number of io_events */
+        // There are more fields in the real aio_ring, but the 'nr' field is
+        // the only one used by the PRE() wrapper.
+      } ring = { 0, 0 };
+      struct fake_aio_ring* ringptr = &ring;
+      GO(__NR_io_destroy, "1s 0m");
+      SY(__NR_io_destroy, x0+&ringptr); FAIL;
+   }
+
+   // __NR_io_getevents 247
+   GO(__NR_io_getevents, "5s 2m");
+   SY(__NR_io_getevents, x0, x0, x0+1, x0, x0+1); FAIL;
+
+   // __NR_io_submit 248
+   GO(__NR_io_submit, "3s 1m");
+   SY(__NR_io_submit, x0, x0+1, x0); FAIL;
+
+   // __NR_io_cancel 249
+   GO(__NR_io_cancel, "3s 2m");
+   SY(__NR_io_cancel, x0, x0, x0); FAIL;
+
+   // __NR_fadvise64 250
+   GO(__NR_fadvise64, "n/a");
+   //SY(__NR_fadvise64); // (Not yet handled by Valgrind) FAIL;
+
+   // 251
+   GO(251, "ni");
+   SY(251); FAIL;
+
+   // __NR_exit_group 252
+   GO(__NR_exit_group, "other");
+   // (see scalar_exit_group.c)
+
+   // __NR_lookup_dcookie 253
+   GO(__NR_lookup_dcookie, "4s 1m");
+   SY(__NR_lookup_dcookie, x0, x0, x0, x0+1); FAIL;
+
+   // __NR_epoll_create 254
+   //GO(__NR_epoll_create, "1s 0m");
+   //SY(__NR_epoll_create, x0); SUCC_OR_FAIL;
+
+   // __NR_epoll_ctl 255
+   GO(__NR_epoll_ctl, "4s 1m");
+   SY(__NR_epoll_ctl, x0, x0, x0, x0); FAIL;
+
+   // __NR_epoll_wait 256
+   //GO(__NR_epoll_wait, "4s 1m");
+   //SY(__NR_epoll_wait, x0, x0, x0+1, x0); FAIL;
+
+   // __NR_remap_file_pages 257
+   GO(__NR_remap_file_pages, "n/a");
+   //SY(__NR_remap_file_pages); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_set_tid_address 258
+   GO(__NR_set_tid_address, "1s 0m");
+   SY(__NR_set_tid_address, x0); SUCC_OR_FAILx(ENOSYS);
+
+   // __NR_timer_create 259
+   GO(__NR_timer_create, "3s 2m");
+   SY(__NR_timer_create, x0, x0+1, x0); FAIL;
+
+   // __NR_timer_settime (__NR_timer_create+1)
+   GO(__NR_timer_settime, "4s 2m");
+   SY(__NR_timer_settime, x0, x0, x0, x0+1); FAIL;
+
+   // __NR_timer_gettime (__NR_timer_create+2)
+   GO(__NR_timer_gettime, "2s 1m");
+   SY(__NR_timer_gettime, x0, x0); FAIL;
+
+   // __NR_timer_getoverrun (__NR_timer_create+3)
+   GO(__NR_timer_getoverrun, "1s 0m");
+   SY(__NR_timer_getoverrun, x0); FAIL;
+
+   // __NR_timer_delete (__NR_timer_create+4)
+   GO(__NR_timer_delete, "1s 0m");
+   SY(__NR_timer_delete, x0); FAIL;
+
+   // __NR_clock_settime (__NR_timer_create+5)
+   GO(__NR_clock_settime, "2s 1m");
+   SY(__NR_clock_settime, x0, x0);  FAIL; FAIL;
+
+   // __NR_clock_gettime (__NR_timer_create+6)
+   GO(__NR_clock_gettime, "2s 1m");
+   SY(__NR_clock_gettime, x0, x0); FAIL;
+
+   // __NR_clock_getres (__NR_timer_create+7)
+   GO(__NR_clock_getres, "2s 1m");
+   SY(__NR_clock_getres, x0+1, x0+1); FAIL; FAIL;
+
+   // __NR_clock_nanosleep (__NR_timer_create+8)
+   GO(__NR_clock_nanosleep, "n/a");
+   //SY(__NR_clock_nanosleep); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_statfs64 268
+   //GO(__NR_statfs64, "3s 2m");
+   //SY(__NR_statfs64, x0, x0+1, x0); FAIL;
+
+   // __NR_fstatfs64 269
+   //GO(__NR_fstatfs64, "3s 1m");
+   //SY(__NR_fstatfs64, x0, x0+1, x0); FAIL;
+
+   // __NR_tgkill 270
+   GO(__NR_tgkill, "n/a");
+   //SY(__NR_tgkill); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_utimes 271
+   //GO(__NR_utimes, "2s 2m");
+   //SY(__NR_utimes, x0, x0+1); FAIL;
+
+   // __NR_fadvise64_64 272
+   //GO(__NR_fadvise64_64, "n/a");
+   //SY(__NR_fadvise64_64); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_vserver 273
+   //GO(__NR_vserver, "ni");
+   //SY(__NR_vserver); FAIL;
+
+   // __NR_mbind 274
+   GO(__NR_mbind, "n/a");
+   //SY(__NR_mbind); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_get_mempolicy 275
+   GO(__NR_get_mempolicy, "n/a");
+   //SY(__NR_get_mempolicy); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_set_mempolicy 276
+   GO(__NR_set_mempolicy, "n/a");
+   //SY(__NR_set_mempolicy); // (Not yet handled by Valgrind) FAIL;
+
+   // __NR_mq_open 277
+   GO(__NR_mq_open, "4s 3m");
+   SY(__NR_mq_open, x0, x0+O_CREAT, x0, x0+1); FAIL;
+
+   // __NR_mq_unlink (__NR_mq_open+1)
+   GO(__NR_mq_unlink, "1s 1m");
+   SY(__NR_mq_unlink, x0); FAIL;
+
+   // __NR_mq_timedsend (__NR_mq_open+2)
+   GO(__NR_mq_timedsend, "5s 2m");
+   SY(__NR_mq_timedsend, x0, x0, x0+1, x0, x0+1); FAIL;
+
+   // __NR_mq_timedreceive (__NR_mq_open+3)
+   GO(__NR_mq_timedreceive, "5s 3m");
+   SY(__NR_mq_timedreceive, x0, x0, x0+1, x0+1, x0+1); FAIL;
+
+   // __NR_mq_notify (__NR_mq_open+4)
+   GO(__NR_mq_notify, "2s 1m");
+   SY(__NR_mq_notify, x0, x0+1); FAIL;
+
+   // __NR_mq_getsetattr (__NR_mq_open+5)
+   GO(__NR_mq_getsetattr, "3s 2m");
+   SY(__NR_mq_getsetattr, x0, x0+1, x0+1); FAIL;
+
+   // __NR_sys_kexec_load 283
+   //GO(__NR_sys_kexec_load, "ni");
+   //SY(__NR_sys_kexec_load); FAIL;
+
+   // __NR_epoll_create1 329
+   GO(__NR_epoll_create1, "1s 0m");
+   SY(__NR_epoll_create1, x0); SUCC_OR_FAIL;
+
+   // __NR_process_vm_readv 347
+   GO(__NR_process_vm_readv, "6s 2m");
+   SY(__NR_process_vm_readv, x0, x0, x0+1, x0, x0+1, x0); FAIL;
+
+   // __NR_process_vm_writev 348
+   GO(__NR_process_vm_writev, "6s 2m");
+   SY(__NR_process_vm_writev, x0, x0, x0+1, x0, x0+1, x0); FAIL;
+
+   // no such syscall...
+   GO(9999, "1e");
+   SY(9999); FAIL;
+
+   // __NR_exit 1
+   GO(__NR_exit, "1s 0m");
+   SY(__NR_exit, x0); FAIL;
+
+   assert(0);
 }
diff --git a/memcheck/tests/loongarch64-linux/scalar.h b/memcheck/tests/loongarch64-linux/scalar.h
index 8f414f586..4d86d2c0a 100644
--- a/memcheck/tests/loongarch64-linux/scalar.h
+++ b/memcheck/tests/loongarch64-linux/scalar.h
@@ -1 +1,62 @@
-/* TODO */
+/* This is the loongarch64 variant of memcheck/tests/x86-linux/scalar.h */
+#include "../../../include/vki/vki-scnums-loongarch64-linux.h"
+
+#include <assert.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/syscall.h>
+#include <sys/stat.h>
+#include <sys/ptrace.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+
+// Since we use vki_unistd.h, we can't include <unistd.h>.  So we have to
+// declare this ourselves.
+extern long int syscall (long int __sysno, ...) __THROW;
+
+// Thorough syscall scalar arg checking.  Also serves as thorough checking
+// for (very) basic syscall use.  Generally not trying to do anything
+// meaningful with the syscalls.
+
+#define GO(__NR_xxx, s) \
+   fprintf(stderr, "-----------------------------------------------------\n"  \
+                   "%3d:%20s %s\n"                                            \
+                   "-----------------------------------------------------\n", \
+                   __NR_xxx, #__NR_xxx, s);
+
+#define SY  res = syscall
+
+#define FAIL  assert(-1 == res);
+#define SUCC  assert(-1 != res);
+#define SUCC_OR_FAIL    /* no test */
+
+#define FAILx(E) \
+   do { \
+      int myerrno = errno; \
+      if (-1 == res) { \
+         if (E == myerrno) { \
+            /* as expected */ \
+         } else { \
+         fprintf(stderr, "Expected error %s (%d), got %d\n", #E, E, myerrno); \
+         exit(1); \
+         } \
+      } else { \
+         fprintf(stderr, "Expected error %s (%d), got success\n", #E, E); \
+         exit(1); \
+      } \
+   } while (0);
+
+#define SUCC_OR_FAILx(E) \
+   do { \
+      int myerrno = errno; \
+      if (-1 == res) { \
+         if (E == myerrno) { \
+            /* as expected */ \
+         } else { \
+         fprintf(stderr, "Expected error %s (%d), got %d\n", #E, E, myerrno); \
+         exit(1); \
+         } \
+      } \
+   } while (0);
diff --git a/memcheck/tests/loongarch64-linux/scalar.stderr.exp b/memcheck/tests/loongarch64-linux/scalar.stderr.exp
index e69de29bb..a90b90af5 100644
--- a/memcheck/tests/loongarch64-linux/scalar.stderr.exp
+++ b/memcheck/tests/loongarch64-linux/scalar.stderr.exp
@@ -0,0 +1,2716 @@
+-----------------------------------------------------
+128:__NR_restart_syscall n/a
+-----------------------------------------------------
+-----------------------------------------------------
+ 93:           __NR_exit below
+-----------------------------------------------------
+-----------------------------------------------------
+ 63:           __NR_read 1+3s 1m
+-----------------------------------------------------
+Syscall param (syscallno) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:51)
+
+Syscall param read(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:51)
+
+Syscall param read(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:51)
+
+Syscall param read(count) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:51)
+
+Syscall param read(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:51)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 64:          __NR_write 3s 1m
+-----------------------------------------------------
+Syscall param write(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:55)
+
+Syscall param write(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:55)
+
+Syscall param write(count) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:55)
+
+Syscall param write(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:55)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 57:          __NR_close 1s 0m
+-----------------------------------------------------
+Syscall param close(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:69)
+
+-----------------------------------------------------
+221:         __NR_execve 3s 1m
+-----------------------------------------------------
+Syscall param execve(filename) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:89)
+
+Syscall param execve(argv) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:89)
+
+Syscall param execve(envp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:89)
+
+Syscall param execve(filename) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:89)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param execve(argv) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:89)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+221:         __NR_execve 3s 1m
+-----------------------------------------------------
+Syscall param execve(filename) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:92)
+
+Syscall param execve(argv) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:92)
+
+Syscall param execve(envp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:92)
+
+Syscall param execve(filename) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:92)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param execve(argv) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:92)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+221:         __NR_execve 4s 2m
+-----------------------------------------------------
+Syscall param execve(filename) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:96)
+
+Syscall param execve(argv) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:96)
+
+Syscall param execve(envp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:96)
+
+Syscall param execve(filename) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:96)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param execve(argv) points to uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:96)
+ Address 0x........ is on thread 1's stack
+ in frame #1, created by main (scalar.c:28)
+
+Syscall param execve(argv[0]) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:96)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+221:         __NR_execve 4s 2m
+-----------------------------------------------------
+Syscall param execve(filename) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:99)
+
+Syscall param execve(argv) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:99)
+
+Syscall param execve(envp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:99)
+
+Syscall param execve(filename) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:99)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param execve(envp) points to uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:99)
+ Address 0x........ is on thread 1's stack
+ in frame #1, created by main (scalar.c:28)
+
+Syscall param execve(envp[i]) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:99)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 49:          __NR_chdir 1s 1m
+-----------------------------------------------------
+Syscall param chdir(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:103)
+
+Syscall param chdir(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:103)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 62:          __NR_lseek 3s 0m
+-----------------------------------------------------
+Syscall param lseek(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:131)
+
+Syscall param lseek(offset) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:131)
+
+Syscall param lseek(whence) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:131)
+
+-----------------------------------------------------
+172:         __NR_getpid 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+ 40:          __NR_mount 5s 3m
+-----------------------------------------------------
+Syscall param mount(source) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:139)
+
+Syscall param mount(target) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:139)
+
+Syscall param mount(type) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:139)
+
+Syscall param mount(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:139)
+
+Syscall param mount(data) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:139)
+
+Syscall param mount(target) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:139)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param mount(type) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:139)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+146:         __NR_setuid 1s 0m
+-----------------------------------------------------
+Syscall param setuid(uid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:147)
+
+-----------------------------------------------------
+174:         __NR_getuid 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+ 81:           __NR_sync 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+129:           __NR_kill 2s 0m
+-----------------------------------------------------
+Syscall param kill(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:204)
+
+Syscall param kill(signal) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:204)
+
+-----------------------------------------------------
+ 23:            __NR_dup 1s 0m
+-----------------------------------------------------
+Syscall param dup(oldfd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:220)
+
+-----------------------------------------------------
+153:          __NR_times 1s 1m
+-----------------------------------------------------
+Syscall param times(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:228)
+
+Syscall param times(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:228)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+214:            __NR_brk 1s 0m
+-----------------------------------------------------
+Syscall param brk(end_data_segment) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:236)
+
+-----------------------------------------------------
+144:         __NR_setgid 1s 0m
+-----------------------------------------------------
+Syscall param setgid(gid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:240)
+
+-----------------------------------------------------
+176:         __NR_getgid 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+175:        __NR_geteuid 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+177:        __NR_getegid 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+ 89:           __NR_acct 1s 1m
+-----------------------------------------------------
+Syscall param acct(filename) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:260)
+
+Syscall param acct(filename) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:260)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 39:        __NR_umount2 2s 1m
+-----------------------------------------------------
+Syscall param umount2(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:264)
+
+Syscall param umount2(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:264)
+
+Syscall param umount2(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:264)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 29:          __NR_ioctl 3s 1m
+-----------------------------------------------------
+Syscall param ioctl(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:273)
+
+Syscall param ioctl(request) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:273)
+
+Syscall param ioctl(arg) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:273)
+
+Syscall param ioctl(TCSET{S,SW,SF}) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:273)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 25:          __NR_fcntl (GETFD) 2s 0m
+-----------------------------------------------------
+Syscall param fcntl(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:279)
+
+Syscall param fcntl(cmd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:279)
+
+-----------------------------------------------------
+ 25:          __NR_fcntl (DUPFD) 1s 0m
+-----------------------------------------------------
+Syscall param fcntl(arg) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:285)
+
+-----------------------------------------------------
+ 25:          __NR_fcntl (GETLK) 1s 5m
+-----------------------------------------------------
+Syscall param fcntl(lock) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:291)
+
+Syscall param fcntl(lock->l_type) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:291)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param fcntl(lock->l_whence) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:291)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param fcntl(lock->l_start) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:291)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param fcntl(lock->l_len) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:291)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param fcntl(lock->l_pid) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:291)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+154:        __NR_setpgid 2s 0m
+-----------------------------------------------------
+Syscall param setpgid(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:299)
+
+Syscall param setpgid(pgid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:299)
+
+-----------------------------------------------------
+166:          __NR_umask 1s 0m
+-----------------------------------------------------
+Syscall param umask(mask) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:311)
+
+-----------------------------------------------------
+ 51:         __NR_chroot 1s 1m
+-----------------------------------------------------
+Syscall param chroot(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:315)
+
+Syscall param chroot(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:315)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+173:        __NR_getppid 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+157:         __NR_setsid 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+145:       __NR_setreuid 2s 0m
+-----------------------------------------------------
+Syscall param setreuid(ruid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:351)
+
+Syscall param setreuid(euid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:351)
+
+-----------------------------------------------------
+143:       __NR_setregid 2s 0m
+-----------------------------------------------------
+Syscall param setregid(rgid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:355)
+
+Syscall param setregid(egid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:355)
+
+-----------------------------------------------------
+161:    __NR_sethostname n/a
+-----------------------------------------------------
+-----------------------------------------------------
+165:      __NR_getrusage 2s 1m
+-----------------------------------------------------
+Syscall param getrusage(who) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:380)
+
+Syscall param getrusage(usage) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:380)
+
+Syscall param getrusage(usage) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:380)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+169:   __NR_gettimeofday 2s 2m
+-----------------------------------------------------
+Syscall param gettimeofday(tv) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:384)
+
+Syscall param gettimeofday(tz) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:384)
+
+Syscall param gettimeofday(tv) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:384)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param gettimeofday(tz) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:384)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+170:   __NR_settimeofday 2s 2m
+-----------------------------------------------------
+Syscall param settimeofday(tv) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:388)
+
+Syscall param settimeofday(tz) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:388)
+
+Syscall param settimeofday(tv) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:388)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param settimeofday(tz) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:388)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+158:      __NR_getgroups 2s 1m
+-----------------------------------------------------
+Syscall param getgroups(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:392)
+
+Syscall param getgroups(list) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:392)
+
+Syscall param getgroups(list) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:392)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+159:      __NR_setgroups 2s 1m
+-----------------------------------------------------
+Syscall param setgroups(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:396)
+
+Syscall param setgroups(list) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:396)
+
+Syscall param setgroups(list) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:396)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+224:         __NR_swapon n/a
+-----------------------------------------------------
+-----------------------------------------------------
+142:         __NR_reboot n/a
+-----------------------------------------------------
+-----------------------------------------------------
+222:           __NR_mmap 1s 1m
+-----------------------------------------------------
+Syscall param mmap(addr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:437)
+
+-----------------------------------------------------
+215:         __NR_munmap 2s 0m
+-----------------------------------------------------
+Syscall param munmap(start) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:442)
+
+Syscall param munmap(length) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:442)
+
+-----------------------------------------------------
+ 45:       __NR_truncate 2s 1m
+-----------------------------------------------------
+Syscall param truncate(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:446)
+
+
+More than 100 errors detected.  Subsequent errors
+will still be recorded, but in less detail than before.
+Syscall param truncate(length) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:446)
+
+Syscall param truncate(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:446)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 46:      __NR_ftruncate 2s 0m
+-----------------------------------------------------
+Syscall param ftruncate(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:450)
+
+Syscall param ftruncate(length) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:450)
+
+-----------------------------------------------------
+ 52:         __NR_fchmod 2s 0m
+-----------------------------------------------------
+Syscall param fchmod(fildes) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:454)
+
+Syscall param fchmod(mode) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:454)
+
+-----------------------------------------------------
+ 55:         __NR_fchown 3s 0m
+-----------------------------------------------------
+Syscall param fchown(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:458)
+
+Syscall param fchown(owner) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:458)
+
+Syscall param fchown(group) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:458)
+
+-----------------------------------------------------
+141:    __NR_getpriority 2s 0m
+-----------------------------------------------------
+Syscall param getpriority(which) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:462)
+
+Syscall param getpriority(who) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:462)
+
+-----------------------------------------------------
+140:    __NR_setpriority 3s 0m
+-----------------------------------------------------
+Syscall param setpriority(which) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:466)
+
+Syscall param setpriority(who) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:466)
+
+Syscall param setpriority(prio) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:466)
+
+-----------------------------------------------------
+ 43:         __NR_statfs 2s 2m
+-----------------------------------------------------
+Syscall param statfs(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:474)
+
+Syscall param statfs(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:474)
+
+Syscall param statfs(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:474)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param statfs(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:474)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 44:        __NR_fstatfs 2s 1m
+-----------------------------------------------------
+Syscall param fstatfs(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:478)
+
+Syscall param fstatfs(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:478)
+
+Syscall param fstatfs(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:478)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+116:         __NR_syslog 3s 1m
+-----------------------------------------------------
+Syscall param syslog(type) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:490)
+
+Syscall param syslog(bufp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:490)
+
+Syscall param syslog(len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:490)
+
+Syscall param syslog(bufp) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:490)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+103:      __NR_setitimer 3s 2m
+-----------------------------------------------------
+Syscall param setitimer(which) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:494)
+
+Syscall param setitimer(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:494)
+
+Syscall param setitimer(ovalue) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:494)
+
+Syscall param setitimer(&value->it_interval) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:494)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param setitimer(&value->it_value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:494)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param setitimer(&ovalue->it_interval) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:494)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param setitimer(&ovalue->it_value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:494)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+102:      __NR_getitimer 2s 1m
+-----------------------------------------------------
+Syscall param getitimer(which) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:498)
+
+Syscall param getitimer(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:498)
+
+Syscall param getitimer(&value->it_interval) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:498)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param getitimer(&value->it_value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:498)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 58:        __NR_vhangup 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+260:          __NR_wait4 4s 2m
+-----------------------------------------------------
+Syscall param wait4(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:534)
+
+Syscall param wait4(status) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:534)
+
+Syscall param wait4(options) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:534)
+
+Syscall param wait4(rusage) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:534)
+
+Syscall param wait4(status) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:534)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param wait4(rusage) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:534)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+225:        __NR_swapoff n/a
+-----------------------------------------------------
+-----------------------------------------------------
+179:        __NR_sysinfo 1s 1m
+-----------------------------------------------------
+Syscall param sysinfo(info) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:542)
+
+Syscall param sysinfo(info) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:542)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 82:          __NR_fsync 1s 0m
+-----------------------------------------------------
+Syscall param fsync(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:553)
+
+-----------------------------------------------------
+220:          __NR_clone 5s 3m
+-----------------------------------------------------
+Syscall param clone(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:564)
+
+Syscall param clone(child_stack) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:564)
+
+Syscall param clone(parent_tidptr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:564)
+
+Syscall param clone(parent_tidptr) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:564)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param clone(tlsinfo) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:564)
+
+Syscall param clone(child_tidptr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:564)
+
+Syscall param clone(child_tidptr) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:564)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+162:  __NR_setdomainname n/a
+-----------------------------------------------------
+-----------------------------------------------------
+160:          __NR_uname 1s 1m
+-----------------------------------------------------
+Syscall param uname(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:575)
+
+Syscall param uname(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:575)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+171:       __NR_adjtimex XXX
+-----------------------------------------------------
+-----------------------------------------------------
+226:       __NR_mprotect 3s 0m
+-----------------------------------------------------
+Syscall param mprotect(addr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:588)
+
+Syscall param mprotect(len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:588)
+
+Syscall param mprotect(prot) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:588)
+
+-----------------------------------------------------
+105:    __NR_init_module 3s 2m
+-----------------------------------------------------
+Syscall param init_module(umod) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:600)
+
+Syscall param init_module(len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:600)
+
+Syscall param init_module(uargs) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:600)
+
+Syscall param init_module(umod) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:600)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param init_module(uargs) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:600)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+106:  __NR_delete_module n/a
+-----------------------------------------------------
+-----------------------------------------------------
+ 60:       __NR_quotactl 4s 1m
+-----------------------------------------------------
+Syscall param quotactl(cmd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:612)
+
+Syscall param quotactl(special) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:612)
+
+Syscall param quotactl(id) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:612)
+
+Syscall param quotactl(addr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:612)
+
+Syscall param quotactl(special) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:612)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+155:        __NR_getpgid 1s 0m
+-----------------------------------------------------
+Syscall param getpgid(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:616)
+
+-----------------------------------------------------
+ 50:         __NR_fchdir 1s 0m
+-----------------------------------------------------
+Syscall param fchdir(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:620)
+
+-----------------------------------------------------
+ 92:    __NR_personality 1s 0m
+-----------------------------------------------------
+Syscall param personality(persona) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:632)
+
+-----------------------------------------------------
+151:       __NR_setfsuid 1s 0m
+-----------------------------------------------------
+Syscall param setfsuid(uid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:640)
+
+-----------------------------------------------------
+152:       __NR_setfsgid 1s 0m
+-----------------------------------------------------
+Syscall param setfsgid(gid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:644)
+
+-----------------------------------------------------
+ 32:          __NR_flock 2s 0m
+-----------------------------------------------------
+Syscall param flock(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:660)
+
+Syscall param flock(operation) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:660)
+
+-----------------------------------------------------
+227:          __NR_msync 3s 1m
+-----------------------------------------------------
+Syscall param msync(start) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:664)
+
+Syscall param msync(length) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:664)
+
+Syscall param msync(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:664)
+
+Syscall param msync(start) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:664)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 65:          __NR_readv 3s 1m
+-----------------------------------------------------
+Syscall param readv(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:668)
+
+Syscall param readv(vector) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:668)
+
+Syscall param readv(count) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:668)
+
+Syscall param readv(vector) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:668)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 66:         __NR_writev 3s 1m
+-----------------------------------------------------
+Syscall param writev(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:672)
+
+Syscall param writev(vector) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:672)
+
+Syscall param writev(count) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:672)
+
+Syscall param writev(vector) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:672)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+156:         __NR_getsid 1s 0m
+-----------------------------------------------------
+Syscall param getsid(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:676)
+
+-----------------------------------------------------
+ 83:      __NR_fdatasync 1s 0m
+-----------------------------------------------------
+Syscall param fdatasync(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:680)
+
+-----------------------------------------------------
+228:          __NR_mlock 2s 0m
+-----------------------------------------------------
+Syscall param mlock(addr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:688)
+
+Syscall param mlock(len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:688)
+
+-----------------------------------------------------
+229:        __NR_munlock 2s 0m
+-----------------------------------------------------
+Syscall param munlock(addr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:692)
+
+Syscall param munlock(len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:692)
+
+-----------------------------------------------------
+230:       __NR_mlockall 1s 0m
+-----------------------------------------------------
+Syscall param mlockall(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:696)
+
+-----------------------------------------------------
+231:     __NR_munlockall 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+118: __NR_sched_setparam 2s 1m
+-----------------------------------------------------
+Syscall param sched_setparam(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:704)
+
+Syscall param sched_setparam(p) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:704)
+
+Syscall param sched_setparam(p) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:704)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+121: __NR_sched_getparam 2s 1m
+-----------------------------------------------------
+Syscall param sched_getparam(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:708)
+
+Syscall param sched_getparam(p) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:708)
+
+Syscall param sched_getparam(p) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:708)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+119:__NR_sched_setscheduler 3s 1m
+-----------------------------------------------------
+Syscall param sched_setscheduler(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:712)
+
+Syscall param sched_setscheduler(policy) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:712)
+
+Syscall param sched_setscheduler(p) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:712)
+
+Syscall param sched_setscheduler(p) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:712)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+120:__NR_sched_getscheduler 1s 0m
+-----------------------------------------------------
+Syscall param sched_getscheduler(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:716)
+
+-----------------------------------------------------
+124:    __NR_sched_yield 0s 0m
+-----------------------------------------------------
+-----------------------------------------------------
+125:__NR_sched_get_priority_max 1s 0m
+-----------------------------------------------------
+Syscall param sched_get_priority_max(policy) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:724)
+
+-----------------------------------------------------
+126:__NR_sched_get_priority_min 1s 0m
+-----------------------------------------------------
+Syscall param sched_get_priority_min(policy) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:728)
+
+-----------------------------------------------------
+127:__NR_sched_rr_get_interval n/a
+-----------------------------------------------------
+-----------------------------------------------------
+101:      __NR_nanosleep 2s 2m
+-----------------------------------------------------
+Syscall param nanosleep(req) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:736)
+
+Syscall param nanosleep(rem) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:736)
+
+Syscall param nanosleep(req) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:736)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param nanosleep(rem) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:736)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+216:         __NR_mremap 5s 0m
+-----------------------------------------------------
+Syscall param mremap(old_addr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:740)
+
+Syscall param mremap(old_size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:740)
+
+Syscall param mremap(new_size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:740)
+
+Syscall param mremap(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:740)
+
+Syscall param mremap(new_addr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:740)
+
+-----------------------------------------------------
+147:      __NR_setresuid 3s 0m
+-----------------------------------------------------
+Syscall param setresuid(ruid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:744)
+
+Syscall param setresuid(euid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:744)
+
+Syscall param setresuid(suid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:744)
+
+-----------------------------------------------------
+148:      __NR_getresuid 3s 3m
+-----------------------------------------------------
+Syscall param getresuid(ruid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:748)
+
+Syscall param getresuid(euid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:748)
+
+Syscall param getresuid(suid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:748)
+
+Syscall param getresuid(ruid) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:748)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param getresuid(euid) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:748)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param getresuid(suid) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:748)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 42:     __NR_nfsservctl n/a
+-----------------------------------------------------
+-----------------------------------------------------
+149:      __NR_setresgid 3s 0m
+-----------------------------------------------------
+Syscall param setresgid(rgid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:768)
+
+Syscall param setresgid(egid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:768)
+
+Syscall param setresgid(sgid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:768)
+
+-----------------------------------------------------
+150:      __NR_getresgid 3s 3m
+-----------------------------------------------------
+Syscall param getresgid(rgid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:772)
+
+Syscall param getresgid(egid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:772)
+
+Syscall param getresgid(sgid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:772)
+
+Syscall param getresgid(rgid) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:772)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param getresgid(egid) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:772)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param getresgid(sgid) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:772)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+167:          __NR_prctl 5s 0m
+-----------------------------------------------------
+Syscall param prctl(option) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:777)
+
+Syscall param prctl(arg2) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:777)
+
+Syscall param prctl(arg3) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:777)
+
+Syscall param prctl(arg4) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:777)
+
+Syscall param prctl(arg5) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:777)
+
+-----------------------------------------------------
+167:          __NR_prctl 2s 0m
+-----------------------------------------------------
+Syscall param prctl(option) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:782)
+
+Syscall param prctl(set-name) points to uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:782)
+ Address 0x........ is on thread 1's stack
+ in frame #1, created by main (scalar.c:28)
+
+-----------------------------------------------------
+167:          __NR_prctl 1s 0m
+-----------------------------------------------------
+Syscall param prctl(option) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:787)
+
+-----------------------------------------------------
+139:   __NR_rt_sigreturn n/a
+-----------------------------------------------------
+-----------------------------------------------------
+134:   __NR_rt_sigaction 4s 4m
+-----------------------------------------------------
+Syscall param rt_sigaction(signum) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:795)
+
+Syscall param rt_sigaction(act) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:795)
+
+Syscall param rt_sigaction(oldact) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:795)
+
+Syscall param rt_sigaction(sigsetsize) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:795)
+
+Syscall param rt_sigaction(act->sa_handler) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:795)
+ Address 0x........ is 8 bytes after a block of size 8 alloc'd
+   at 0x........: malloc (vg_replace_malloc.c:...)
+   by 0x........: main (scalar.c:30)
+
+Syscall param rt_sigaction(act->sa_mask) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:795)
+ Address 0x........ is 16 bytes after a block of size 16 in arena "client"
+
+Syscall param rt_sigaction(act->sa_flags) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:795)
+ Address 0x........ is 16 bytes after a block of size 8 alloc'd
+   at 0x........: malloc (vg_replace_malloc.c:...)
+   by 0x........: main (scalar.c:30)
+
+Syscall param rt_sigaction(oldact) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:795)
+ Address 0x........ is 8 bytes after a block of size 8 alloc'd
+   at 0x........: malloc (vg_replace_malloc.c:...)
+   by 0x........: main (scalar.c:30)
+
+-----------------------------------------------------
+135: __NR_rt_sigprocmask 4s 2m
+-----------------------------------------------------
+Syscall param rt_sigprocmask(how) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:799)
+
+Syscall param rt_sigprocmask(set) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:799)
+
+Syscall param rt_sigprocmask(oldset) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:799)
+
+Syscall param rt_sigprocmask(sigsetsize) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:799)
+
+Syscall param rt_sigprocmask(set) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:799)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param rt_sigprocmask(oldset) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:799)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+136:  __NR_rt_sigpending 2s 1m
+-----------------------------------------------------
+Syscall param rt_sigpending(set) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:803)
+
+Syscall param rt_sigpending(sigsetsize) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:803)
+
+Syscall param rt_sigpending(set) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:803)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+137:__NR_rt_sigtimedwait 4s 3m
+-----------------------------------------------------
+Syscall param rt_sigtimedwait(set) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:807)
+
+Syscall param rt_sigtimedwait(info) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:807)
+
+Syscall param rt_sigtimedwait(timeout) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:807)
+
+Syscall param rt_sigtimedwait(sigsetsize) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:807)
+
+Syscall param rt_sigtimedwait(set) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:807)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param rt_sigtimedwait(info) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:807)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param rt_sigtimedwait(timeout) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:807)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+138:__NR_rt_sigqueueinfo 3s 1m
+-----------------------------------------------------
+Syscall param rt_sigqueueinfo(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:811)
+
+Syscall param rt_sigqueueinfo(sig) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:811)
+
+Syscall param rt_sigqueueinfo(uinfo) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:811)
+
+Syscall param rt_sigqueueinfo(uinfo) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:811)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+133:  __NR_rt_sigsuspend 2s 1m
+-----------------------------------------------------
+Syscall param rt_sigsuspend(mask) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:815)
+
+Syscall param rt_sigsuspend(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:815)
+
+Syscall param rt_sigsuspend(mask) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:815)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 67:        __NR_pread64 5s 1m
+-----------------------------------------------------
+Syscall param pread64(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:819)
+
+Syscall param pread64(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:819)
+
+Syscall param pread64(count) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:819)
+
+Syscall param pread64(offset) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:819)
+
+Syscall param pread64(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:819)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 68:       __NR_pwrite64 5s 1m
+-----------------------------------------------------
+Syscall param pwrite64(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:823)
+
+Syscall param pwrite64(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:823)
+
+Syscall param pwrite64(count) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:823)
+
+Syscall param pwrite64(offset) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:823)
+
+Syscall param pwrite64(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:823)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 17:         __NR_getcwd 2s 1m
+-----------------------------------------------------
+Syscall param getcwd(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:831)
+
+Syscall param getcwd(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:831)
+
+Syscall param getcwd(buf) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:831)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 90:         __NR_capget 2s 2m
+-----------------------------------------------------
+Syscall param capget(header) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:835)
+
+Syscall param capget(data) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:835)
+
+Syscall param capget(header) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:835)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param capget(data) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:835)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 91:         __NR_capset 2s 2m
+-----------------------------------------------------
+Syscall param capset(header) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:839)
+
+Syscall param capset(data) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:839)
+
+Syscall param capset(header) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:839)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param capset(data) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:839)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+132:    __NR_sigaltstack 2s 2m
+-----------------------------------------------------
+Syscall param sigaltstack(ss) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:853)
+
+Syscall param sigaltstack(oss) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:853)
+
+Syscall param sigaltstack(ss) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:853)
+ Address 0x........ is on thread 1's stack
+ in frame #1, created by main (scalar.c:28)
+
+Syscall param sigaltstack(oss) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:853)
+ Address 0x........ is on thread 1's stack
+ in frame #1, created by main (scalar.c:28)
+
+-----------------------------------------------------
+ 71:       __NR_sendfile 4s 1m
+-----------------------------------------------------
+Syscall param sendfile(out_fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:858)
+
+Syscall param sendfile(in_fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:858)
+
+Syscall param sendfile(offset) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:858)
+
+Syscall param sendfile(count) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:858)
+
+Syscall param sendfile(offset) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:858)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 41:     __NR_pivot_root n/a
+-----------------------------------------------------
+-----------------------------------------------------
+232:        __NR_mincore 3s 1m
+-----------------------------------------------------
+Syscall param mincore(start) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:986)
+
+Syscall param mincore(length) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:986)
+
+Syscall param mincore(vec) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:986)
+
+Syscall param mincore(vec) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:986)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+233:        __NR_madvise 3s 0m
+-----------------------------------------------------
+Syscall param madvise(start) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:990)
+
+Syscall param madvise(length) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:990)
+
+Syscall param madvise(advice) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:990)
+
+-----------------------------------------------------
+ 61:     __NR_getdents64 3s 1m
+-----------------------------------------------------
+Syscall param getdents64(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:994)
+
+Syscall param getdents64(dirp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:994)
+
+Syscall param getdents64(count) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:994)
+
+Syscall param getdents64(dirp) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:994)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+222:                 222 ni
+-----------------------------------------------------
+-----------------------------------------------------
+223:                 223 ni
+-----------------------------------------------------
+-----------------------------------------------------
+178:         __NR_gettid n/a
+-----------------------------------------------------
+-----------------------------------------------------
+213:      __NR_readahead n/a
+-----------------------------------------------------
+-----------------------------------------------------
+  5:       __NR_setxattr 5s 3m
+-----------------------------------------------------
+Syscall param setxattr(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1031)
+
+Syscall param setxattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1031)
+
+Syscall param setxattr(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1031)
+
+Syscall param setxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1031)
+
+Syscall param setxattr(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1031)
+
+Syscall param setxattr(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1031)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param setxattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1031)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param setxattr(value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1031)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+  6:      __NR_lsetxattr 5s 3m
+-----------------------------------------------------
+Syscall param lsetxattr(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1035)
+
+Syscall param lsetxattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1035)
+
+Syscall param lsetxattr(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1035)
+
+Syscall param lsetxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1035)
+
+Syscall param lsetxattr(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1035)
+
+Syscall param lsetxattr(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1035)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param lsetxattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1035)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param lsetxattr(value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1035)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+  7:      __NR_fsetxattr 5s 2m
+-----------------------------------------------------
+Syscall param fsetxattr(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1039)
+
+Syscall param fsetxattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1039)
+
+Syscall param fsetxattr(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1039)
+
+Syscall param fsetxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1039)
+
+Syscall param fsetxattr(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1039)
+
+Syscall param fsetxattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1039)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param fsetxattr(value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1039)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+  8:       __NR_getxattr 4s 3m
+-----------------------------------------------------
+Syscall param getxattr(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1043)
+
+Syscall param getxattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1043)
+
+Syscall param getxattr(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1043)
+
+Syscall param getxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1043)
+
+Syscall param getxattr(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1043)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param getxattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1043)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param getxattr(value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1043)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+  9:      __NR_lgetxattr 4s 3m
+-----------------------------------------------------
+Syscall param lgetxattr(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1047)
+
+Syscall param lgetxattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1047)
+
+Syscall param lgetxattr(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1047)
+
+Syscall param lgetxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1047)
+
+Syscall param lgetxattr(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1047)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param lgetxattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1047)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param lgetxattr(value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1047)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 10:      __NR_fgetxattr 4s 2m
+-----------------------------------------------------
+Syscall param fgetxattr(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1051)
+
+Syscall param fgetxattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1051)
+
+Syscall param fgetxattr(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1051)
+
+Syscall param fgetxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1051)
+
+Syscall param fgetxattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1051)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param fgetxattr(value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1051)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 11:      __NR_listxattr 3s 2m
+-----------------------------------------------------
+Syscall param listxattr(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1055)
+
+Syscall param listxattr(list) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1055)
+
+Syscall param listxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1055)
+
+Syscall param listxattr(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1055)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param listxattr(list) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1055)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 12:     __NR_llistxattr 3s 2m
+-----------------------------------------------------
+Syscall param llistxattr(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1059)
+
+Syscall param llistxattr(list) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1059)
+
+Syscall param llistxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1059)
+
+Syscall param llistxattr(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1059)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param llistxattr(list) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1059)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 13:     __NR_flistxattr 3s 1m
+-----------------------------------------------------
+Syscall param flistxattr(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1063)
+
+Syscall param flistxattr(list) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1063)
+
+Syscall param flistxattr(size) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1063)
+
+Syscall param flistxattr(list) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1063)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 14:    __NR_removexattr 2s 2m
+-----------------------------------------------------
+Syscall param removexattr(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1067)
+
+Syscall param removexattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1067)
+
+Syscall param removexattr(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1067)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param removexattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1067)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 15:   __NR_lremovexattr 2s 2m
+-----------------------------------------------------
+Syscall param lremovexattr(path) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1071)
+
+Syscall param lremovexattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1071)
+
+Syscall param lremovexattr(path) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1071)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param lremovexattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1071)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 16:   __NR_fremovexattr 2s 1m
+-----------------------------------------------------
+Syscall param fremovexattr(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1075)
+
+Syscall param fremovexattr(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1075)
+
+Syscall param fremovexattr(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1075)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+130:          __NR_tkill n/a
+-----------------------------------------------------
+-----------------------------------------------------
+ 98:          __NR_futex 4s 2m
+-----------------------------------------------------
+Syscall param futex(futex) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1091)
+
+Syscall param futex(op) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1091)
+
+Syscall param futex(val) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1091)
+
+Syscall param futex(utime) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1091)
+
+Syscall param futex(futex) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1091)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param futex(timeout) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1091)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+122:__NR_sched_setaffinity 3s 1m
+-----------------------------------------------------
+Syscall param sched_setaffinity(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1095)
+
+Syscall param sched_setaffinity(len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1095)
+
+Syscall param sched_setaffinity(mask) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1095)
+
+Syscall param sched_setaffinity(mask) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1095)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+123:__NR_sched_getaffinity 3s 1m
+-----------------------------------------------------
+Syscall param sched_getaffinity(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1099)
+
+Syscall param sched_getaffinity(len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1099)
+
+Syscall param sched_getaffinity(mask) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1099)
+
+Syscall param sched_getaffinity(mask) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1099)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+  0:       __NR_io_setup 2s 1m
+-----------------------------------------------------
+Syscall param io_setup(nr_events) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1111)
+
+Syscall param io_setup(ctxp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1111)
+
+Syscall param io_setup(ctxp) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1111)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+  1:     __NR_io_destroy 1s 0m
+-----------------------------------------------------
+Syscall param io_destroy(ctx) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1124)
+
+-----------------------------------------------------
+  4:   __NR_io_getevents 5s 2m
+-----------------------------------------------------
+Syscall param io_getevents(ctx_id) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1129)
+
+Syscall param io_getevents(min_nr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1129)
+
+Syscall param io_getevents(nr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1129)
+
+Syscall param io_getevents(events) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1129)
+
+Syscall param io_getevents(timeout) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1129)
+
+Syscall param io_getevents(events) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1129)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param io_getevents(timeout) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1129)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+  2:      __NR_io_submit 3s 1m
+-----------------------------------------------------
+Syscall param io_submit(ctx_id) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1133)
+
+Syscall param io_submit(nr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1133)
+
+Syscall param io_submit(iocbpp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1133)
+
+Syscall param io_submit(iocbpp) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1133)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+  3:      __NR_io_cancel 3s 2m
+-----------------------------------------------------
+Syscall param io_cancel(ctx_id) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1137)
+
+Syscall param io_cancel(iocb) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1137)
+
+Syscall param io_cancel(result) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1137)
+
+Syscall param io_cancel(iocb) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1137)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param io_cancel(result) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1137)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+223:      __NR_fadvise64 n/a
+-----------------------------------------------------
+-----------------------------------------------------
+251:                 251 ni
+-----------------------------------------------------
+WARNING: unhandled loongarch64-linux syscall: 251
+You may be able to write your own handler.
+Read the file README_MISSING_SYSCALL_OR_IOCTL.
+Nevertheless we consider this a bug.  Please report
+it at http://valgrind.org/support/bug_reports.html.
+-----------------------------------------------------
+ 94:     __NR_exit_group other
+-----------------------------------------------------
+-----------------------------------------------------
+ 18: __NR_lookup_dcookie 4s 1m
+-----------------------------------------------------
+Syscall param lookup_dcookie(cookie) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1153)
+
+Syscall param lookup_dcookie(buf) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1153)
+
+Syscall param lookup_dcookie(len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1153)
+
+-----------------------------------------------------
+ 21:      __NR_epoll_ctl 4s 1m
+-----------------------------------------------------
+Syscall param epoll_ctl(epfd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1161)
+
+Syscall param epoll_ctl(op) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1161)
+
+Syscall param epoll_ctl(fd) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1161)
+
+Syscall param epoll_ctl(event) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1161)
+
+Syscall param epoll_ctl(event) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1161)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+234:__NR_remap_file_pages n/a
+-----------------------------------------------------
+-----------------------------------------------------
+ 96:__NR_set_tid_address 1s 0m
+-----------------------------------------------------
+Syscall param set_tid_address(tidptr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1173)
+
+-----------------------------------------------------
+107:   __NR_timer_create 3s 2m
+-----------------------------------------------------
+Syscall param timer_create(clockid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1177)
+
+Syscall param timer_create(evp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1177)
+
+Syscall param timer_create(timerid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1177)
+
+Syscall param timer_create(evp.sigev_value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1177)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param timer_create(evp.sigev_signo) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1177)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param timer_create(evp.sigev_notify) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1177)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param timer_create(timerid) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1177)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+110:  __NR_timer_settime 4s 2m
+-----------------------------------------------------
+Syscall param timer_settime(timerid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1181)
+
+Syscall param timer_settime(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1181)
+
+Syscall param timer_settime(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1181)
+
+Syscall param timer_settime(ovalue) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1181)
+
+Syscall param timer_settime(value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1181)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param timer_settime(ovalue) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1181)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+108:  __NR_timer_gettime 2s 1m
+-----------------------------------------------------
+Syscall param timer_gettime(timerid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1185)
+
+Syscall param timer_gettime(value) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1185)
+
+Syscall param timer_gettime(value) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1185)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+109:__NR_timer_getoverrun 1s 0m
+-----------------------------------------------------
+Syscall param timer_getoverrun(timerid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1189)
+
+-----------------------------------------------------
+111:   __NR_timer_delete 1s 0m
+-----------------------------------------------------
+Syscall param timer_delete(timerid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1193)
+
+-----------------------------------------------------
+112:  __NR_clock_settime 2s 1m
+-----------------------------------------------------
+Syscall param clock_settime(clk_id) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1197)
+
+Syscall param clock_settime(tp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1197)
+
+Syscall param clock_settime(tp) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1197)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+113:  __NR_clock_gettime 2s 1m
+-----------------------------------------------------
+Syscall param clock_gettime(clk_id) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1201)
+
+Syscall param clock_gettime(tp) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1201)
+
+Syscall param clock_gettime(tp) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1201)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+114:   __NR_clock_getres 2s 1m
+-----------------------------------------------------
+Syscall param clock_getres(clk_id) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1205)
+
+Syscall param clock_getres(res) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1205)
+
+Syscall param clock_getres(res) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1205)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+115:__NR_clock_nanosleep n/a
+-----------------------------------------------------
+-----------------------------------------------------
+131:         __NR_tgkill n/a
+-----------------------------------------------------
+-----------------------------------------------------
+235:          __NR_mbind n/a
+-----------------------------------------------------
+-----------------------------------------------------
+236:  __NR_get_mempolicy n/a
+-----------------------------------------------------
+-----------------------------------------------------
+237:  __NR_set_mempolicy n/a
+-----------------------------------------------------
+-----------------------------------------------------
+180:        __NR_mq_open 4s 3m
+-----------------------------------------------------
+Syscall param mq_open(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1249)
+
+Syscall param mq_open(oflag) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1249)
+
+Syscall param mq_open(mode) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1249)
+
+Syscall param mq_open(attr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1249)
+
+Syscall param mq_open(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1249)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param mq_open(attr->mq_maxmsg) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1249)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param mq_open(attr->mq_msgsize) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1249)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+181:      __NR_mq_unlink 1s 1m
+-----------------------------------------------------
+Syscall param mq_unlink(name) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1253)
+
+Syscall param mq_unlink(name) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1253)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+182:   __NR_mq_timedsend 5s 2m
+-----------------------------------------------------
+Syscall param mq_timedsend(mqdes) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1257)
+
+Syscall param mq_timedsend(msg_ptr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1257)
+
+Syscall param mq_timedsend(msg_len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1257)
+
+Syscall param mq_timedsend(msg_prio) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1257)
+
+Syscall param mq_timedsend(abs_timeout) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1257)
+
+Syscall param mq_timedsend(msg_ptr) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1257)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param mq_timedsend(abs_timeout) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1257)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+183:__NR_mq_timedreceive 5s 3m
+-----------------------------------------------------
+Syscall param mq_timedreceive(mqdes) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1261)
+
+Syscall param mq_timedreceive(msg_ptr) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1261)
+
+Syscall param mq_timedreceive(msg_len) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1261)
+
+Syscall param mq_timedreceive(msg_prio) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1261)
+
+Syscall param mq_timedreceive(abs_timeout) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1261)
+
+Syscall param mq_timedreceive(msg_ptr) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1261)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param mq_timedreceive(msg_prio) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1261)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param mq_timedreceive(abs_timeout) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1261)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+184:      __NR_mq_notify 2s 1m
+-----------------------------------------------------
+Syscall param mq_notify(mqdes) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1265)
+
+Syscall param mq_notify(notification) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1265)
+
+Syscall param mq_notify(notification) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1265)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+185:  __NR_mq_getsetattr 3s 2m
+-----------------------------------------------------
+Syscall param mq_getsetattr(mqdes) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1269)
+
+Syscall param mq_getsetattr(mqstat) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1269)
+
+Syscall param mq_getsetattr(omqstat) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1269)
+
+Syscall param mq_getsetattr(mqstat->mq_flags) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1269)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param mq_getsetattr(omqstat) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1269)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+ 20:  __NR_epoll_create1 1s 0m
+-----------------------------------------------------
+Syscall param epoll_create1(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1277)
+
+-----------------------------------------------------
+270:__NR_process_vm_readv 6s 2m
+-----------------------------------------------------
+Syscall param process_vm_readv(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1281)
+
+Syscall param process_vm_readv(lvec) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1281)
+
+Syscall param process_vm_readv(liovcnt) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1281)
+
+Syscall param process_vm_readv(rvec) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1281)
+
+Syscall param process_vm_readv(riovcnt) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1281)
+
+Syscall param process_vm_readv(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1281)
+
+Syscall param process_vm_readv(lvec) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1281)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param process_vm_readv(rvec) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1281)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+271:__NR_process_vm_writev 6s 2m
+-----------------------------------------------------
+Syscall param process_vm_writev(pid) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1285)
+
+Syscall param process_vm_writev(lvec) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1285)
+
+Syscall param process_vm_writev(liovcnt) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1285)
+
+Syscall param process_vm_writev(rvec) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1285)
+
+Syscall param process_vm_writev(riovcnt) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1285)
+
+Syscall param process_vm_writev(flags) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1285)
+
+Syscall param process_vm_writev(lvec) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1285)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+Syscall param process_vm_writev(rvec) points to unaddressable byte(s)
+   ...
+   by 0x........: main (scalar.c:1285)
+ Address 0x........ is not stack'd, malloc'd or (recently) free'd
+
+-----------------------------------------------------
+9999:                9999 1e
+-----------------------------------------------------
+WARNING: unhandled loongarch64-linux syscall: 9999
+You may be able to write your own handler.
+Read the file README_MISSING_SYSCALL_OR_IOCTL.
+Nevertheless we consider this a bug.  Please report
+it at http://valgrind.org/support/bug_reports.html.
+-----------------------------------------------------
+ 93:           __NR_exit 1s 0m
+-----------------------------------------------------
+Syscall param exit(status) contains uninitialised byte(s)
+   ...
+   by 0x........: main (scalar.c:1293)
+
-- 
2.39.1


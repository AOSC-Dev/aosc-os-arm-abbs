From d3e122831827ffe4c2b4df0ba0294a329af4e853 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Mon, 8 Aug 2022 09:31:13 +0800
Subject: [PATCH v4 011/123] loongarch64: Add support to decode fixed point
 load/store insns

---
 VEX/priv/guest_loongarch64_toIR.c | 603 +++++++++++++++++++++++++++---
 1 file changed, 557 insertions(+), 46 deletions(-)

diff --git a/VEX/priv/guest_loongarch64_toIR.c b/VEX/priv/guest_loongarch64_toIR.c
index 576cfef7f..4a7ec0b3b 100644
--- a/VEX/priv/guest_loongarch64_toIR.c
+++ b/VEX/priv/guest_loongarch64_toIR.c
@@ -414,6 +414,12 @@ static inline void gen_SIGSYS ( IRExpr* cond )
    exit(cond, Ijk_SigSYS, 4);
 }
 
+/* Generate a SIGBUS if the expression evaluates to true. */
+static inline void gen_SIGBUS ( IRExpr* cond )
+{
+   exit(cond, Ijk_SigBUS, 4);
+}
+
 static inline void cas ( IRTemp old, IRExpr* addr, IRExpr* expd, IRExpr* new )
 {
    IRCAS* c = mkIRCAS(IRTemp_INVALID, old, Iend_LE, addr,
@@ -2098,322 +2104,827 @@ static Bool gen_ld_b ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ld.b %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                            (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   putIReg(rd, extendS(Ity_I8, load(Ity_I8, addr)));
+
+   return True;
 }
 
 static Bool gen_ld_h ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ld.h %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                            (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x1)));
+   putIReg(rd, extendS(Ity_I16, load(Ity_I16, addr)));
+
+   return True;
 }
 
 static Bool gen_ld_w ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ld.w %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                            (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   putIReg(rd, extendS(Ity_I32, load(Ity_I32, addr)));
+
+   return True;
 }
 
 static Bool gen_ld_d ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ld.d %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                            (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   putIReg(rd, load(Ity_I64, addr));
+
+   return True;
 }
 
 static Bool gen_st_b ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("st.b %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                            (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   store(addr, getIReg8(rd));
+
+   return True;
 }
 
 static Bool gen_st_h ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("st.h %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                            (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x1)));
+   store(addr, getIReg16(rd));
+
+   return True;
 }
 
 static Bool gen_st_w ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("st.w %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                            (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   store(addr, getIReg32(rd));
+
+   return True;
 }
 
 static Bool gen_st_d ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("st.d %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                            (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   store(addr, getIReg64(rd));
+
+   return True;
 }
 
 static Bool gen_ld_bu ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ld.bu %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                             (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   putIReg(rd, extendU(Ity_I8, load(Ity_I8, addr)));
+
+   return True;
 }
 
 static Bool gen_ld_hu ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ld.hu %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                             (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x1)));
+   putIReg(rd, extendU(Ity_I16, load(Ity_I16, addr)));
+
+   return True;
 }
 
 static Bool gen_ld_wu ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ld.wu %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                             (Int)extend32(si12, 12));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), mkU64(extend64(si12, 12)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   putIReg(rd, extendU(Ity_I32, load(Ity_I32, addr)));
+
+   return True;
 }
 
 static Bool gen_ldx_b ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldx.b %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, extendS(Ity_I8, load(Ity_I8, addr)));
+
+   return True;
 }
 
 static Bool gen_ldx_h ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldx.h %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x1)));
+   putIReg(rd, extendS(Ity_I16, load(Ity_I16, addr)));
+
+   return True;
 }
 
 static Bool gen_ldx_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldx.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   putIReg(rd, extendS(Ity_I32, load(Ity_I32, addr)));
+
+   return True;
 }
 
 static Bool gen_ldx_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldx.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   putIReg(rd, load(Ity_I64, addr));
+
+   return True;
 }
 
 static Bool gen_stx_b ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stx.b %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   store(addr, getIReg8(rd));
+
+   return True;
 }
 
 static Bool gen_stx_h ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stx.h %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x1)));
+   store(addr, getIReg16(rd));
+
+   return True;
 }
 
 static Bool gen_stx_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stx.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   store(addr, getIReg32(rd));
+
+   return True;
 }
 
 static Bool gen_stx_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stx.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   store(addr, getIReg64(rd));
+
+   return True;
 }
 
 static Bool gen_ldx_bu ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldx.bu %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, extendU(Ity_I8, load(Ity_I8, addr)));
+
+   return True;
 }
 
 static Bool gen_ldx_hu ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldx.hu %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x1)));
+   putIReg(rd, extendU(Ity_I16, load(Ity_I16, addr)));
+
+   return True;
 }
 
 static Bool gen_ldx_wu ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldx.wu %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj), getIReg64(rk));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   putIReg(rd, extendU(Ity_I32, load(Ity_I32, addr)));
+
+   return True;
 }
 
 static Bool gen_preld ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt rj   = get_rj(insn);
+   UInt hint = get_hint5(insn);
+
+   DIP("preld %u, %s, %d\n", hint, nameIReg(rj), (Int)extend32(si12, 12));
+
+   return True;
 }
 
 static Bool gen_preldx ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt rj   = get_rj(insn);
+   UInt hint = get_hint5(insn);
+
+   DIP("preldx %u, %s, %d\n", hint, nameIReg(rj), (Int)extend32(si12, 12));
+
+   return True;
 }
 
 static Bool gen_dbar ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt hint = get_hint15(insn);
+
+   DIP("dbar %u\n", hint);
+
+   stmt(IRStmt_MBE(Imbe_Fence));
+
+   return True;
 }
 
 static Bool gen_ibar ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt hint = get_hint15(insn);
+
+   DIP("ibar %u\n", hint);
+
+   stmt(IRStmt_MBE(Imbe_InsnFence));
+
+   return True;
 }
 
 static Bool gen_ldptr_w ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si14 = get_si14(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ldptr.w %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                               (Int)extend32(si14, 14));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj),
+                        mkU64(extend64(si14 << 2, 16)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   putIReg(rd, extendS(Ity_I32, load(Ity_I32, addr)));
+
+   return True;
 }
 
 static Bool gen_stptr_w ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si14 = get_si14(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("stptr.w %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                               (Int)extend32(si14, 14));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj),
+                        mkU64(extend64(si14 << 2, 16)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x3)));
+   store(addr, getIReg32(rd));
+
+   return True;
 }
 
 static Bool gen_ldptr_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si14 = get_si14(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ldptr.d %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                               (Int)extend32(si14, 14));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj),
+                        mkU64(extend64(si14 << 2, 16)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   putIReg(rd, load(Ity_I64, addr));
+
+   return True;
 }
 
 static Bool gen_stptr_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si14 = get_si14(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("stptr.d %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                               (Int)extend32(si14, 14));
+
+   IRExpr* addr = binop(Iop_Add64, getIReg64(rj),
+                        mkU64(extend64(si14 << 2, 16)));
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_UAL))
+      gen_SIGBUS(check_align(addr, mkU64(0x7)));
+   store(addr, getIReg64(rd));
+
+   return True;
 }
 
 static Bool gen_ldgt_b ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldgt.b %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   putIReg(rd, extendS(Ity_I8, load(Ity_I8, mkexpr(addr))));
+
+   return True;
 }
 
 static Bool gen_ldgt_h ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldgt.h %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x1)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   putIReg(rd, extendS(Ity_I16, load(Ity_I16, mkexpr(addr))));
+
+   return True;
 }
 
 static Bool gen_ldgt_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldgt.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x3)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   putIReg(rd, extendS(Ity_I32, load(Ity_I32, mkexpr(addr))));
+
+   return True;
 }
 
 static Bool gen_ldgt_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldgt.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x7)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   putIReg(rd, load(Ity_I64, mkexpr(addr)));
+
+   return True;
 }
 
 static Bool gen_ldle_b ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldle.b %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   putIReg(rd, extendS(Ity_I8, load(Ity_I8, mkexpr(addr))));
+
+   return True;
 }
 
 static Bool gen_ldle_h ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldle.h %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x1)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   putIReg(rd, extendS(Ity_I16, load(Ity_I16, mkexpr(addr))));
+
+   return True;
 }
 
 static Bool gen_ldle_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldle.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x3)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   putIReg(rd, extendS(Ity_I32, load(Ity_I32, mkexpr(addr))));
+
+   return True;
 }
 
 static Bool gen_ldle_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ldle.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x7)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   putIReg(rd, load(Ity_I64, mkexpr(addr)));
+
+   return True;
 }
 
 static Bool gen_stgt_b ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stgt.b %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   store(mkexpr(addr), getIReg8(rd));
+
+   return True;
 }
 
 static Bool gen_stgt_h ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stgt.h %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x1)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   store(mkexpr(addr), getIReg16(rd));
+
+   return True;
 }
 
 static Bool gen_stgt_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stgt.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x3)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   store(mkexpr(addr), getIReg32(rd));
+
+   return True;
 }
 
 static Bool gen_stgt_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stgt.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x7)));
+   gen_SIGSYS(binop(Iop_CmpLE64U, mkexpr(addr), getIReg64(rk)));
+   store(mkexpr(addr), getIReg64(rd));
+
+   return True;
 }
 
 static Bool gen_stle_b ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stle.b %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   store(mkexpr(addr), getIReg8(rd));
+
+   return True;
 }
 
 static Bool gen_stle_h ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stle.h %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x1)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   store(mkexpr(addr), getIReg16(rd));
+
+   return True;
 }
 
 static Bool gen_stle_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stle.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x3)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   store(mkexpr(addr), getIReg32(rd));
+
+   return True;
 }
 
 static Bool gen_stle_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("stle.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRTemp addr = newTemp(Ity_I64);
+   assign(addr, getIReg64(rj));
+   gen_SIGBUS(check_align(mkexpr(addr), mkU64(0x7)));
+   gen_SIGSYS(binop(Iop_CmpLT64U, getIReg64(rk), mkexpr(addr)));
+   store(mkexpr(addr), getIReg64(rd));
+
+   return True;
 }
 
 
-- 
2.39.1


From 0bdd5fcb502691bc15bd2be4784deeba853138bb Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Mon, 8 Aug 2022 16:58:30 +0800
Subject: [PATCH v4 066/123] loongarch64: Add isel support for Iex_Binop of
 integer expressions (128 bit)

---
 VEX/priv/host_loongarch64_isel.c | 49 ++++++++++++++++++++++++++++++++
 1 file changed, 49 insertions(+)

diff --git a/VEX/priv/host_loongarch64_isel.c b/VEX/priv/host_loongarch64_isel.c
index 9e5b95e4a..128a01cfb 100644
--- a/VEX/priv/host_loongarch64_isel.c
+++ b/VEX/priv/host_loongarch64_isel.c
@@ -1477,6 +1477,55 @@ static void iselInt128Expr_wrk (HReg* hi, HReg* lo, ISelEnv* env, IRExpr* e)
    /* --------- BINARY OP --------- */
    if (e->tag == Iex_Binop) {
       switch (e->Iex.Binop.op) {
+         case Iop_64HLto128: {
+            *hi = iselIntExpr_R(env, e->Iex.Binop.arg1);
+            *lo = iselIntExpr_R(env, e->Iex.Binop.arg2);
+            return;
+         }
+         case Iop_DivModS64to64: {
+            HReg           src1 = iselIntExpr_R(env, e->Iex.Binop.arg1);
+            LOONGARCH64RI* src2 = iselIntExpr_RI(env, e->Iex.Binop.arg2, 0, False);
+            HReg          dstLo = newVRegI(env);
+            HReg          dstHi = newVRegI(env);
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_DIV_D, src2, src1, dstLo));
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_MOD_D, src2, src1, dstHi));
+            *hi = dstHi;
+            *lo = dstLo;
+            return;
+         }
+         case Iop_DivModU64to64: {
+            HReg           src1 = iselIntExpr_R(env, e->Iex.Binop.arg1);
+            LOONGARCH64RI* src2 = iselIntExpr_RI(env, e->Iex.Binop.arg2, 0, False);
+            HReg          dstLo = newVRegI(env);
+            HReg          dstHi = newVRegI(env);
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_DIV_DU, src2, src1, dstLo));
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_MOD_DU, src2, src1, dstHi));
+            *hi = dstHi;
+            *lo = dstLo;
+            return;
+         }
+         case Iop_MullS64: {
+            HReg           src1 = iselIntExpr_R(env, e->Iex.Binop.arg1);
+            LOONGARCH64RI* src2 = iselIntExpr_RI(env, e->Iex.Binop.arg2, 0, False);
+            HReg          dstLo = newVRegI(env);
+            HReg          dstHi = newVRegI(env);
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_MUL_D, src2, src1, dstLo));
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_MULH_D, src2, src1, dstHi));
+            *hi = dstHi;
+            *lo = dstLo;
+            return;
+         }
+         case Iop_MullU64: {
+            HReg           src1 = iselIntExpr_R(env, e->Iex.Binop.arg1);
+            LOONGARCH64RI* src2 = iselIntExpr_RI(env, e->Iex.Binop.arg2, 0, False);
+            HReg          dstLo = newVRegI(env);
+            HReg          dstHi = newVRegI(env);
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_MUL_D, src2, src1, dstLo));
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_MULH_DU, src2, src1, dstHi));
+            *hi = dstHi;
+            *lo = dstLo;
+            return;
+         }
          default:
             goto irreducible;
       }
-- 
2.39.1


From 2fedd4e7753676bc981057f7cfff8a1e8a080240 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Sat, 6 Aug 2022 16:06:19 +0800
Subject: [PATCH v4 006/123] loongarch64: Add decode infrastructure

---
 VEX/priv/guest_loongarch64_toIR.c | 4149 ++++++++++++++++++++++++++++-
 1 file changed, 4113 insertions(+), 36 deletions(-)

diff --git a/VEX/priv/guest_loongarch64_toIR.c b/VEX/priv/guest_loongarch64_toIR.c
index ff41d13f4..41abd0c46 100644
--- a/VEX/priv/guest_loongarch64_toIR.c
+++ b/VEX/priv/guest_loongarch64_toIR.c
@@ -136,6 +136,180 @@ static inline UInt getUInt ( const UChar* p )
    return w;
 }
 
+/* Sign extend to 32-bit */
+static inline UInt extend32 ( UInt imm, UInt size )
+{
+   UInt shift = 32 - size;
+   return (UInt)(((Int)imm << shift) >> shift);
+}
+
+/* Sign extend to 64-bit */
+static inline ULong extend64 ( ULong imm, UInt size )
+{
+   UInt shift = 64 - size;
+   return (ULong)(((Long)imm << shift) >> shift);
+}
+
+static inline UInt get_rd ( UInt insn )
+{
+   return SLICE(insn, 4, 0);
+}
+
+static inline UInt get_rj ( UInt insn )
+{
+   return SLICE(insn, 9, 5);
+}
+
+static inline UInt get_rk ( UInt insn )
+{
+   return SLICE(insn, 14, 10);
+}
+
+static inline UInt get_code ( UInt insn )
+{
+   return SLICE(insn, 14, 0);
+}
+
+static inline UInt get_ui5 ( UInt insn )
+{
+   return SLICE(insn, 14, 10);
+}
+
+static inline UInt get_ui6 ( UInt insn )
+{
+   return SLICE(insn, 15, 10);
+}
+
+static inline UInt get_sa2 ( UInt insn )
+{
+   return SLICE(insn, 16, 15);
+}
+
+static inline UInt get_sa3 ( UInt insn )
+{
+   return SLICE(insn, 17, 15);
+}
+
+static inline UInt get_lsbw ( UInt insn )
+{
+   return SLICE(insn, 14, 10);
+}
+
+static inline UInt get_msbw ( UInt insn )
+{
+   return SLICE(insn, 20, 16);
+}
+
+static inline UInt get_lsbd ( UInt insn )
+{
+   return SLICE(insn, 15, 10);
+}
+
+static inline UInt get_msbd ( UInt insn )
+{
+   return SLICE(insn, 21, 16);
+}
+
+static inline UInt get_si12 ( UInt insn )
+{
+   return SLICE(insn, 21, 10);
+}
+
+static inline UInt get_ui12 ( UInt insn )
+{
+   return SLICE(insn, 21, 10);
+}
+
+static inline UInt get_si14 ( UInt insn )
+{
+   return SLICE(insn, 23, 10);
+}
+
+static inline UInt get_si16 ( UInt insn )
+{
+   return SLICE(insn, 25, 10);
+}
+
+static inline UInt get_si20 ( UInt insn )
+{
+   return SLICE(insn, 24, 5);
+}
+
+static inline UInt get_hint5 ( UInt insn )
+{
+   return SLICE(insn, 4, 0);
+}
+
+static inline UInt get_hint15 ( UInt insn )
+{
+   return SLICE(insn, 14, 0);
+}
+
+static inline UInt get_offs16 ( UInt insn )
+{
+   return SLICE(insn, 25, 10);
+}
+
+static inline UInt get_offs21 ( UInt insn )
+{
+   return (SLICE(insn, 4, 0) << 16) | SLICE(insn, 25, 10);
+}
+
+static inline UInt get_offs26 ( UInt insn )
+{
+   return (SLICE(insn, 9, 0) << 16) | SLICE(insn, 25, 10);
+}
+
+static inline UInt get_fd ( UInt insn )
+{
+   return SLICE(insn, 4, 0);
+}
+
+static inline UInt get_fj ( UInt insn )
+{
+   return SLICE(insn, 9, 5);
+}
+
+static inline UInt get_fk ( UInt insn )
+{
+   return SLICE(insn, 14, 10);
+}
+
+static inline UInt get_fa ( UInt insn )
+{
+   return SLICE(insn, 19, 15);
+}
+
+static inline UInt get_cond ( UInt insn )
+{
+   return SLICE(insn, 19, 15);
+}
+
+static inline UInt get_fcsrl ( UInt insn )
+{
+   return SLICE(insn, 4, 0);
+}
+
+static inline UInt get_fcsrh ( UInt insn )
+{
+   return SLICE(insn, 9, 5);
+}
+
+static inline UInt get_cd ( UInt insn )
+{
+   return SLICE(insn, 2, 0);
+}
+
+static inline UInt get_cj ( UInt insn )
+{
+   return SLICE(insn, 7, 5);
+}
+
+static inline UInt get_ca ( UInt insn )
+{
+   return SLICE(insn, 17, 15);
+}
+
 
 /*------------------------------------------------------------*/
 /*--- Helper bits and pieces for creating IR fragments.    ---*/
@@ -151,12 +325,6 @@ static inline IRExpr* mkU32 ( UInt i )
    return IRExpr_Const(IRConst_U32(i));
 }
 
-static inline IRExpr* mkU16 ( UInt i )
-{
-   vassert(i < 65536);
-   return IRExpr_Const(IRConst_U16(i));
-}
-
 static inline IRExpr* mkU8 ( UInt i )
 {
    vassert(i < 256);
@@ -365,47 +533,3956 @@ static void putPC ( IRExpr* e )
 
 
 /*------------------------------------------------------------*/
-/*--- Disassemble a single LOONGARCH64 instruction         ---*/
+/*--- Helpers for fixed point arithmetic insns             ---*/
 /*------------------------------------------------------------*/
 
-/* Disassemble a single LOONGARCH64 instruction into IR.  The instruction
-   has is located at |guest_instr| and has guest IP of |guest_PC_curr_instr|,
-   which will have been set before the call here.  Returns True iff the
-   instruction was decoded, in which case *dres will be set accordingly,
-   or False, in which case *dres should be ignored by the caller. */
+static Bool gen_add_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
 
-static Bool disInstr_LOONGARCH64_WRK_special ( DisResult* dres,
-                                               const UChar* guest_instr )
+static Bool gen_add_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
 {
    return False;
 }
 
-static Bool disInstr_LOONGARCH64_WRK ( /*MB_OUT*/DisResult* dres,
-                                       const UChar* guest_instr,
-                                       const VexArchInfo* archinfo,
-                                       const VexAbiInfo*  abiinfo,
-                                       Bool sigill_diag )
+static Bool gen_sub_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
 {
-   /* Set result defaults. */
-   dres->whatNext    = Dis_Continue;
-   dres->len         = 4;
-   dres->jk_StopHere = Ijk_INVALID;
-   dres->hint        = Dis_HintNone;
+   return False;
+}
 
-   /* At least this is simple on LOONGARCH64: insns are all 4 bytes long,
-      and 4-aligned.  So just fish the whole thing out of memory right now
-      and have done. */
-   UInt insn = getUInt(guest_instr);
-   DIP("\t0x%llx:\t0x%08x\t", (Addr64)guest_PC_curr_instr, insn);
-   vassert((guest_PC_curr_instr & 3ULL) == 0);
+static Bool gen_sub_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
 
-   /* Spot "Special" instructions (see comment at top of file). */
-   Bool ok = disInstr_LOONGARCH64_WRK_special(dres, guest_instr);
-   if (ok)
-      return ok;
+static Bool gen_slt ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
 
-   /* Main LOONGARCH64 instruction decoder starts here. */
-   switch (SLICE(insn, 31, 30)) {
+static Bool gen_sltu ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_slti ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_sltui ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_nor ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_and ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_or ( DisResult* dres, UInt insn,
+                     const VexArchInfo* archinfo,
+                     const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_xor ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_orn ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_andn ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mul_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mulh_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mulh_wu ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mul_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mulh_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mulh_du ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mulw_d_w ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mulw_d_wu ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_div_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mod_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_div_wu ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mod_wu ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_div_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mod_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_div_du ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_mod_du ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_alsl_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_alsl_wu ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_alsl_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_lu12i_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_lu32i_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_lu52i_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_pcaddi ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_pcalau12i ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_pcaddu12i ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_pcaddu18i ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_addi_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_addi_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_addu16i_d ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_andi ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ori ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_xori ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for fixed point shift insns                  ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_sll_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_srl_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_sra_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_sll_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_srl_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_sra_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_rotr_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_rotr_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_slli_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_slli_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_srli_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_srli_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_srai_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_srai_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_rotri_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_rotri_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for fixed point bit insns                    ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_ext_w_h ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ext_w_b ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_clo_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_clz_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_cto_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ctz_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_clo_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_clz_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_cto_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ctz_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_revb_2h ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_revb_4h ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_revb_2w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_revb_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_revh_2w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_revh_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bitrev_4b ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bitrev_8b ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bitrev_w ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bitrev_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bytepick_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bytepick_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_maskeqz ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_masknez ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bstrins_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bstrpick_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bstrins_d ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bstrpick_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for fixed point load/store insns             ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_ld_b ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ld_h ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ld_w ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ld_d ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_st_b ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_st_h ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_st_w ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_st_d ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ld_bu ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ld_hu ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ld_wu ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldx_b ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldx_h ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldx_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldx_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stx_b ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stx_h ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stx_w ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stx_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldx_bu ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldx_hu ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldx_wu ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_preld ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_preldx ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_dbar ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ibar ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldptr_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stptr_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldptr_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stptr_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldgt_b ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldgt_h ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldgt_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldgt_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldle_b ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldle_h ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldle_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ldle_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stgt_b ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stgt_h ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stgt_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stgt_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stle_b ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stle_h ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stle_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_stle_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for fixed point atomic insns                 ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_ll_w ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_sc_w ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ll_d ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_sc_d ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amswap_w ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amswap_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amadd_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amadd_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amand_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amand_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amor_w ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amor_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amxor_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amxor_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammax_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammax_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammin_w ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammin_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammax_wu ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammax_du ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammin_wu ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammin_du ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amswap_db_w ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amswap_db_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amadd_db_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amadd_db_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amand_db_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amand_db_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amor_db_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amor_db_d ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amxor_db_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_amxor_db_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammax_db_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammax_db_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammin_db_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammin_db_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammax_db_wu ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammax_db_du ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammin_db_wu ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ammin_db_du ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for fixed point extra insns                  ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_crc_w_b_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_crc_w_h_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_crc_w_w_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_crc_w_d_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_crcc_w_b_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_crcc_w_h_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_crcc_w_w_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_crcc_w_d_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_break ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_syscall ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_asrtle_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_asrtgt_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_rdtimel_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_rdtimeh_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_rdtime_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_cpucfg ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for floating point arithmetic insns          ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_fadd_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fadd_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fsub_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fsub_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmul_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmul_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fdiv_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fdiv_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmadd_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmadd_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmsub_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmsub_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fnmadd_s ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fnmadd_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fnmsub_s ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fnmsub_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmax_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmax_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmin_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmin_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmaxa_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmaxa_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmina_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmina_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fabs_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fabs_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fneg_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fneg_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fsqrt_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fsqrt_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_frecip_s ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_frecip_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_frsqrt_s ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_frsqrt_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fscaleb_s ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fscaleb_d ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_flogb_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_flogb_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcopysign_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcopysign_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fclass_s ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fclass_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for floating point comparison insns          ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_fcmp_caf_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_caf_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_saf_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_saf_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_clt_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_clt_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_slt_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_slt_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_ceq_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_ceq_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_seq_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_seq_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cle_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cle_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sle_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sle_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cun_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cun_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sun_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sun_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cult_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cult_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sult_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sult_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cueq_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cueq_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sueq_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sueq_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cule_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cule_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sule_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sule_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cne_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cne_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sne_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sne_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cor_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cor_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sor_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sor_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cune_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_cune_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sune_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcmp_sune_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for floating point conversion insns          ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_fcvt_s_d ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fcvt_d_s ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrm_w_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrm_w_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrm_l_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrm_l_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrp_w_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrp_w_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrp_l_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrp_l_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrz_w_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrz_w_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrz_l_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrz_l_d ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrne_w_s ( DisResult* dres, UInt insn,
+                               const VexArchInfo* archinfo,
+                               const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrne_w_d ( DisResult* dres, UInt insn,
+                               const VexArchInfo* archinfo,
+                               const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrne_l_s ( DisResult* dres, UInt insn,
+                               const VexArchInfo* archinfo,
+                               const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftintrne_l_d ( DisResult* dres, UInt insn,
+                               const VexArchInfo* archinfo,
+                               const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftint_w_s ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftint_w_d ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftint_l_s ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ftint_l_d ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ffint_s_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ffint_s_l ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ffint_d_w ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_ffint_d_l ( DisResult* dres, UInt insn,
+                            const VexArchInfo* archinfo,
+                            const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_frint_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_frint_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for floating point move insns                ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_fmov_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fmov_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fsel ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movgr2fr_w ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movgr2fr_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movgr2frh_w ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movfr2gr_s ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movfr2gr_d ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movfrh2gr_s ( DisResult* dres, UInt insn,
+                              const VexArchInfo* archinfo,
+                              const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movgr2fcsr ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movfcsr2gr ( DisResult* dres, UInt insn,
+                             const VexArchInfo* archinfo,
+                             const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movfr2cf ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movcf2fr ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movgr2cf ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_movcf2gr ( DisResult* dres, UInt insn,
+                           const VexArchInfo* archinfo,
+                           const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for floating point load/store insns          ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_fld_s ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fst_s ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fld_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fst_d ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fldx_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fldx_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fstx_s ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fstx_d ( DisResult* dres, UInt insn,
+                         const VexArchInfo* archinfo,
+                         const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fldgt_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fldgt_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fldle_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fldle_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fstgt_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fstgt_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fstle_s ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_fstle_d ( DisResult* dres, UInt insn,
+                          const VexArchInfo* archinfo,
+                          const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Helpers for branch insns                             ---*/
+/*------------------------------------------------------------*/
+
+static Bool gen_beqz ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bnez ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bceqz ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bcnez ( DisResult* dres, UInt insn,
+                        const VexArchInfo* archinfo,
+                        const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_jirl ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_b ( DisResult* dres, UInt insn,
+                    const VexArchInfo* archinfo,
+                    const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bl ( DisResult* dres, UInt insn,
+                     const VexArchInfo* archinfo,
+                     const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_beq ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bne ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_blt ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bge ( DisResult* dres, UInt insn,
+                      const VexArchInfo* archinfo,
+                      const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bltu ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+static Bool gen_bgeu ( DisResult* dres, UInt insn,
+                       const VexArchInfo* archinfo,
+                       const VexAbiInfo* abiinfo )
+{
+   return False;
+}
+
+
+/*------------------------------------------------------------*/
+/*--- Disassemble a single LOONGARCH64 instruction         ---*/
+/*------------------------------------------------------------*/
+
+/* Disassemble a single LOONGARCH64 instruction into IR.  The instruction
+   has is located at |guest_instr| and has guest IP of |guest_PC_curr_instr|,
+   which will have been set before the call here.  Returns True iff the
+   instruction was decoded, in which case *dres will be set accordingly,
+   or False, in which case *dres should be ignored by the caller. */
+
+static Bool disInstr_LOONGARCH64_WRK_special ( DisResult* dres,
+                                               const UChar* guest_instr )
+{
+   return False;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_00_0000_0000 ( DisResult* dres, UInt insn,
+                                                    const VexArchInfo* archinfo,
+                                                    const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (SLICE(insn, 21, 15)) {
+      case 0b0000000:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b00100:
+               ok = gen_clo_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00101:
+               ok = gen_clz_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00110:
+               ok = gen_cto_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00111:
+               ok = gen_ctz_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01000:
+               ok = gen_clo_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01001:
+               ok = gen_clz_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01010:
+               ok = gen_cto_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01011:
+               ok = gen_ctz_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01100:
+               ok = gen_revb_2h(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01101:
+               ok = gen_revb_4h(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01110:
+               ok = gen_revb_2w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01111:
+               ok = gen_revb_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10000:
+               ok = gen_revh_2w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10001:
+               ok = gen_revh_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10010:
+               ok = gen_bitrev_4b(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10011:
+               ok = gen_bitrev_8b(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10100:
+               ok = gen_bitrev_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10101:
+               ok = gen_bitrev_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10110:
+               ok = gen_ext_w_h(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10111:
+               ok = gen_ext_w_b(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11000:
+               ok = gen_rdtimel_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11001:
+               ok = gen_rdtimeh_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11010:
+               ok = gen_rdtime_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11011:
+               ok = gen_cpucfg(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0000010:
+         ok = gen_asrtle_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0000011:
+         ok = gen_asrtgt_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100000:
+         ok = gen_add_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100001:
+         ok = gen_add_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100010:
+         ok = gen_sub_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100011:
+         ok = gen_sub_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100100:
+         ok = gen_slt(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100101:
+         ok = gen_sltu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100110:
+         ok = gen_maskeqz(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100111:
+         ok = gen_masknez(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101000:
+         ok = gen_nor(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101001:
+         ok = gen_and(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101010:
+         ok = gen_or(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101011:
+         ok = gen_xor(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101100:
+         ok = gen_orn(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101101:
+         ok = gen_andn(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101110:
+         ok = gen_sll_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101111:
+         ok = gen_srl_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110000:
+         ok = gen_sra_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110001:
+         ok = gen_sll_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110010:
+         ok = gen_srl_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110011:
+         ok = gen_sra_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110110:
+         ok = gen_rotr_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110111:
+         ok = gen_rotr_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111000:
+         ok = gen_mul_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111001:
+         ok = gen_mulh_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111010:
+         ok = gen_mulh_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111011:
+         ok = gen_mul_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111100:
+         ok = gen_mulh_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111101:
+         ok = gen_mulh_du(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111110:
+         ok = gen_mulw_d_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111111:
+         ok = gen_mulw_d_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000000:
+         ok = gen_div_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000001:
+         ok = gen_mod_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000010:
+         ok = gen_div_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000011:
+         ok = gen_mod_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000100:
+         ok = gen_div_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000101:
+         ok = gen_mod_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000110:
+         ok = gen_div_du(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000111:
+         ok = gen_mod_du(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001000:
+         ok = gen_crc_w_b_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001001:
+         ok = gen_crc_w_h_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001010:
+         ok = gen_crc_w_w_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001011:
+         ok = gen_crc_w_d_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001100:
+         ok = gen_crcc_w_b_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001101:
+         ok = gen_crcc_w_h_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001110:
+         ok = gen_crcc_w_w_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001111:
+         ok = gen_crcc_w_d_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010100:
+         ok = gen_break(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010110:
+         ok = gen_syscall(dres, insn, archinfo, abiinfo);
+         break;
+      default:
+         ok = False;
+         break;
+   }
+
+   if (ok) {
+      return ok;
+   }
+
+   switch (SLICE(insn, 21, 18)) {
+      case 0b0001:
+         if (SLICE(insn, 17, 17) == 0) {
+            ok = gen_alsl_w(dres, insn, archinfo, abiinfo);
+         } else {
+            ok = gen_alsl_wu(dres, insn, archinfo, abiinfo);
+         }
+         break;
+      case 0b0010:
+         if (SLICE(insn, 17, 17) == 0) {
+            ok = gen_bytepick_w(dres, insn, archinfo, abiinfo);
+         } else {
+            ok = False;
+         }
+         break;
+      case 0b0011:
+         ok = gen_bytepick_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011:
+         if (SLICE(insn, 17, 17) == 0) {
+            ok = gen_alsl_d(dres, insn, archinfo, abiinfo);
+         } else {
+            ok = False;
+         }
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_00_0000_0001 ( DisResult* dres, UInt insn,
+                                                    const VexArchInfo* archinfo,
+                                                    const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   if (SLICE(insn, 21, 21) == 0) {
+      switch (SLICE(insn, 20, 16)) {
+         case 0b00000:
+            if (SLICE(insn, 15, 15) == 1) {
+               ok = gen_slli_w(dres, insn, archinfo, abiinfo);
+            } else {
+               ok = False;
+            }
+            break;
+         case 0b00001:
+            ok = gen_slli_d(dres, insn, archinfo, abiinfo);
+            break;
+         case 0b00100:
+            if (SLICE(insn, 15, 15) == 1) {
+               ok = gen_srli_w(dres, insn, archinfo, abiinfo);
+            } else {
+               ok = False;
+            }
+            break;
+         case 0b00101:
+            ok = gen_srli_d(dres, insn, archinfo, abiinfo);
+            break;
+         case 0b01000:
+            if (SLICE(insn, 15, 15) == 1) {
+               ok = gen_srai_w(dres, insn, archinfo, abiinfo);
+            } else {
+               ok = False;
+            }
+            break;
+         case 0b01001:
+            ok = gen_srai_d(dres, insn, archinfo, abiinfo);
+            break;
+         case 0b01100:
+            if (SLICE(insn, 15, 15) == 1) {
+               ok = gen_rotri_w(dres, insn, archinfo, abiinfo);
+            } else {
+               ok = False;
+            }
+            break;
+         case 0b01101:
+            ok = gen_rotri_d(dres, insn, archinfo, abiinfo);
+            break;
+         default:
+            ok = False;
+            break;
+      }
+   } else {
+      if (SLICE(insn, 15, 15) == 0) {
+         ok = gen_bstrins_w(dres, insn, archinfo, abiinfo);
+      } else {
+         ok = gen_bstrpick_w(dres, insn, archinfo, abiinfo);
+      }
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_00_0000_0100 ( DisResult* dres, UInt insn,
+                                                    const VexArchInfo* archinfo,
+                                                    const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (SLICE(insn, 21, 15)) {
+      case 0b0000001:
+         ok = gen_fadd_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0000010:
+         ok = gen_fadd_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0000101:
+         ok = gen_fsub_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0000110:
+         ok = gen_fsub_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0001001:
+         ok = gen_fmul_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0001010:
+         ok = gen_fmul_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0001101:
+         ok = gen_fdiv_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0001110:
+         ok = gen_fdiv_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010001:
+         ok = gen_fmax_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010010:
+         ok = gen_fmax_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010101:
+         ok = gen_fmin_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010110:
+         ok = gen_fmin_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0011001:
+         ok = gen_fmaxa_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0011010:
+         ok = gen_fmaxa_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0011101:
+         ok = gen_fmina_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0011110:
+         ok = gen_fmina_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100001:
+         ok = gen_fscaleb_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100010:
+         ok = gen_fscaleb_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100101:
+         ok = gen_fcopysign_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100110:
+         ok = gen_fcopysign_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101000:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b00001:
+               ok = gen_fabs_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00010:
+               ok = gen_fabs_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00101:
+               ok = gen_fneg_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00110:
+               ok = gen_fneg_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01001:
+               ok = gen_flogb_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01010:
+               ok = gen_flogb_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01101:
+               ok = gen_fclass_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01110:
+               ok = gen_fclass_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10001:
+               ok = gen_fsqrt_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10010:
+               ok = gen_fsqrt_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10101:
+               ok = gen_frecip_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10110:
+               ok = gen_frecip_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11001:
+               ok = gen_frsqrt_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11010:
+               ok = gen_frsqrt_d(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0101001:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b00101:
+               ok = gen_fmov_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00110:
+               ok = gen_fmov_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01001:
+               ok = gen_movgr2fr_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01010:
+               ok = gen_movgr2fr_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01011:
+               ok = gen_movgr2frh_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01101:
+               ok = gen_movfr2gr_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01110:
+               ok = gen_movfr2gr_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01111:
+               ok = gen_movfrh2gr_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10000:
+               ok = gen_movgr2fcsr(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10010:
+               ok = gen_movfcsr2gr(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10100:
+               if (SLICE(insn, 4, 3) == 0b00) {
+                  ok = gen_movfr2cf(dres, insn, archinfo, abiinfo);
+               } else {
+                  ok = False;
+               }
+               break;
+            case 0b10101:
+               if (SLICE(insn, 9, 8) == 0b00) {
+                  ok = gen_movcf2fr(dres, insn, archinfo, abiinfo);
+               } else {
+                  ok = False;
+               }
+               break;
+            case 0b10110:
+               if (SLICE(insn, 4, 3) == 0b00) {
+                  ok = gen_movgr2cf(dres, insn, archinfo, abiinfo);
+               } else {
+                  ok = False;
+               }
+               break;
+            case 0b10111:
+               if (SLICE(insn, 9, 8) == 0b00) {
+                  ok = gen_movcf2gr(dres, insn, archinfo, abiinfo);
+               } else {
+                  ok = False;
+               }
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0110010:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b00110:
+               ok = gen_fcvt_s_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01001:
+               ok = gen_fcvt_d_s(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0110100:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b00001:
+               ok = gen_ftintrm_w_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00010:
+               ok = gen_ftintrm_w_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01001:
+               ok = gen_ftintrm_l_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01010:
+               ok = gen_ftintrm_l_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10001:
+               ok = gen_ftintrp_w_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10010:
+               ok = gen_ftintrp_w_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11001:
+               ok = gen_ftintrp_l_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11010:
+               ok = gen_ftintrp_l_d(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0110101:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b00001:
+               ok = gen_ftintrz_w_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00010:
+               ok = gen_ftintrz_w_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01001:
+               ok = gen_ftintrz_l_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01010:
+               ok = gen_ftintrz_l_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10001:
+               ok = gen_ftintrne_w_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10010:
+               ok = gen_ftintrne_w_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11001:
+               ok = gen_ftintrne_l_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11010:
+               ok = gen_ftintrne_l_d(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0110110:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b00001:
+               ok = gen_ftint_w_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00010:
+               ok = gen_ftint_w_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01001:
+               ok = gen_ftint_l_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01010:
+               ok = gen_ftint_l_d(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0111010:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b00100:
+               ok = gen_ffint_s_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b00110:
+               ok = gen_ffint_s_l(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01000:
+               ok = gen_ffint_d_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01010:
+               ok = gen_ffint_d_l(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0111100:
+         switch (SLICE(insn, 14, 10)) {
+            case 0b10001:
+               ok = gen_frint_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10010:
+               ok = gen_frint_d(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_00_0000 ( DisResult* dres, UInt insn,
+                                               const VexArchInfo* archinfo,
+                                               const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (SLICE(insn, 25, 22)) {
+      case 0b0000:
+         ok = disInstr_LOONGARCH64_WRK_00_0000_0000(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0001:
+         ok = disInstr_LOONGARCH64_WRK_00_0000_0001(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010:
+         ok = gen_bstrins_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0011:
+         ok = gen_bstrpick_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100:
+         ok = disInstr_LOONGARCH64_WRK_00_0000_0100(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000:
+         ok = gen_slti(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001:
+         ok = gen_sltui(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010:
+         ok = gen_addi_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011:
+         ok = gen_addi_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100:
+         ok = gen_lu52i_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101:
+         ok = gen_andi(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110:
+         ok = gen_ori(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111:
+         ok = gen_xori(dres, insn, archinfo, abiinfo);
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_00_1010 ( DisResult* dres, UInt insn,
+                                               const VexArchInfo* archinfo,
+                                               const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (SLICE(insn, 25, 22)) {
+      case 0b0000:
+         ok = gen_ld_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0001:
+         ok = gen_ld_h(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010:
+         ok = gen_ld_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0011:
+         ok = gen_ld_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100:
+         ok = gen_st_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101:
+         ok = gen_st_h(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110:
+         ok = gen_st_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111:
+         ok = gen_st_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000:
+         ok = gen_ld_bu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001:
+         ok = gen_ld_hu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010:
+         ok = gen_ld_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011:
+         ok = gen_preld(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100:
+         ok = gen_fld_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101:
+         ok = gen_fst_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110:
+         ok = gen_fld_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111:
+         ok = gen_fst_d(dres, insn, archinfo, abiinfo);
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_00_1110_0000 ( DisResult* dres, UInt insn,
+                                                    const VexArchInfo* archinfo,
+                                                    const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (SLICE(insn, 21, 15)) {
+      case 0b0000000:
+         ok = gen_ldx_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0001000:
+         ok = gen_ldx_h(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010000:
+         ok = gen_ldx_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0011000:
+         ok = gen_ldx_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100000:
+         ok = gen_stx_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101000:
+         ok = gen_stx_h(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110000:
+         ok = gen_stx_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111000:
+         ok = gen_stx_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000000:
+         ok = gen_ldx_bu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001000:
+         ok = gen_ldx_hu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010000:
+         ok = gen_ldx_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011000:
+         ok = gen_preldx(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100000:
+         ok = gen_fldx_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101000:
+         ok = gen_fldx_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110000:
+         ok = gen_fstx_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111000:
+         ok = gen_fstx_d(dres, insn, archinfo, abiinfo);
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_00_1110_0001 ( DisResult* dres, UInt insn,
+                                                    const VexArchInfo* archinfo,
+                                                    const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (SLICE(insn, 21, 15)) {
+      case 0b1000000:
+         ok = gen_amswap_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000001:
+         ok = gen_amswap_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000010:
+         ok = gen_amadd_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000011:
+         ok = gen_amadd_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000100:
+         ok = gen_amand_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000101:
+         ok = gen_amand_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000110:
+         ok = gen_amor_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000111:
+         ok = gen_amor_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001000:
+         ok = gen_amxor_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001001:
+         ok = gen_amxor_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001010:
+         ok = gen_ammax_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001011:
+         ok = gen_ammax_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001100:
+         ok = gen_ammin_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001101:
+         ok = gen_ammin_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001110:
+         ok = gen_ammax_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001111:
+         ok = gen_ammax_du(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010000:
+         ok = gen_ammin_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010001:
+         ok = gen_ammin_du(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010010:
+         ok = gen_amswap_db_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010011:
+         ok = gen_amswap_db_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010100:
+         ok = gen_amadd_db_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010101:
+         ok = gen_amadd_db_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010110:
+         ok = gen_amand_db_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010111:
+         ok = gen_amand_db_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011000:
+         ok = gen_amor_db_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011001:
+         ok = gen_amor_db_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011010:
+         ok = gen_amxor_db_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011011:
+         ok = gen_amxor_db_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011100:
+         ok = gen_ammax_db_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011101:
+         ok = gen_ammax_db_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011110:
+         ok = gen_ammin_db_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011111:
+         ok = gen_ammin_db_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100000:
+         ok = gen_ammax_db_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100001:
+         ok = gen_ammax_db_du(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100010:
+         ok = gen_ammin_db_wu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100011:
+         ok = gen_ammin_db_du(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100100:
+         ok = gen_dbar(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1100101:
+         ok = gen_ibar(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101000:
+         ok = gen_fldgt_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101001:
+         ok = gen_fldgt_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101010:
+         ok = gen_fldle_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101011:
+         ok = gen_fldle_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101100:
+         ok = gen_fstgt_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101101:
+         ok = gen_fstgt_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101110:
+         ok = gen_fstle_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1101111:
+         ok = gen_fstle_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110000:
+         ok = gen_ldgt_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110001:
+         ok = gen_ldgt_h(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110010:
+         ok = gen_ldgt_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110011:
+         ok = gen_ldgt_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110100:
+         ok = gen_ldle_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110101:
+         ok = gen_ldle_h(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110110:
+         ok = gen_ldle_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110111:
+         ok = gen_ldle_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111000:
+         ok = gen_stgt_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111001:
+         ok = gen_stgt_h(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111010:
+         ok = gen_stgt_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111011:
+         ok = gen_stgt_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111100:
+         ok = gen_stle_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111101:
+         ok = gen_stle_h(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111110:
+         ok = gen_stle_w(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1111111:
+         ok = gen_stle_d(dres, insn, archinfo, abiinfo);
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_FCMP_S ( DisResult* dres, UInt insn,
+                                              const VexArchInfo* archinfo,
+                                              const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (get_cond(insn)) {
+      case 0x0:
+         ok = gen_fcmp_caf_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x1:
+         ok = gen_fcmp_saf_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x2:
+         ok = gen_fcmp_clt_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x3:
+         ok = gen_fcmp_slt_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x4:
+         ok = gen_fcmp_ceq_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x5:
+         ok = gen_fcmp_seq_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x6:
+         ok = gen_fcmp_cle_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x7:
+         ok = gen_fcmp_sle_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x8:
+         ok = gen_fcmp_cun_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x9:
+         ok = gen_fcmp_sun_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xa:
+         ok = gen_fcmp_cult_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xb:
+         ok = gen_fcmp_sult_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xc:
+         ok = gen_fcmp_cueq_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xd:
+         ok = gen_fcmp_sueq_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xe:
+         ok = gen_fcmp_cule_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xf:
+         ok = gen_fcmp_sule_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x10:
+         ok = gen_fcmp_cne_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x11:
+         ok = gen_fcmp_sne_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x14:
+         ok = gen_fcmp_cor_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x15:
+         ok = gen_fcmp_sor_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x18:
+         ok = gen_fcmp_cune_s(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x19:
+         ok = gen_fcmp_sune_s(dres, insn, archinfo, abiinfo);
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_FCMP_D ( DisResult* dres, UInt insn,
+                                              const VexArchInfo* archinfo,
+                                              const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (get_cond(insn)) {
+      case 0x0:
+         ok = gen_fcmp_caf_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x1:
+         ok = gen_fcmp_saf_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x2:
+         ok = gen_fcmp_clt_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x3:
+         ok = gen_fcmp_slt_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x4:
+         ok = gen_fcmp_ceq_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x5:
+         ok = gen_fcmp_seq_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x6:
+         ok = gen_fcmp_cle_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x7:
+         ok = gen_fcmp_sle_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x8:
+         ok = gen_fcmp_cun_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x9:
+         ok = gen_fcmp_sun_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xa:
+         ok = gen_fcmp_cult_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xb:
+         ok = gen_fcmp_sult_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xc:
+         ok = gen_fcmp_cueq_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xd:
+         ok = gen_fcmp_sueq_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xe:
+         ok = gen_fcmp_cule_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0xf:
+         ok = gen_fcmp_sule_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x10:
+         ok = gen_fcmp_cne_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x11:
+         ok = gen_fcmp_sne_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x14:
+         ok = gen_fcmp_cor_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x15:
+         ok = gen_fcmp_sor_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x18:
+         ok = gen_fcmp_cune_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0x19:
+         ok = gen_fcmp_sune_d(dres, insn, archinfo, abiinfo);
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_00 ( DisResult* dres, UInt insn,
+                                          const VexArchInfo* archinfo,
+                                          const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (SLICE(insn, 29, 26)) {
+      case 0b0000:
+         ok = disInstr_LOONGARCH64_WRK_00_0000(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010:
+         switch (SLICE(insn, 25, 20)) {
+            case 0b000001:
+               ok = gen_fmadd_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b000010:
+               ok = gen_fmadd_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b000101:
+               ok = gen_fmsub_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b000110:
+               ok = gen_fmsub_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b001001:
+               ok = gen_fnmadd_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b001010:
+               ok = gen_fnmadd_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b001101:
+               ok = gen_fnmsub_s(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b001110:
+               ok = gen_fnmsub_d(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0011:
+         switch (SLICE(insn, 25, 20)) {
+            case 0b000001:
+               if (SLICE(insn, 4, 3) == 0b00) {
+                  ok = disInstr_LOONGARCH64_WRK_FCMP_S(dres, insn, archinfo, abiinfo);
+               } else {
+                  ok = False;
+               }
+               break;
+            case 0b000010:
+               if (SLICE(insn, 4, 3) == 0b00) {
+                  ok = disInstr_LOONGARCH64_WRK_FCMP_D(dres, insn, archinfo, abiinfo);
+               } else {
+                  ok = False;
+               }
+               break;
+            case 0b010000:
+               if (SLICE(insn, 19, 18) == 0b00) {
+                  ok = gen_fsel(dres, insn, archinfo, abiinfo);
+               } else {
+                  ok = False;
+               }
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0100:
+         ok = gen_addu16i_d(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101:
+         if (SLICE(insn, 25, 25) == 0) {
+            ok = gen_lu12i_w(dres, insn, archinfo, abiinfo);
+         } else {
+            ok = gen_lu32i_d(dres, insn, archinfo, abiinfo);
+         }
+         break;
+      case 0b0110:
+         if (SLICE(insn, 25, 25) == 0) {
+            ok = gen_pcaddi(dres, insn, archinfo, abiinfo);
+         } else {
+            ok = gen_pcalau12i(dres, insn, archinfo, abiinfo);
+         }
+         break;
+      case 0b0111:
+         if (SLICE(insn, 25, 25) == 0) {
+            ok = gen_pcaddu12i(dres, insn, archinfo, abiinfo);
+         } else {
+            ok = gen_pcaddu18i(dres, insn, archinfo, abiinfo);
+         }
+         break;
+      case 0b1000:
+         switch (SLICE(insn, 25, 24)) {
+            case 0b00:
+               ok = gen_ll_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01:
+               ok = gen_sc_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10:
+               ok = gen_ll_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11:
+               ok = gen_sc_d(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b1001:
+         switch (SLICE(insn, 25, 24)) {
+            case 0b00:
+               ok = gen_ldptr_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01:
+               ok = gen_stptr_w(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b10:
+               ok = gen_ldptr_d(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b11:
+               ok = gen_stptr_d(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b1010:
+         ok = disInstr_LOONGARCH64_WRK_00_1010(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1110:
+         switch (SLICE(insn, 25, 22)) {
+            case 0b0000:
+               ok = disInstr_LOONGARCH64_WRK_00_1110_0000(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b0001:
+               ok = disInstr_LOONGARCH64_WRK_00_1110_0001(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK_01 ( DisResult* dres, UInt insn,
+                                          const VexArchInfo* archinfo,
+                                          const VexAbiInfo*  abiinfo )
+{
+   Bool ok;
+   switch (SLICE(insn, 29, 26)) {
+      case 0b0000:
+         ok = gen_beqz(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0001:
+         ok = gen_bnez(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0010:
+         switch (SLICE(insn, 9, 8)) {
+            case 0b00:
+               ok = gen_bceqz(dres, insn, archinfo, abiinfo);
+               break;
+            case 0b01:
+               ok = gen_bcnez(dres, insn, archinfo, abiinfo);
+               break;
+            default:
+               ok = False;
+               break;
+         }
+         break;
+      case 0b0011:
+         ok = gen_jirl(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0100:
+         ok = gen_b(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0101:
+         ok = gen_bl(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0110:
+         ok = gen_beq(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b0111:
+         ok = gen_bne(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1000:
+         ok = gen_blt(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1001:
+         ok = gen_bge(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1010:
+         ok = gen_bltu(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b1011:
+         ok = gen_bgeu(dres, insn, archinfo, abiinfo);
+         break;
+      default:
+         ok = False;
+         break;
+   }
+   return ok;
+}
+
+static Bool disInstr_LOONGARCH64_WRK ( /*MB_OUT*/DisResult* dres,
+                                       const UChar* guest_instr,
+                                       const VexArchInfo* archinfo,
+                                       const VexAbiInfo*  abiinfo,
+                                       Bool sigill_diag )
+{
+   /* Set result defaults. */
+   dres->whatNext    = Dis_Continue;
+   dres->len         = 4;
+   dres->jk_StopHere = Ijk_INVALID;
+   dres->hint        = Dis_HintNone;
+
+   /* At least this is simple on LOONGARCH64: insns are all 4 bytes long,
+      and 4-aligned.  So just fish the whole thing out of memory right now
+      and have done. */
+   UInt insn = getUInt(guest_instr);
+   DIP("\t0x%llx:\t0x%08x\t", (Addr64)guest_PC_curr_instr, insn);
+   vassert((guest_PC_curr_instr & 3ULL) == 0);
+
+   /* Spot "Special" instructions (see comment at top of file). */
+   Bool ok = disInstr_LOONGARCH64_WRK_special(dres, guest_instr);
+   if (ok)
+      return ok;
+
+   /* Main LOONGARCH64 instruction decoder starts here. */
+   switch (SLICE(insn, 31, 30)) {
+      case 0b00:
+         ok = disInstr_LOONGARCH64_WRK_00(dres, insn, archinfo, abiinfo);
+         break;
+      case 0b01:
+         ok = disInstr_LOONGARCH64_WRK_01(dres, insn, archinfo, abiinfo);
+         break;
       default:
          ok = False;
          break;
-- 
2.39.1


From 3254218c6f02ae06dcfebd29e36c6bf73a76f8b5 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Mon, 8 Aug 2022 10:33:33 +0800
Subject: [PATCH v4 017/123] loongarch64: Add support to decode floating point
 conversion insns

---
 VEX/priv/guest_loongarch64_toIR.c | 523 ++++++++++++++++++++++++++++--
 1 file changed, 495 insertions(+), 28 deletions(-)

diff --git a/VEX/priv/guest_loongarch64_toIR.c b/VEX/priv/guest_loongarch64_toIR.c
index c175baa29..de762d929 100644
--- a/VEX/priv/guest_loongarch64_toIR.c
+++ b/VEX/priv/guest_loongarch64_toIR.c
@@ -6438,200 +6438,667 @@ static Bool gen_fcmp_sune_d ( DisResult* dres, UInt insn,
 /*--- Helpers for floating point conversion insns          ---*/
 /*------------------------------------------------------------*/
 
+static IRExpr* is_Invalid_Overflow ( void )
+{
+   /* Bits 16 to 20 in FCSR are flags.
+      Bit 18 - overflow
+      Bit 20 - invalid
+    */
+   IRExpr* fcsr = getFCSR(0);
+   IRExpr* shr = binop(Iop_Shr32, fcsr, mkU8(16));
+   IRExpr* and = binop(Iop_And32, shr, mkU32(0x14));
+   return binop(Iop_CmpNE32, and, getIReg32(0));
+}
+
+static Bool gen_convert_s_helper ( enum fpop op, UInt fd, UInt fj )
+{
+   IRExpr* e;
+   IRExpr* rm;
+   switch (op) {
+      case FTINTRM_W_S:
+         rm = gen_round_down();
+         e = binop(Iop_F32toI32S, rm, getFReg32(fj));
+         break;
+      case FTINTRM_W_D:
+         rm = gen_round_down();
+         e = binop(Iop_F64toI32S, rm, getFReg64(fj));
+         break;
+      case FTINTRP_W_S:
+         rm = gen_round_up();
+         e = binop(Iop_F32toI32S, rm, getFReg32(fj));
+         break;
+      case FTINTRP_W_D:
+         rm = gen_round_up();
+         e = binop(Iop_F64toI32S, rm, getFReg64(fj));
+         break;
+      case FTINTRZ_W_S:
+         rm = gen_round_to_zero();
+         e = binop(Iop_F32toI32S, rm, getFReg32(fj));
+         break;
+      case FTINTRZ_W_D:
+         rm = gen_round_to_zero();
+         e = binop(Iop_F64toI32S, rm, getFReg64(fj));
+         break;
+      case FTINTRNE_W_S:
+         rm = gen_round_to_nearest();
+         e = binop(Iop_F32toI32S, rm, getFReg32(fj));
+         break;
+      case FTINTRNE_W_D:
+         rm = gen_round_to_nearest();
+         e = binop(Iop_F64toI32S, rm, getFReg64(fj));
+         break;
+      case FTINT_W_S:
+         rm = get_rounding_mode();
+         e = binop(Iop_F32toI32S, rm, getFReg32(fj));
+         break;
+      case FTINT_W_D:
+         rm = get_rounding_mode();
+         e = binop(Iop_F64toI32S, rm, getFReg64(fj));
+         break;
+      default:
+         return False;
+   }
+
+   calculateFCSR(op, 1, fj, 0, 0);
+   IRExpr* ite = IRExpr_ITE(is_Invalid_Overflow(), mkU32(0x7fffffff), e);
+   putFReg32(fd, unop(Iop_ReinterpI32asF32, ite));
+
+   return True;
+}
+
+static Bool gen_convert_d_helper ( enum fpop op, UInt fd, UInt fj )
+{
+   IRExpr* e;
+   IRExpr* rm;
+   switch (op) {
+      case FTINTRM_L_S:
+         rm = gen_round_down();
+         e = binop(Iop_F32toI64S, rm, getFReg32(fj));
+         break;
+      case FTINTRM_L_D:
+         rm = gen_round_down();
+         e = binop(Iop_F64toI64S, rm, getFReg64(fj));
+         break;
+      case FTINTRP_L_S:
+         rm = gen_round_up();
+         e = binop(Iop_F32toI64S, rm, getFReg32(fj));
+         break;
+      case FTINTRP_L_D:
+         rm = gen_round_up();
+         e = binop(Iop_F64toI64S, rm, getFReg64(fj));
+         break;
+      case FTINTRZ_L_S:
+         rm = gen_round_to_zero();
+         e = binop(Iop_F32toI64S, rm, getFReg32(fj));
+         break;
+      case FTINTRZ_L_D:
+         rm = gen_round_to_zero();
+         e = binop(Iop_F64toI64S, rm, getFReg64(fj));
+         break;
+      case FTINTRNE_L_S:
+         rm = gen_round_to_nearest();
+         e = binop(Iop_F32toI64S, rm, getFReg32(fj));
+         break;
+      case FTINTRNE_L_D:
+         rm = gen_round_to_nearest();
+         e = binop(Iop_F64toI64S, rm, getFReg64(fj));
+         break;
+      case FTINT_L_S:
+         rm = get_rounding_mode();
+         e = binop(Iop_F32toI64S, rm, getFReg32(fj));
+         break;
+      case FTINT_L_D:
+         rm = get_rounding_mode();
+         e = binop(Iop_F64toI64S, rm, getFReg64(fj));
+         break;
+      default:
+         return False;
+   }
+
+   calculateFCSR(op, 1, fj, 0, 0);
+   IRExpr* ite = IRExpr_ITE(is_Invalid_Overflow(),
+                            mkU64(0x7fffffffffffffffULL), e);
+   putFReg64(fd, unop(Iop_ReinterpI64asF64, ite));
+
+   return True;
+}
+
 static Bool gen_fcvt_s_d ( DisResult* dres, UInt insn,
                            const VexArchInfo* archinfo,
                            const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fcvt.s.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   calculateFCSR(FCVT_S_D, 1, fj, 0, 0);
+   IRExpr* rm = get_rounding_mode();
+   putFReg32(fd, binop(Iop_F64toF32, rm, getFReg64(fj)));
+
+   return True;
 }
 
 static Bool gen_fcvt_d_s ( DisResult* dres, UInt insn,
                            const VexArchInfo* archinfo,
                            const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("fcvt.d.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   calculateFCSR(FCVT_D_S, 1, fj, 0, 0);
+   putFReg64(fd, unop(Iop_F32toF64, getFReg32(fj)));
+
+   return True;
 }
 
 static Bool gen_ftintrm_w_s ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrm.w.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINTRM_W_S, fd, fj);
 }
 
 static Bool gen_ftintrm_w_d ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrm.w.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINTRM_W_D, fd, fj);
 }
 
 static Bool gen_ftintrm_l_s ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrm.l.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINTRM_L_S, fd, fj);
 }
 
 static Bool gen_ftintrm_l_d ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrm.l.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINTRM_L_D, fd, fj);
 }
 
 static Bool gen_ftintrp_w_s ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrp.w.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINTRP_W_S, fd, fj);
 }
 
 static Bool gen_ftintrp_w_d ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrp.w.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINTRP_W_D, fd, fj);
 }
 
 static Bool gen_ftintrp_l_s ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrp.l.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINTRP_L_S, fd, fj);
 }
 
 static Bool gen_ftintrp_l_d ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrp.l.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINTRP_L_D, fd, fj);
 }
 
 static Bool gen_ftintrz_w_s ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrz.w.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINTRZ_W_S, fd, fj);
 }
 
 static Bool gen_ftintrz_w_d ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrz.w.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINTRZ_W_D, fd, fj);
 }
 
 static Bool gen_ftintrz_l_s ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrz.l.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINTRZ_L_S, fd, fj);
 }
 
 static Bool gen_ftintrz_l_d ( DisResult* dres, UInt insn,
                               const VexArchInfo* archinfo,
                               const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrz.l.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINTRZ_L_D, fd, fj);
 }
 
 static Bool gen_ftintrne_w_s ( DisResult* dres, UInt insn,
                                const VexArchInfo* archinfo,
                                const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrne.w.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINTRNE_W_S, fd, fj);
 }
 
 static Bool gen_ftintrne_w_d ( DisResult* dres, UInt insn,
                                const VexArchInfo* archinfo,
                                const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrne.w.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINTRNE_W_D, fd, fj);
 }
 
 static Bool gen_ftintrne_l_s ( DisResult* dres, UInt insn,
                                const VexArchInfo* archinfo,
                                const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrne.l.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINTRNE_L_S, fd, fj);
 }
 
 static Bool gen_ftintrne_l_d ( DisResult* dres, UInt insn,
                                const VexArchInfo* archinfo,
                                const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftintrne.l.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINTRNE_L_D, fd, fj);
 }
 
 static Bool gen_ftint_w_s ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftint.w.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINT_W_S, fd, fj);
 }
 
 static Bool gen_ftint_w_d ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftint.w.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_s_helper(FTINT_W_D, fd, fj);
 }
 
 static Bool gen_ftint_l_s ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftint.l.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINT_L_S, fd, fj);
 }
 
 static Bool gen_ftint_l_d ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ftint.l.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   return gen_convert_d_helper(FTINT_L_D, fd, fj);
 }
 
 static Bool gen_ffint_s_w ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ffint.s.w %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   calculateFCSR(FFINT_S_W, 1, fj, 0, 0);
+   IRExpr* rm = get_rounding_mode();
+   IRExpr* f = unop(Iop_ReinterpF32asI32, getFReg32(fj));
+   putFReg32(fd, binop(Iop_I32StoF32, rm, f));
+
+   return True;
 }
 
 static Bool gen_ffint_s_l ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ffint.s.l %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   calculateFCSR(FFINT_S_L, 1, fj, 0, 0);
+   IRExpr* rm = get_rounding_mode();
+   IRExpr* f = unop(Iop_ReinterpF64asI64, getFReg64(fj));
+   putFReg32(fd, binop(Iop_I64StoF32, rm, f));
+
+   return True;
 }
 
 static Bool gen_ffint_d_w ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ffint.d.w %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   calculateFCSR(FFINT_D_W, 1, fj, 0, 0);
+   IRExpr* f = unop(Iop_ReinterpF32asI32, getFReg32(fj));
+   putFReg64(fd, unop(Iop_I32StoF64, f));
+
+   return True;
 }
 
 static Bool gen_ffint_d_l ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("ffint.d.l %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   calculateFCSR(FFINT_D_L, 1, fj, 0, 0);
+   IRExpr* rm = get_rounding_mode();
+   IRExpr* f = unop(Iop_ReinterpF64asI64, getFReg64(fj));
+   putFReg64(fd, binop(Iop_I64StoF64, rm, f));
+
+   return True;
 }
 
 static Bool gen_frint_s ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("frint.s %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   calculateFCSR(FRINT_S, 1, fj, 0, 0);
+   IRExpr* rm = get_rounding_mode();
+   putFReg32(fd, binop(Iop_RoundF32toInt, rm, getFReg32(fj)));
+
+   return True;
 }
 
 static Bool gen_frint_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt fj = get_fj(insn);
+   UInt fd = get_fd(insn);
+
+   DIP("frint.d %s, %s\n", nameFReg(fd), nameFReg(fj));
+
+   if (!(archinfo->hwcaps & VEX_HWCAPS_LOONGARCH_FP)) {
+      dres->jk_StopHere = Ijk_SigILL;
+      dres->whatNext    = Dis_StopHere;
+      return True;
+   }
+
+   calculateFCSR(FRINT_D, 1, fj, 0, 0);
+   IRExpr* rm = get_rounding_mode();
+   putFReg64(fd, binop(Iop_RoundF64toInt, rm, getFReg64(fj)));
+
+   return True;
 }
 
 
-- 
2.39.1


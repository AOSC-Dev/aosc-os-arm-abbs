From ed877605f493b7f49918f1b6cacddbb84515c830 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Tue, 22 Mar 2022 09:59:55 +0800
Subject: [PATCH v4 053/123] loongarch64: Add isel support for Ist_CAS

---
 VEX/priv/host_loongarch64_isel.c | 33 ++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/VEX/priv/host_loongarch64_isel.c b/VEX/priv/host_loongarch64_isel.c
index 0ac5bfb55..ef86c38bc 100644
--- a/VEX/priv/host_loongarch64_isel.c
+++ b/VEX/priv/host_loongarch64_isel.c
@@ -1016,6 +1016,34 @@ static void iselStmtLLSC ( ISelEnv* env, IRStmt* stmt )
    }
 }
 
+static void iselStmtCas ( ISelEnv* env, IRStmt* stmt )
+{
+   IRCAS* cas = stmt->Ist.CAS.details;
+   if (cas->oldHi == IRTemp_INVALID && cas->end == Iend_LE) {
+      /* "normal" singleton CAS */
+      HReg   old = lookupIRTemp(env, cas->oldLo);
+      HReg  addr = iselIntExpr_R(env, cas->addr);
+      HReg  expd = iselIntExpr_R(env, cas->expdLo);
+      HReg  data = iselIntExpr_R(env, cas->dataLo);
+      IRType  ty = typeOfIRTemp(env->type_env, cas->oldLo);
+      Bool size64;
+      switch (ty) {
+         case Ity_I32:
+            size64 = False;
+            break;
+         case Ity_I64:
+            size64 = True;
+            break;
+         default:
+            vpanic("iselStmt(loongarch64): Ist_CAS");
+            break;
+      }
+      addInstr(env, LOONGARCH64Instr_Cas(old, addr, expd, data, size64));
+   } else {
+      vpanic("iselStmt(loongarch64): Ist_CAS");
+   }
+}
+
 static void iselStmtExit ( ISelEnv* env, IRStmt* stmt )
 {
    if (stmt->Ist.Exit.dst->tag != Ico_U64)
@@ -1108,6 +1136,11 @@ static void iselStmt(ISelEnv* env, IRStmt* stmt)
          iselStmtLLSC(env, stmt);
          break;
 
+      /* --------- CAS --------- */
+      case Ist_CAS:
+         iselStmtCas(env, stmt);
+         break;
+
       /* --------- INSTR MARK --------- */
       /* Doesn't generate any executable code ... */
       case Ist_IMark:
-- 
2.39.1


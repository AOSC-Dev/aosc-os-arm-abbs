From 36821e1a6ec5a47055856a61bebaa3c3064c34b3 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Mon, 8 Aug 2022 09:22:48 +0800
Subject: [PATCH v4 010/123] loongarch64: Add support to decode fixed point bit
 insns

---
 VEX/priv/guest_loongarch64_defs.h    |  16 ++
 VEX/priv/guest_loongarch64_helpers.c | 115 ++++++++
 VEX/priv/guest_loongarch64_toIR.c    | 385 +++++++++++++++++++++++++--
 3 files changed, 488 insertions(+), 28 deletions(-)

diff --git a/VEX/priv/guest_loongarch64_defs.h b/VEX/priv/guest_loongarch64_defs.h
index 883be38b8..8abe6b319 100644
--- a/VEX/priv/guest_loongarch64_defs.h
+++ b/VEX/priv/guest_loongarch64_defs.h
@@ -65,6 +65,22 @@ extern Bool guest_loongarch64_state_requires_precise_mem_exns ( Int minoff,
 
 extern VexGuestLayout loongarch64Guest_layout;
 
+
+/*---------------------------------------------------------*/
+/*--- loongarch64 guest helpers                         ---*/
+/*---------------------------------------------------------*/
+
+extern ULong loongarch64_calculate_revb_2h   ( ULong src );
+extern ULong loongarch64_calculate_revb_4h   ( ULong src );
+extern ULong loongarch64_calculate_revb_2w   ( ULong src );
+extern ULong loongarch64_calculate_revb_d    ( ULong src );
+extern ULong loongarch64_calculate_revh_2w   ( ULong src );
+extern ULong loongarch64_calculate_revh_d    ( ULong src );
+extern ULong loongarch64_calculate_bitrev_4b ( ULong src );
+extern ULong loongarch64_calculate_bitrev_8b ( ULong src );
+extern ULong loongarch64_calculate_bitrev_w  ( ULong src );
+extern ULong loongarch64_calculate_bitrev_d  ( ULong src );
+
 #endif /* ndef __VEX_GUEST_LOONGARCH64_DEFS_H */
 
 
diff --git a/VEX/priv/guest_loongarch64_helpers.c b/VEX/priv/guest_loongarch64_helpers.c
index e3c402023..5590fed2c 100644
--- a/VEX/priv/guest_loongarch64_helpers.c
+++ b/VEX/priv/guest_loongarch64_helpers.c
@@ -232,6 +232,121 @@ VexGuestLayout loongarch64Guest_layout = {
 };
 
 
+/*-----------------------------------------------------------*/
+/*--- loongarch64 guest helpers                           ---*/
+/*-----------------------------------------------------------*/
+
+static void swap_UChar ( UChar* a, UChar* b )
+{
+   UChar t = *a;
+   *a = *b;
+   *b = t;
+}
+
+ULong loongarch64_calculate_revb_2h ( ULong src )
+{
+   UChar* s = (UChar*)&src;
+   swap_UChar(&s[0], &s[1]);
+   swap_UChar(&s[2], &s[3]);
+   return (ULong)(Long)(Int)src;
+}
+
+ULong loongarch64_calculate_revb_4h ( ULong src )
+{
+   UChar* s = (UChar*)&src;
+   swap_UChar(&s[0], &s[1]);
+   swap_UChar(&s[2], &s[3]);
+   swap_UChar(&s[4], &s[5]);
+   swap_UChar(&s[6], &s[7]);
+   return src;
+}
+
+ULong loongarch64_calculate_revb_2w ( ULong src )
+{
+   UChar* s = (UChar*)&src;
+   swap_UChar(&s[0], &s[3]);
+   swap_UChar(&s[1], &s[2]);
+   swap_UChar(&s[4], &s[7]);
+   swap_UChar(&s[5], &s[6]);
+   return src;
+}
+
+ULong loongarch64_calculate_revb_d ( ULong src )
+{
+   UChar* s = (UChar*)&src;
+   swap_UChar(&s[0], &s[7]);
+   swap_UChar(&s[1], &s[6]);
+   swap_UChar(&s[2], &s[5]);
+   swap_UChar(&s[3], &s[4]);
+   return src;
+}
+
+static void swap_UShort ( UShort* a, UShort* b )
+{
+   UShort t = *a;
+   *a = *b;
+   *b = t;
+}
+
+ULong loongarch64_calculate_revh_2w ( ULong src )
+{
+   UShort* s = (UShort*)&src;
+   swap_UShort(&s[0], &s[1]);
+   swap_UShort(&s[2], &s[3]);
+   return src;
+}
+
+ULong loongarch64_calculate_revh_d ( ULong src )
+{
+   UShort* s = (UShort*)&src;
+   swap_UShort(&s[0], &s[3]);
+   swap_UShort(&s[1], &s[2]);
+   return src;
+}
+
+static ULong bitrev ( ULong src, ULong start, ULong end )
+{
+   int i, j;
+   ULong res = 0;
+   for (i = start, j = 1; i < end; i++, j++)
+      res |= ((src >> i) & 1) << (end - j);
+   return res;
+}
+
+ULong loongarch64_calculate_bitrev_4b ( ULong src )
+{
+   ULong res = bitrev(src, 0, 8);
+   res |= bitrev(src, 8, 16);
+   res |= bitrev(src, 16, 24);
+   res |= bitrev(src, 24, 32);
+   return (ULong)(Long)(Int)res;
+}
+
+ULong loongarch64_calculate_bitrev_8b ( ULong src )
+{
+   ULong res = bitrev(src, 0, 8);
+   res |= bitrev(src, 8, 16);
+   res |= bitrev(src, 16, 24);
+   res |= bitrev(src, 24, 32);
+   res |= bitrev(src, 32, 40);
+   res |= bitrev(src, 40, 48);
+   res |= bitrev(src, 48, 56);
+   res |= bitrev(src, 56, 64);
+   return res;
+}
+
+ULong loongarch64_calculate_bitrev_w ( ULong src )
+{
+   ULong res = bitrev(src, 0, 32);
+   return (ULong)(Long)(Int)res;
+}
+
+ULong loongarch64_calculate_bitrev_d ( ULong src )
+{
+   return bitrev(src, 0, 64);
+}
+
+
 /*---------------------------------------------------------------*/
 /*--- end                         guest_loongarch64_helpers.c ---*/
 /*---------------------------------------------------------------*/
diff --git a/VEX/priv/guest_loongarch64_toIR.c b/VEX/priv/guest_loongarch64_toIR.c
index 0686032aa..576cfef7f 100644
--- a/VEX/priv/guest_loongarch64_toIR.c
+++ b/VEX/priv/guest_loongarch64_toIR.c
@@ -1568,196 +1568,525 @@ static Bool gen_ext_w_h ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ext.w.h %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   putIReg(rd, extendS(Ity_I16, getIReg16(rj)));
+
+   return True;
 }
 
 static Bool gen_ext_w_b ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ext.w.b %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   putIReg(rd, extendS(Ity_I8, getIReg8(rj)));
+
+   return True;
 }
 
 static Bool gen_clo_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("clo.w %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr* not = unop(Iop_Not32, getIReg32(rj));
+   IRExpr* clz = unop(Iop_Clz32, not);
+   putIReg(rd, extendU(Ity_I32, clz));
+
+   return True;
 }
 
 static Bool gen_clz_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("clz.w %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr* clz = unop(Iop_Clz32, getIReg32(rj));
+   putIReg(rd, extendU(Ity_I32, clz));
+
+   return True;
 }
 
 static Bool gen_cto_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("cto.w %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr* not = unop(Iop_Not32, getIReg32(rj));
+   IRExpr* clz = unop(Iop_Ctz32, not);
+   putIReg(rd, extendU(Ity_I32, clz));
+
+   return True;
 }
 
 static Bool gen_ctz_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ctz.w %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr* clz = unop(Iop_Ctz32, getIReg32(rj));
+   putIReg(rd, extendU(Ity_I32, clz));
+
+   return True;
 }
 
 static Bool gen_clo_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("clo.d %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr* not = unop(Iop_Not64, getIReg64(rj));
+   putIReg(rd, unop(Iop_Clz64, not));
+
+   return True;
 }
 
 static Bool gen_clz_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("clz.d %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   putIReg(rd, unop(Iop_Clz64, getIReg64(rj)));
+
+   return True;
 }
 
 static Bool gen_cto_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("cto.d %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr* not = unop(Iop_Not64, getIReg64(rj));
+   putIReg(rd, unop(Iop_Ctz64, not));
+
+   return True;
 }
 
 static Bool gen_ctz_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("ctz.d %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   putIReg(rd, unop(Iop_Ctz64, getIReg64(rj)));
+
+   return True;
 }
 
 static Bool gen_revb_2h ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("revb.2h %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_revb_2h",
+                                &loongarch64_calculate_revb_2h,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_revb_4h ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("revb.4h %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_revb_4h",
+                                &loongarch64_calculate_revb_4h,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_revb_2w ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("revb.2w %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_revb_2w",
+                                &loongarch64_calculate_revb_2w,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_revb_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("revb.d %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_revb_d",
+                                &loongarch64_calculate_revb_d,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_revh_2w ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("revh.2w %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_revh_2w",
+                                &loongarch64_calculate_revh_2w,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_revh_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("revh.d %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_revh_d",
+                                &loongarch64_calculate_revh_d,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_bitrev_4b ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("bitrev.4b %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_bitrev_4b",
+                                &loongarch64_calculate_bitrev_4b,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_bitrev_8b ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("bitrev.8b %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_bitrev_8b",
+                                &loongarch64_calculate_bitrev_8b,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_bitrev_w ( DisResult* dres, UInt insn,
                            const VexArchInfo* archinfo,
                            const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("bitrev.w %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_bitrev_w",
+                                &loongarch64_calculate_bitrev_w,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_bitrev_d ( DisResult* dres, UInt insn,
                            const VexArchInfo* archinfo,
                            const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("bitrev.d %s, %s\n", nameIReg(rd), nameIReg(rj));
+
+   IRExpr** arg = mkIRExprVec_1(getIReg64(rj));
+   IRExpr* call = mkIRExprCCall(Ity_I64, 0/*regparms*/,
+                                "loongarch64_calculate_bitrev_d",
+                                &loongarch64_calculate_bitrev_d,
+                                arg);
+   putIReg(rd, call);
+
+   return True;
 }
 
 static Bool gen_bytepick_w ( DisResult* dres, UInt insn,
                              const VexArchInfo* archinfo,
                              const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt sa2 = get_sa2(insn);
+   UInt  rk = get_rk(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("bytepick.w %s, %s, %s, %u\n", nameIReg(rd), nameIReg(rj),
+                                      nameIReg(rk), sa2);
+
+   UInt shift = 8 * (4 - sa2);
+   IRExpr* shl = binop(Iop_Shl32, getIReg32(rk), mkU8(32 - shift));
+   if (32 - shift == 32)
+      shl = mkU32(0);
+   IRExpr* shr = binop(Iop_Shr32, getIReg32(rj), mkU8(shift));
+   if (shift == 32)
+      shr = mkU32(0);
+   IRExpr* or = binop(Iop_Or32, shl, shr);
+   putIReg(rd, extendS(Ity_I32, or));
+
+   return True;
 }
 
 static Bool gen_bytepick_d ( DisResult* dres, UInt insn,
                              const VexArchInfo* archinfo,
                              const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt sa3 = get_sa3(insn);
+   UInt  rk = get_rk(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("bytepick.d %s, %s, %s, %u\n", nameIReg(rd), nameIReg(rj),
+                                      nameIReg(rk), sa3);
+
+   UInt shift = 8 * (8 - sa3);
+   IRExpr* shl = binop(Iop_Shl64, getIReg64(rk), mkU8(64 - shift));
+   if (64 - shift == 64)
+      shl = mkU64(0);
+   IRExpr* shr = binop(Iop_Shr64, getIReg64(rj), mkU8(shift));
+   if (shift == 64)
+      shr = mkU64(0);
+   putIReg(rd, binop(Iop_Or64, shl, shr));
+
+   return True;
 }
 
 static Bool gen_maskeqz ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("maskeqz %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* cond = binop(Iop_CmpNE64, getIReg64(rk), mkU64(0));
+   putIReg(rd, binop(Iop_And64, extendS(Ity_I1, cond), getIReg64(rj)));
+
+   return True;
 }
 
 static Bool gen_masknez ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("masknez %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* cond = binop(Iop_CmpEQ64, getIReg64(rk), mkU64(0));
+   putIReg(rd, binop(Iop_And64, extendS(Ity_I1, cond), getIReg64(rj)));
+
+   return True;
 }
 
 static Bool gen_bstrins_w ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt msb = get_msbw(insn);
+   UInt lsb = get_lsbw(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("bstrins.w %s, %s, %u, %u\n", nameIReg(rd), nameIReg(rj), msb, lsb);
+
+   IRTemp tmp = newTemp(Ity_I32);
+   assign(tmp, getIReg32(rd));
+   IRExpr* shl1;
+   if (msb == 31) {
+      shl1 = mkU32(0);
+   } else {
+      IRExpr* shr1 = binop(Iop_Shr32, mkexpr(tmp), mkU8(msb + 1));
+      shl1 = binop(Iop_Shl32, shr1, mkU8(msb + 1));
+   }
+   IRExpr* shl2 = binop(Iop_Shl32, getIReg32(rj), mkU8(31 - msb + lsb));
+   IRExpr* shr2 = binop(Iop_Shr32, shl2, mkU8(31 - msb));
+   IRExpr* shr3;
+   if (lsb == 0) {
+      shr3 = mkU32(0);
+   } else {
+      IRExpr* shl3 = binop(Iop_Shl32, mkexpr(tmp), mkU8(32 - lsb));
+      shr3 = binop(Iop_Shr32, shl3, mkU8(32 - lsb));
+   }
+   IRExpr* or1 = binop(Iop_Or32, shl1, shr2);
+   IRExpr* or2 = binop(Iop_Or32, or1, shr3);
+   putIReg(rd, extendS(Ity_I32, or2));
+
+   return True;
 }
 
 static Bool gen_bstrpick_w ( DisResult* dres, UInt insn,
                              const VexArchInfo* archinfo,
                              const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt msb = get_msbw(insn);
+   UInt lsb = get_lsbw(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("bstrpick.w %s, %s, %u, %u\n", nameIReg(rd), nameIReg(rj), msb, lsb);
+
+   IRExpr* shl = binop(Iop_Shl32, getIReg32(rj), mkU8(31 - msb));
+   IRExpr* shr = binop(Iop_Shr32, shl, mkU8(31 - msb + lsb));
+   putIReg(rd, extendS(Ity_I32, shr));
+
+   return True;
 }
 
 static Bool gen_bstrins_d ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt msb = get_msbd(insn);
+   UInt lsb = get_lsbd(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("bstrins.d %s, %s, %u, %u\n", nameIReg(rd), nameIReg(rj), msb, lsb);
+
+   IRTemp tmp = newTemp(Ity_I64);
+   assign(tmp, getIReg64(rd));
+   IRExpr* shl1;
+   if (msb == 63) {
+      shl1 = mkU64(0);
+   } else {
+      IRExpr* shr1 = binop(Iop_Shr64, mkexpr(tmp), mkU8(msb + 1));
+      shl1 = binop(Iop_Shl64, shr1, mkU8(msb + 1));
+   }
+   IRExpr* shl2 = binop(Iop_Shl64, getIReg64(rj), mkU8(63 - msb + lsb));
+   IRExpr* shr2 = binop(Iop_Shr64, shl2, mkU8(63 - msb));
+   IRExpr* shr3;
+   if (lsb == 0) {
+      shr3 = mkU64(0);
+   } else {
+      IRExpr* shl3 = binop(Iop_Shl64, mkexpr(tmp), mkU8(64 - lsb));
+      shr3 = binop(Iop_Shr64, shl3, mkU8(64 - lsb));
+   }
+   IRExpr* or = binop(Iop_Or64, shl1, shr2);
+   putIReg(rd, binop(Iop_Or64, or, shr3));
+
+   return True;
 }
 
 static Bool gen_bstrpick_d ( DisResult* dres, UInt insn,
                              const VexArchInfo* archinfo,
                              const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt msb = get_msbd(insn);
+   UInt lsb = get_lsbd(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("bstrpick.d %s, %s, %u, %u\n", nameIReg(rd), nameIReg(rj), msb, lsb);
+
+   IRExpr* shl = binop(Iop_Shl64, getIReg64(rj), mkU8(63 - msb));
+   putIReg(rd, binop(Iop_Shr64, shl, mkU8(63 - msb + lsb)));
+
+   return True;
 }
 
 
-- 
2.39.1


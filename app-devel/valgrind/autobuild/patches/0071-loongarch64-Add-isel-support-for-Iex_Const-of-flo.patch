From b04f8ed067e6db88c8148c7855a608195c18da1e Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Tue, 22 Mar 2022 17:20:17 +0800
Subject: [PATCH v4 071/123] loongarch64: Add isel support for Iex_Const of
 floating point expressions

---
 VEX/priv/host_loongarch64_isel.c | 25 +++++++++++++++++++++++--
 1 file changed, 23 insertions(+), 2 deletions(-)

diff --git a/VEX/priv/host_loongarch64_isel.c b/VEX/priv/host_loongarch64_isel.c
index d559fc156..e4e4ff8fd 100644
--- a/VEX/priv/host_loongarch64_isel.c
+++ b/VEX/priv/host_loongarch64_isel.c
@@ -1791,8 +1791,29 @@ static HReg iselFltExpr_wrk ( ISelEnv* env, IRExpr* e )
       }
 
       /* --------- LITERAL --------- */
-      case Iex_Const:
-         break;
+      case Iex_Const: {
+         /* Just handle the one case. */
+         IRConst* con = e->Iex.Const.con;
+         if (con->tag == Ico_F32i && con->Ico.F32i == 1) {
+            HReg          tmp = newVRegI(env);
+            HReg          dst = newVRegF(env);
+            LOONGARCH64RI* ri = LOONGARCH64RI_I(1, 12, True);
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_ADDI_W, ri, hregZERO(), tmp));
+            addInstr(env, LOONGARCH64Instr_FpMove(LAfpmove_MOVGR2FR_W, tmp, dst));
+            addInstr(env, LOONGARCH64Instr_FpUnary(LAfpun_FFINT_S_W, dst, dst));
+            return dst;
+         } else if (con->tag == Ico_F64i && con->Ico.F64i == 1) {
+            HReg          tmp = newVRegI(env);
+            HReg          dst = newVRegF(env);
+            LOONGARCH64RI* ri = LOONGARCH64RI_I(1, 12, True);
+            addInstr(env, LOONGARCH64Instr_Binary(LAbin_ADDI_D, ri, hregZERO(), tmp));
+            addInstr(env, LOONGARCH64Instr_FpMove(LAfpmove_MOVGR2FR_D, tmp, dst));
+            addInstr(env, LOONGARCH64Instr_FpUnary(LAfpun_FFINT_D_L, dst, dst));
+            return dst;
+         } else {
+            goto irreducible;
+         }
+      }
 
       default:
          break;
-- 
2.39.1


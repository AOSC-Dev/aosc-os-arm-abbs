From 63bdfd48e1c558759bb89287eedb2b748d042f7d Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Thu, 31 Mar 2022 09:38:19 +0800
Subject: [PATCH v4 103/123] loongarch64: Implement tests for atomic_incs of
 memcheck

---
 memcheck/tests/atomic_incs.c | 85 ++++++++++++++++++++++++++++++++----
 1 file changed, 77 insertions(+), 8 deletions(-)

diff --git a/memcheck/tests/atomic_incs.c b/memcheck/tests/atomic_incs.c
index 83deeafca..8c0055082 100644
--- a/memcheck/tests/atomic_incs.c
+++ b/memcheck/tests/atomic_incs.c
@@ -246,8 +246,28 @@ __attribute__((noinline)) void atomic_add_8bit ( char* p, int n )
    } while (block[2] != 1);
 #endif
 #elif defined(VGA_loongarch64)
-   /* TODO */
-   assert(0);
+   unsigned long long int block[3]
+      = { (unsigned long long int)(Addr)p, (unsigned long long int)n, 0x0ULL };
+   do {
+      __asm__ __volatile__(
+         "move  $t0, %0         \n\t"
+         "ld.d  $t1, $t0, 0     \n\t"  // p
+         "ld.d  $t2, $t0, 8     \n\t"  // n
+         "andi  $t2, $t2, 0xff  \n\t"  // n = n & 0xff
+         "li.d  $s0, 0xff       \n\t"
+         "nor   $s0, $s0, $zero \n\t"  // $s0 = 0xffffff00
+         "ll.d  $t3, $t1, 0     \n\t"  // $t3 = old value
+         "and   $s0, $s0, $t3   \n\t"  // $s0 = $t3 & 0xffffff00
+         "add.d $t3, $t3, $t2   \n\t"  // $t3 = $t3 + n
+         "andi  $t3, $t3, 0xff  \n\t"  // $t3 = $t3 & 0xff
+         "or    $t3, $t3, $s0   \n\t"  // $t3 = $t3 | $s0
+         "sc.d  $t3, $t1, 0     \n\t"
+         "st.d  $t3, $t0, 16    \n\t"  // save result
+         : /*out*/
+         : /*in*/ "r" (&block[0])
+         : /*trash*/ "t0", "t1", "t2", "t3", "s0", "memory"
+      );
+   } while (block[2] != 1);
 #else
 # error "Unsupported arch"
 #endif
@@ -465,8 +485,29 @@ __attribute__((noinline)) void atomic_add_16bit ( short* p, int n )
    } while (block[2] != 1);
 #endif
 #elif defined(VGA_loongarch64)
-   /* TODO */
-   assert(0);
+   unsigned long long int block[3]
+      = { (unsigned long long int)(Addr)p, (unsigned long long int)n, 0x0ULL };
+   do {
+      __asm__ __volatile__(
+         "move  $t0, %0         \n\t"
+         "ld.d  $t1, $t0, 0     \n\t"  // p
+         "ld.d  $t2, $t0, 8     \n\t"  // n
+         "li.d  $s0, 0xffff     \n\t"
+         "and   $t2, $t2, $s0   \n\t"  // n = n & 0xffff
+         "nor   $s0, $s0, $zero \n\t"  // $s0= 0xffff0000
+         "ll.d  $t3, $t1, 0     \n\t"  // $t3 = old value
+         "and   $s0, $s0, $t3   \n\t"  // $s0 = $t3 & 0xffff0000
+         "add.d $t3, $t3, $t2   \n\t"  // $t3 = $t3 + n
+         "li.d  $t2, 0xffff     \n\t"
+         "and   $t3, $t3, $t2   \n\t"  // $t3 = $t3 & 0xffff
+         "or    $t3, $t3, $s0   \n\t"  // $t3 = $t3 | $s0
+         "sc.d  $t3, $t1, 0     \n\t"
+         "st.d  $t3, $t0, 16    \n\t"  // save result
+         : /*out*/
+         : /*in*/ "r" (&block[0])
+         : /*trash*/ "t0", "t1", "t2", "t3", "s0", "memory"
+      );
+   } while (block[2] != 1);
 #else
 # error "Unsupported arch"
 #endif
@@ -623,8 +664,22 @@ __attribute__((noinline)) void atomic_add_32bit ( int* p, int n )
       );
    } while (block[2] != 1);
 #elif defined(VGA_loongarch64)
-   /* TODO */
-   assert(0);
+   unsigned long long int block[3]
+      = { (unsigned long long int)(Addr)p, (unsigned long long int)n, 0x0ULL };
+   do {
+      __asm__ __volatile__(
+         "move  $t0, %0       \n\t"
+         "ld.d  $t1, $t0, 0   \n\t"  // p
+         "ld.d  $t2, $t0, 8   \n\t"  // n
+         "ll.d  $t3, $t1, 0   \n\t"
+         "add.d $t3, $t3, $t2 \n\t"
+         "sc.d  $t3, $t1, 0   \n\t"
+         "st.d  $t3, $t0, 16  \n\t"
+         : /*out*/
+         : /*in*/ "r" (&block[0])
+         : /*trash*/ "t0", "t1", "t2", "t3", "memory"
+      );
+   } while (block[2] != 1);
 #else
 # error "Unsupported arch"
 #endif
@@ -728,8 +783,22 @@ __attribute__((noinline)) void atomic_add_64bit ( long long int* p, int n )
       );
    } while (block[2] != 1);
 #elif defined(VGA_loongarch64)
-   /* TODO */
-   assert(0);
+   unsigned long long int block[3]
+      = { (unsigned long long int)(Addr)p, (unsigned long long int)n, 0x0ULL };
+   do {
+      __asm__ __volatile__(
+         "move  $t0, %0       \n\t"
+         "ld.d  $t1, $t0, 0   \n\t" // p
+         "ld.d  $t2, $t0, 8   \n\t" // n
+         "ll.d  $t3, $t1, 0   \n\t"
+         "add.d $t3, $t3, $t2 \n\t"
+         "sc.d  $t3, $t1, 0   \n\t"
+         "st.d  $t3, $t0, 16  \n\t"
+         : /*out*/
+         : /*in*/ "r" (&block[0])
+         : /*trash*/ "t0", "t1", "t2", "t3", "memory"
+      );
+   } while (block[2] != 1);
 #else
 # error "Unsupported arch"
 #endif
-- 
2.39.1


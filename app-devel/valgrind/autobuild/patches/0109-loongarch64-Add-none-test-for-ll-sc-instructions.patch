From 80d41c6883074d3d19df1143ba3707bf7a8b74d5 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Wed, 13 Jul 2022 15:26:01 +0800
Subject: [PATCH v4 109/123] loongarch64: Add none test for ll/sc instructions

---
 .gitignore                             |  1 +
 none/tests/loongarch64/Makefile.am     |  2 +
 none/tests/loongarch64/llsc.c          | 69 ++++++++++++++++++++++++++
 none/tests/loongarch64/llsc.stderr.exp |  0
 none/tests/loongarch64/llsc.stdout.exp |  6 +++
 none/tests/loongarch64/llsc.vgtest     |  2 +
 6 files changed, 80 insertions(+)
 create mode 100644 none/tests/loongarch64/llsc.c
 create mode 100644 none/tests/loongarch64/llsc.stderr.exp
 create mode 100644 none/tests/loongarch64/llsc.stdout.exp
 create mode 100644 none/tests/loongarch64/llsc.vgtest

diff --git a/.gitignore b/.gitignore
index e58f18dd6..4ee856328 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2055,6 +2055,7 @@
 /none/tests/loongarch64/branch
 /none/tests/loongarch64/float
 /none/tests/loongarch64/integer
+/none/tests/loongarch64/llsc
 /none/tests/loongarch64/memory
 
 # /none/tests/scripts/
diff --git a/none/tests/loongarch64/Makefile.am b/none/tests/loongarch64/Makefile.am
index 2878271a4..f5287410d 100644
--- a/none/tests/loongarch64/Makefile.am
+++ b/none/tests/loongarch64/Makefile.am
@@ -8,6 +8,7 @@ EXTRA_DIST = \
 	branch.stdout.exp branch.stderr.exp branch.vgtest \
 	float.stdout.exp float.stderr.exp float.vgtest \
 	integer.stdout.exp integer.stderr.exp integer.vgtest \
+	llsc.stdout.exp llsc.stderr.exp llsc.vgtest \
 	memory.stdout.exp memory.stderr.exp memory.vgtest
 
 check_PROGRAMS = \
@@ -16,6 +17,7 @@ check_PROGRAMS = \
 	branch \
 	float \
 	integer \
+	llsc \
 	memory
 
 AM_CFLAGS    += @FLAG_M64@
diff --git a/none/tests/loongarch64/llsc.c b/none/tests/loongarch64/llsc.c
new file mode 100644
index 000000000..fcb7e3cb3
--- /dev/null
+++ b/none/tests/loongarch64/llsc.c
@@ -0,0 +1,69 @@
+#include <stdio.h>
+
+#define TESTINST_LLSC_W(insn, res, addr, offs) \
+   {                                           \
+      __asm__ __volatile__(                    \
+         "move $t1, %1             \n\t"       \
+         "ll.w $t0, $t1, %2        \n\t"       \
+         insn "                    \n\t"       \
+         "sc.w $t0, $t1, %2        \n\t"       \
+         "move %0, $t0             \n\t"       \
+         : "=r" (res)                          \
+         : "r" (addr), "i" (offs)              \
+         : "$t0", "$t1", "memory");            \
+   }
+
+#define TESTINST_LLSC_D(insn, res, addr, offs) \
+   {                                           \
+      __asm__ __volatile__(                    \
+         "move $t1, %1             \n\t"       \
+         "ll.d $t0, $t1, %2        \n\t"       \
+         insn "                    \n\t"       \
+         "sc.d $t0, $t1, %2        \n\t"       \
+         "move %0, $t0             \n\t"       \
+         : "=r" (res)                          \
+         : "r" (addr), "i" (offs)              \
+         : "$t0", "$t1", "memory");            \
+   }
+
+void test(void)
+{
+   int res_i;
+   long res_l;
+   int val_i[2] = { 6, 10 };
+   long val_l[2] = { 6, 10 };
+
+   /* ---------------- ll.w rd, rj, si14 ---------------- */
+   /* ---------------- sc.w rd, rj, si14 ---------------- */
+   printf("ll.w sc.w ::\n");
+
+   do {
+      TESTINST_LLSC_W("addi.w $t0, $t0, 1", res_i, val_i, 0);
+   } while (res_i != 1);
+   printf("res: %d val: %d\n", res_i, val_i[0]);
+
+   do {
+      TESTINST_LLSC_W("sub.w $t0, $zero, $t0", res_i, val_i, 4);
+   } while (res_i != 1);
+   printf("res: %d val: %d\n", res_i, val_i[1]);
+
+   /* ---------------- ll.d rd, rj, si14 ---------------- */
+   /* ---------------- sc.d rd, rj, si14 ---------------- */
+   printf("ll.d sc.d ::\n");
+
+   do {
+      TESTINST_LLSC_D("addi.d $t0, $t0, 1", res_l, val_l, 0);
+   } while (res_l != 1);
+   printf("res: %ld val: %ld\n", res_l, val_l[0]);
+
+   do {
+      TESTINST_LLSC_D("sub.d $t0, $zero, $t0", res_l, val_l, 8);
+   } while (res_l != 1);
+   printf("res: %ld val: %ld\n", res_l, val_l[1]);
+}
+
+int main(void)
+{
+   test();
+   return 0;
+}
diff --git a/none/tests/loongarch64/llsc.stderr.exp b/none/tests/loongarch64/llsc.stderr.exp
new file mode 100644
index 000000000..e69de29bb
diff --git a/none/tests/loongarch64/llsc.stdout.exp b/none/tests/loongarch64/llsc.stdout.exp
new file mode 100644
index 000000000..dd1925156
--- /dev/null
+++ b/none/tests/loongarch64/llsc.stdout.exp
@@ -0,0 +1,6 @@
+ll.w sc.w ::
+res: 1 val: 7
+res: 1 val: -10
+ll.d sc.d ::
+res: 1 val: 7
+res: 1 val: -10
diff --git a/none/tests/loongarch64/llsc.vgtest b/none/tests/loongarch64/llsc.vgtest
new file mode 100644
index 000000000..685c27911
--- /dev/null
+++ b/none/tests/loongarch64/llsc.vgtest
@@ -0,0 +1,2 @@
+prog: llsc
+vgopts: -q
-- 
2.39.1


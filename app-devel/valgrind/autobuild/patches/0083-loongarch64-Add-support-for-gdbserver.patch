From 8de4260613c2fe2371f0d5194cbc4aba99620a35 Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Wed, 23 Mar 2022 16:30:30 +0800
Subject: [PATCH v4 083/123] loongarch64: Add support for gdbserver

---
 coregrind/Makefile.am                         |  10 +-
 .../loongarch-base64-valgrind-s1.xml          |  45 ++++
 .../loongarch-base64-valgrind-s2.xml          |  45 ++++
 coregrind/m_gdbserver/loongarch-base64.xml    |  45 ++++
 .../loongarch-fpu64-valgrind-s1.xml           |  57 +++++
 .../loongarch-fpu64-valgrind-s2.xml           |  57 +++++
 coregrind/m_gdbserver/loongarch-fpu64.xml     |  57 +++++
 .../loongarch64-linux-valgrind.xml            |  18 ++
 coregrind/m_gdbserver/loongarch64-linux.xml   |  14 ++
 .../m_gdbserver/valgrind-low-loongarch64.c    | 232 +++++++++++++++++-
 10 files changed, 578 insertions(+), 2 deletions(-)
 create mode 100644 coregrind/m_gdbserver/loongarch-base64-valgrind-s1.xml
 create mode 100644 coregrind/m_gdbserver/loongarch-base64-valgrind-s2.xml
 create mode 100644 coregrind/m_gdbserver/loongarch-base64.xml
 create mode 100644 coregrind/m_gdbserver/loongarch-fpu64-valgrind-s1.xml
 create mode 100644 coregrind/m_gdbserver/loongarch-fpu64-valgrind-s2.xml
 create mode 100644 coregrind/m_gdbserver/loongarch-fpu64.xml
 create mode 100644 coregrind/m_gdbserver/loongarch64-linux-valgrind.xml
 create mode 100644 coregrind/m_gdbserver/loongarch64-linux.xml

diff --git a/coregrind/Makefile.am b/coregrind/Makefile.am
index 5c747685d..b958f6aa0 100644
--- a/coregrind/Makefile.am
+++ b/coregrind/Makefile.am
@@ -766,7 +766,15 @@ GDBSERVER_XML_FILES = \
 	m_gdbserver/mips64-linux-valgrind.xml \
 	m_gdbserver/mips64-fpu-valgrind-s1.xml \
 	m_gdbserver/mips64-fpu-valgrind-s2.xml \
-	m_gdbserver/mips64-fpu.xml
+	m_gdbserver/mips64-fpu.xml \
+	m_gdbserver/loongarch-base64.xml \
+	m_gdbserver/loongarch-fpu64.xml \
+	m_gdbserver/loongarch64-linux.xml \
+	m_gdbserver/loongarch-base64-valgrind-s1.xml \
+	m_gdbserver/loongarch-base64-valgrind-s2.xml \
+	m_gdbserver/loongarch-fpu64-valgrind-s1.xml \
+	m_gdbserver/loongarch-fpu64-valgrind-s2.xml \
+	m_gdbserver/loongarch64-linux-valgrind.xml
 
 # so as to make sure these get copied into the install tree
 vglibdir = $(pkglibexecdir)
diff --git a/coregrind/m_gdbserver/loongarch-base64-valgrind-s1.xml b/coregrind/m_gdbserver/loongarch-base64-valgrind-s1.xml
new file mode 100644
index 000000000..cab700cca
--- /dev/null
+++ b/coregrind/m_gdbserver/loongarch-base64-valgrind-s1.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.loongarch.base">
+  <reg name="r0s1" bitsize="64" type="uint64" group="general" regnum="0"/>
+  <reg name="r1s1" bitsize="64" type="code_ptr" group="general"/>
+  <reg name="r2s1" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r3s1" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r4s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r5s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r6s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r7s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r8s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r9s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r10s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r11s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r12s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r13s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r14s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r15s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r16s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r17s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r18s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r19s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r20s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r21s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r22s1" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r23s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r24s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r25s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r26s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r27s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r28s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r29s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r30s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="r31s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="orig_a0s1" bitsize="64" type="uint64" group="general"/>
+  <reg name="pcs1" bitsize="64" type="code_ptr" group="general"/>
+  <reg name="badvs1" bitsize="64" type="code_ptr" group="general"/>
+</feature>
diff --git a/coregrind/m_gdbserver/loongarch-base64-valgrind-s2.xml b/coregrind/m_gdbserver/loongarch-base64-valgrind-s2.xml
new file mode 100644
index 000000000..cbacbbbbe
--- /dev/null
+++ b/coregrind/m_gdbserver/loongarch-base64-valgrind-s2.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.loongarch.base">
+  <reg name="r0s2" bitsize="64" type="uint64" group="general" regnum="0"/>
+  <reg name="r1s2" bitsize="64" type="code_ptr" group="general"/>
+  <reg name="r2s2" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r3s2" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r4s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r5s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r6s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r7s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r8s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r9s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r10s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r11s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r12s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r13s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r14s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r15s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r16s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r17s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r18s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r19s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r20s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r21s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r22s2" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r23s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r24s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r25s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r26s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r27s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r28s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r29s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r30s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="r31s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="orig_a0s2" bitsize="64" type="uint64" group="general"/>
+  <reg name="pcs2" bitsize="64" type="code_ptr" group="general"/>
+  <reg name="badvs2" bitsize="64" type="code_ptr" group="general"/>
+</feature>
diff --git a/coregrind/m_gdbserver/loongarch-base64.xml b/coregrind/m_gdbserver/loongarch-base64.xml
new file mode 100644
index 000000000..fadca8b9e
--- /dev/null
+++ b/coregrind/m_gdbserver/loongarch-base64.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.loongarch.base">
+  <reg name="r0" bitsize="64" type="uint64" group="general" regnum="0"/>
+  <reg name="r1" bitsize="64" type="code_ptr" group="general"/>
+  <reg name="r2" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r3" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r4" bitsize="64" type="uint64" group="general"/>
+  <reg name="r5" bitsize="64" type="uint64" group="general"/>
+  <reg name="r6" bitsize="64" type="uint64" group="general"/>
+  <reg name="r7" bitsize="64" type="uint64" group="general"/>
+  <reg name="r8" bitsize="64" type="uint64" group="general"/>
+  <reg name="r9" bitsize="64" type="uint64" group="general"/>
+  <reg name="r10" bitsize="64" type="uint64" group="general"/>
+  <reg name="r11" bitsize="64" type="uint64" group="general"/>
+  <reg name="r12" bitsize="64" type="uint64" group="general"/>
+  <reg name="r13" bitsize="64" type="uint64" group="general"/>
+  <reg name="r14" bitsize="64" type="uint64" group="general"/>
+  <reg name="r15" bitsize="64" type="uint64" group="general"/>
+  <reg name="r16" bitsize="64" type="uint64" group="general"/>
+  <reg name="r17" bitsize="64" type="uint64" group="general"/>
+  <reg name="r18" bitsize="64" type="uint64" group="general"/>
+  <reg name="r19" bitsize="64" type="uint64" group="general"/>
+  <reg name="r20" bitsize="64" type="uint64" group="general"/>
+  <reg name="r21" bitsize="64" type="uint64" group="general"/>
+  <reg name="r22" bitsize="64" type="data_ptr" group="general"/>
+  <reg name="r23" bitsize="64" type="uint64" group="general"/>
+  <reg name="r24" bitsize="64" type="uint64" group="general"/>
+  <reg name="r25" bitsize="64" type="uint64" group="general"/>
+  <reg name="r26" bitsize="64" type="uint64" group="general"/>
+  <reg name="r27" bitsize="64" type="uint64" group="general"/>
+  <reg name="r28" bitsize="64" type="uint64" group="general"/>
+  <reg name="r29" bitsize="64" type="uint64" group="general"/>
+  <reg name="r30" bitsize="64" type="uint64" group="general"/>
+  <reg name="r31" bitsize="64" type="uint64" group="general"/>
+  <reg name="orig_a0" bitsize="64" type="uint64" group="general"/>
+  <reg name="pc" bitsize="64" type="code_ptr" group="general"/>
+  <reg name="badv" bitsize="64" type="code_ptr" group="general"/>
+</feature>
diff --git a/coregrind/m_gdbserver/loongarch-fpu64-valgrind-s1.xml b/coregrind/m_gdbserver/loongarch-fpu64-valgrind-s1.xml
new file mode 100644
index 000000000..b5c7cab50
--- /dev/null
+++ b/coregrind/m_gdbserver/loongarch-fpu64-valgrind-s1.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.loongarch.fpu.valgrind.s1">
+
+  <union id="fpu64type">
+    <field name="f" type="ieee_single"/>
+    <field name="d" type="ieee_double"/>
+  </union>
+
+  <reg name="f0s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f1s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f2s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f3s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f4s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f5s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f6s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f7s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f8s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f9s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f10s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f11s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f12s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f13s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f14s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f15s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f16s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f17s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f18s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f19s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f20s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f21s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f22s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f23s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f24s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f25s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f26s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f27s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f28s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f29s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f30s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f31s1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="fcc0s1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc1s1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc2s1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc3s1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc4s1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc5s1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc6s1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc7s1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcsrs1" bitsize="32" type="uint32" group="float"/>
+</feature>
diff --git a/coregrind/m_gdbserver/loongarch-fpu64-valgrind-s2.xml b/coregrind/m_gdbserver/loongarch-fpu64-valgrind-s2.xml
new file mode 100644
index 000000000..501660ebb
--- /dev/null
+++ b/coregrind/m_gdbserver/loongarch-fpu64-valgrind-s2.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.loongarch.fpu.valgrind.s2">
+
+  <union id="fpu64type">
+    <field name="f" type="ieee_single"/>
+    <field name="d" type="ieee_double"/>
+  </union>
+
+  <reg name="f0s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f1s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f2s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f3s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f4s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f5s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f6s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f7s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f8s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f9s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f10s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f11s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f12s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f13s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f14s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f15s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f16s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f17s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f18s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f19s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f20s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f21s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f22s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f23s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f24s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f25s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f26s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f27s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f28s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f29s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f30s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f31s2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="fcc0s2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc1s2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc2s2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc3s2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc4s2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc5s2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc6s2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc7s2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcsrs2" bitsize="32" type="uint32" group="float"/>
+</feature>
diff --git a/coregrind/m_gdbserver/loongarch-fpu64.xml b/coregrind/m_gdbserver/loongarch-fpu64.xml
new file mode 100644
index 000000000..74ab55a01
--- /dev/null
+++ b/coregrind/m_gdbserver/loongarch-fpu64.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<feature name="org.gnu.gdb.loongarch.fpu">
+
+  <union id="fpu64type">
+    <field name="f" type="ieee_single"/>
+    <field name="d" type="ieee_double"/>
+  </union>
+
+  <reg name="f0" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f1" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f2" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f3" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f4" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f5" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f6" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f7" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f8" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f9" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f10" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f11" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f12" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f13" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f14" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f15" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f16" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f17" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f18" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f19" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f20" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f21" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f22" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f23" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f24" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f25" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f26" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f27" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f28" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f29" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f30" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="f31" bitsize="64" type="fpu64type" group="float"/>
+  <reg name="fcc0" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc1" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc2" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc3" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc4" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc5" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc6" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcc7" bitsize="8" type="uint8" group="float"/>
+  <reg name="fcsr" bitsize="32" type="uint32" group="float"/>
+</feature>
diff --git a/coregrind/m_gdbserver/loongarch64-linux-valgrind.xml b/coregrind/m_gdbserver/loongarch64-linux-valgrind.xml
new file mode 100644
index 000000000..8915a72a9
--- /dev/null
+++ b/coregrind/m_gdbserver/loongarch64-linux-valgrind.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>loongarch</architecture>
+  <osabi>GNU/Linux</osabi>
+  <xi:include href="loongarch-base64.xml"/>
+  <xi:include href="loongarch-fpu64.xml"/>
+  <xi:include href="loongarch-base64-valgrind-s1.xml"/>
+  <xi:include href="loongarch-fpu64-valgrind-s1.xml"/>
+  <xi:include href="loongarch-base64-valgrind-s2.xml"/>
+  <xi:include href="loongarch-fpu64-valgrind-s2.xml"/>
+</target>
diff --git a/coregrind/m_gdbserver/loongarch64-linux.xml b/coregrind/m_gdbserver/loongarch64-linux.xml
new file mode 100644
index 000000000..f1eed8338
--- /dev/null
+++ b/coregrind/m_gdbserver/loongarch64-linux.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0"?>
+<!-- Copyright (C) 2007-2018 Free Software Foundation, Inc.
+
+     Copying and distribution of this file, with or without modification,
+     are permitted in any medium without royalty provided the copyright
+     notice and this notice are preserved.  -->
+
+<!DOCTYPE feature SYSTEM "gdb-target.dtd">
+<target>
+  <architecture>loongarch</architecture>
+  <osabi>GNU/Linux</osabi>
+  <xi:include href="loongarch-base64.xml"/>
+  <xi:include href="loongarch-fpu64.xml"/>
+</target>
diff --git a/coregrind/m_gdbserver/valgrind-low-loongarch64.c b/coregrind/m_gdbserver/valgrind-low-loongarch64.c
index 9e5948d68..fcbfe2b8c 100644
--- a/coregrind/m_gdbserver/valgrind-low-loongarch64.c
+++ b/coregrind/m_gdbserver/valgrind-low-loongarch64.c
@@ -36,7 +36,237 @@
 
 #include "libvex_guest_loongarch64.h"
 
+static struct reg regs[] = {
+   { "r0",      0,    64 },
+   { "r1",      64,   64 },
+   { "r2",      128,  64 },
+   { "r3",      192,  64 },
+   { "r4",      256,  64 },
+   { "r5",      320,  64 },
+   { "r6",      384,  64 },
+   { "r7",      448,  64 },
+   { "r8",      512,  64 },
+   { "r9",      576,  64 },
+   { "r10",     640,  64 },
+   { "r11",     704,  64 },
+   { "r12",     768,  64 },
+   { "r13",     832,  64 },
+   { "r14",     896,  64 },
+   { "r15",     960,  64 },
+   { "r16",     1024, 64 },
+   { "r17",     1088, 64 },
+   { "r18",     1152, 64 },
+   { "r19",     1216, 64 },
+   { "r20",     1280, 64 },
+   { "r21",     1344, 64 },
+   { "r22",     1408, 64 },
+   { "r23",     1472, 64 },
+   { "r24",     1536, 64 },
+   { "r25",     1600, 64 },
+   { "r26",     1664, 64 },
+   { "r27",     1728, 64 },
+   { "r28",     1792, 64 },
+   { "r29",     1856, 64 },
+   { "r30",     1920, 64 },
+   { "r31",     1984, 64 },
+   { "orig_a0", 2048, 64 },
+   { "pc",      2112, 64 },
+   { "badv",    2176, 64 },
+   { "f0",      2240, 64 },
+   { "f1",      2304, 64 },
+   { "f2",      2368, 64 },
+   { "f3",      2432, 64 },
+   { "f4",      2496, 64 },
+   { "f5",      2560, 64 },
+   { "f6",      2624, 64 },
+   { "f7",      2688, 64 },
+   { "f8",      2752, 64 },
+   { "f9",      2816, 64 },
+   { "f10",     2880, 64 },
+   { "f11",     2944, 64 },
+   { "f12",     3008, 64 },
+   { "f13",     3072, 64 },
+   { "f14",     3136, 64 },
+   { "f15",     3200, 64 },
+   { "f16",     3264, 64 },
+   { "f17",     3328, 64 },
+   { "f18",     3392, 64 },
+   { "f19",     3456, 64 },
+   { "f20",     3520, 64 },
+   { "f21",     3584, 64 },
+   { "f22",     3648, 64 },
+   { "f23",     3712, 64 },
+   { "f24",     3776, 64 },
+   { "f25",     3840, 64 },
+   { "f26",     3904, 64 },
+   { "f27",     3968, 64 },
+   { "f28",     4032, 64 },
+   { "f29",     4096, 64 },
+   { "f30",     4160, 64 },
+   { "f31",     4224, 64 },
+   { "fcc0",    4288, 8  },
+   { "fcc1",    4296, 8  },
+   { "fcc2",    4304, 8  },
+   { "fcc3",    4312, 8  },
+   { "fcc4",    4320, 8  },
+   { "fcc5",    4328, 8  },
+   { "fcc6",    4336, 8  },
+   { "fcc7",    4344, 8  },
+   { "fcsr",    4352, 32 }
+};
+
+#define num_regs (sizeof (regs) / sizeof (regs[0]))
+
+static const char* expedite_regs[] = { "r3", "pc", NULL };
+
+static
+CORE_ADDR get_pc (void)
+{
+   unsigned long pc;
+
+   collect_register_by_name ("pc", &pc);
+
+   dlog(1, "stop pc is %p\n", (void*) pc);
+   return pc;
+}
+
+static
+void set_pc (CORE_ADDR newpc)
+{
+   supply_register_by_name ("pc", &newpc);
+}
+
+/* store registers in the guest state (gdbserver_to_valgrind)
+   or fetch register from the guest state (valgrind_to_gdbserver). */
+static
+void transfer_register (ThreadId tid, int abs_regno, void* buf,
+                        transfer_direction dir, int size, Bool* mod)
+{
+   ThreadState* tst = VG_(get_ThreadState)(tid);
+   int set = abs_regno / num_regs;
+   int regno = abs_regno % num_regs;
+   *mod = False;
+
+   VexGuestLOONGARCH64State* loongarch64 = (VexGuestLOONGARCH64State*) get_arch (set, tst);
+
+   switch (regno) {
+   // numbers here have to match the order of regs above
+   // Attention: gdb order does not match valgrind order.
+   case 0:  VG_(transfer) (&loongarch64->guest_R0,   buf, dir, size, mod); break;
+   case 1:  VG_(transfer) (&loongarch64->guest_R1,   buf, dir, size, mod); break;
+   case 2:  VG_(transfer) (&loongarch64->guest_R2,   buf, dir, size, mod); break;
+   case 3:  VG_(transfer) (&loongarch64->guest_R3,   buf, dir, size, mod); break;
+   case 4:  VG_(transfer) (&loongarch64->guest_R4,   buf, dir, size, mod); break;
+   case 5:  VG_(transfer) (&loongarch64->guest_R5,   buf, dir, size, mod); break;
+   case 6:  VG_(transfer) (&loongarch64->guest_R6,   buf, dir, size, mod); break;
+   case 7:  VG_(transfer) (&loongarch64->guest_R7,   buf, dir, size, mod); break;
+   case 8:  VG_(transfer) (&loongarch64->guest_R8,   buf, dir, size, mod); break;
+   case 9:  VG_(transfer) (&loongarch64->guest_R9,   buf, dir, size, mod); break;
+   case 10: VG_(transfer) (&loongarch64->guest_R10,  buf, dir, size, mod); break;
+   case 11: VG_(transfer) (&loongarch64->guest_R11,  buf, dir, size, mod); break;
+   case 12: VG_(transfer) (&loongarch64->guest_R12,  buf, dir, size, mod); break;
+   case 13: VG_(transfer) (&loongarch64->guest_R13,  buf, dir, size, mod); break;
+   case 14: VG_(transfer) (&loongarch64->guest_R14,  buf, dir, size, mod); break;
+   case 15: VG_(transfer) (&loongarch64->guest_R15,  buf, dir, size, mod); break;
+   case 16: VG_(transfer) (&loongarch64->guest_R16,  buf, dir, size, mod); break;
+   case 17: VG_(transfer) (&loongarch64->guest_R17,  buf, dir, size, mod); break;
+   case 18: VG_(transfer) (&loongarch64->guest_R18,  buf, dir, size, mod); break;
+   case 19: VG_(transfer) (&loongarch64->guest_R19,  buf, dir, size, mod); break;
+   case 20: VG_(transfer) (&loongarch64->guest_R20,  buf, dir, size, mod); break;
+   case 21: VG_(transfer) (&loongarch64->guest_R21,  buf, dir, size, mod); break;
+   case 22: VG_(transfer) (&loongarch64->guest_R22,  buf, dir, size, mod); break;
+   case 23: VG_(transfer) (&loongarch64->guest_R23,  buf, dir, size, mod); break;
+   case 24: VG_(transfer) (&loongarch64->guest_R24,  buf, dir, size, mod); break;
+   case 25: VG_(transfer) (&loongarch64->guest_R25,  buf, dir, size, mod); break;
+   case 26: VG_(transfer) (&loongarch64->guest_R26,  buf, dir, size, mod); break;
+   case 27: VG_(transfer) (&loongarch64->guest_R27,  buf, dir, size, mod); break;
+   case 28: VG_(transfer) (&loongarch64->guest_R28,  buf, dir, size, mod); break;
+   case 29: VG_(transfer) (&loongarch64->guest_R29,  buf, dir, size, mod); break;
+   case 30: VG_(transfer) (&loongarch64->guest_R30,  buf, dir, size, mod); break;
+   case 31: VG_(transfer) (&loongarch64->guest_R31,  buf, dir, size, mod); break;
+   case 32: *mod = False; break; // GDBTD?? arg0
+   case 33: VG_(transfer) (&loongarch64->guest_PC,   buf, dir, size, mod); break;
+   case 34: *mod = False; break; // GDBTD?? badvaddr
+   case 35: VG_(transfer) (&loongarch64->guest_F0,   buf, dir, size, mod); break;
+   case 36: VG_(transfer) (&loongarch64->guest_F1,   buf, dir, size, mod); break;
+   case 37: VG_(transfer) (&loongarch64->guest_F2,   buf, dir, size, mod); break;
+   case 38: VG_(transfer) (&loongarch64->guest_F3,   buf, dir, size, mod); break;
+   case 39: VG_(transfer) (&loongarch64->guest_F4,   buf, dir, size, mod); break;
+   case 40: VG_(transfer) (&loongarch64->guest_F5,   buf, dir, size, mod); break;
+   case 41: VG_(transfer) (&loongarch64->guest_F6,   buf, dir, size, mod); break;
+   case 42: VG_(transfer) (&loongarch64->guest_F7,   buf, dir, size, mod); break;
+   case 43: VG_(transfer) (&loongarch64->guest_F8,   buf, dir, size, mod); break;
+   case 44: VG_(transfer) (&loongarch64->guest_F9,   buf, dir, size, mod); break;
+   case 45: VG_(transfer) (&loongarch64->guest_F10,  buf, dir, size, mod); break;
+   case 46: VG_(transfer) (&loongarch64->guest_F11,  buf, dir, size, mod); break;
+   case 47: VG_(transfer) (&loongarch64->guest_F12,  buf, dir, size, mod); break;
+   case 48: VG_(transfer) (&loongarch64->guest_F13,  buf, dir, size, mod); break;
+   case 49: VG_(transfer) (&loongarch64->guest_F14,  buf, dir, size, mod); break;
+   case 50: VG_(transfer) (&loongarch64->guest_F15,  buf, dir, size, mod); break;
+   case 51: VG_(transfer) (&loongarch64->guest_F16,  buf, dir, size, mod); break;
+   case 52: VG_(transfer) (&loongarch64->guest_F17,  buf, dir, size, mod); break;
+   case 53: VG_(transfer) (&loongarch64->guest_F18,  buf, dir, size, mod); break;
+   case 54: VG_(transfer) (&loongarch64->guest_F19,  buf, dir, size, mod); break;
+   case 55: VG_(transfer) (&loongarch64->guest_F20,  buf, dir, size, mod); break;
+   case 56: VG_(transfer) (&loongarch64->guest_F21,  buf, dir, size, mod); break;
+   case 57: VG_(transfer) (&loongarch64->guest_F22,  buf, dir, size, mod); break;
+   case 58: VG_(transfer) (&loongarch64->guest_F23,  buf, dir, size, mod); break;
+   case 59: VG_(transfer) (&loongarch64->guest_F24,  buf, dir, size, mod); break;
+   case 60: VG_(transfer) (&loongarch64->guest_F25,  buf, dir, size, mod); break;
+   case 61: VG_(transfer) (&loongarch64->guest_F26,  buf, dir, size, mod); break;
+   case 62: VG_(transfer) (&loongarch64->guest_F27,  buf, dir, size, mod); break;
+   case 63: VG_(transfer) (&loongarch64->guest_F28,  buf, dir, size, mod); break;
+   case 64: VG_(transfer) (&loongarch64->guest_F29,  buf, dir, size, mod); break;
+   case 65: VG_(transfer) (&loongarch64->guest_F30,  buf, dir, size, mod); break;
+   case 66: VG_(transfer) (&loongarch64->guest_F31,  buf, dir, size, mod); break;
+   case 67: VG_(transfer) (&loongarch64->guest_FCC0, buf, dir, size, mod); break;
+   case 68: VG_(transfer) (&loongarch64->guest_FCC1, buf, dir, size, mod); break;
+   case 69: VG_(transfer) (&loongarch64->guest_FCC2, buf, dir, size, mod); break;
+   case 70: VG_(transfer) (&loongarch64->guest_FCC3, buf, dir, size, mod); break;
+   case 71: VG_(transfer) (&loongarch64->guest_FCC4, buf, dir, size, mod); break;
+   case 72: VG_(transfer) (&loongarch64->guest_FCC5, buf, dir, size, mod); break;
+   case 73: VG_(transfer) (&loongarch64->guest_FCC6, buf, dir, size, mod); break;
+   case 74: VG_(transfer) (&loongarch64->guest_FCC7, buf, dir, size, mod); break;
+   case 75: VG_(transfer) (&loongarch64->guest_FCSR, buf, dir, size, mod); break;
+   default: vg_assert(0);
+   }
+}
+
+static
+const char* target_xml (Bool shadow_mode)
+{
+   if (shadow_mode) {
+      return "loongarch64-linux-valgrind.xml";
+   } else {
+      return "loongarch64-linux.xml";
+   }
+}
+
+static CORE_ADDR** target_get_dtv (ThreadState* tst)
+{
+   VexGuestLOONGARCH64State* loongarch64 = (VexGuestLOONGARCH64State*)&tst->arch.vex;
+   // Top of LoongArch tcbhead structure is located 0x0 bytes before the value
+   // of $r2. Dtv is the first of two pointers in tcbhead structure.
+   // More details can be found in GLIBC/sysdeps/nptl/tls.h.
+   return (CORE_ADDR**)((CORE_ADDR)loongarch64->guest_R2
+                        - 0x0 - 2 * sizeof(CORE_ADDR));
+}
+
+static struct valgrind_target_ops low_target = {
+   num_regs,
+   regs,
+   3, // SP
+   transfer_register,
+   get_pc,
+   set_pc,
+   "loongarch64",
+   target_xml,
+   target_get_dtv
+};
+
 void loongarch64_init_architecture (struct valgrind_target_ops* target)
 {
-   /* TODO */
+   *target = low_target;
+   set_register_cache (regs, num_regs);
+   gdbserver_expedite_regs = expedite_regs;
 }
-- 
2.39.1


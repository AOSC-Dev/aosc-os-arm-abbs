From dbbb6ea64912e72d311d873d5fd3177c08ae53fa Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Tue, 22 Mar 2022 09:56:33 +0800
Subject: [PATCH v4 050/123] loongarch64: Add isel support for Ist_WrTmp

---
 VEX/priv/host_loongarch64_isel.c | 32 ++++++++++++++++++++++++++++++++
 1 file changed, 32 insertions(+)

diff --git a/VEX/priv/host_loongarch64_isel.c b/VEX/priv/host_loongarch64_isel.c
index f49779dc2..7b0679068 100644
--- a/VEX/priv/host_loongarch64_isel.c
+++ b/VEX/priv/host_loongarch64_isel.c
@@ -583,6 +583,32 @@ static void iselStmtPut ( ISelEnv* env, IRStmt* stmt )
    }
 }
 
+static void iselStmtTmp ( ISelEnv* env, IRStmt* stmt )
+{
+   IRTemp tmp = stmt->Ist.WrTmp.tmp;
+   IRType ty  = typeOfIRTemp(env->type_env, tmp);
+
+   if (ty == Ity_I8 || ty == Ity_I16 || ty == Ity_I32 || ty == Ity_I64) {
+      HReg dst = lookupIRTemp(env, tmp);
+      HReg src = iselIntExpr_R(env, stmt->Ist.WrTmp.data);
+      addInstr(env, LOONGARCH64Instr_Move(dst, src));
+   } else if (ty == Ity_I1) {
+      HReg dst = lookupIRTemp(env, tmp);
+      HReg src = iselCondCode_R(env, stmt->Ist.WrTmp.data);
+      addInstr(env, LOONGARCH64Instr_Move(dst, src));
+   } else if (ty == Ity_F32) {
+      HReg dst = lookupIRTemp(env, tmp);
+      HReg src = iselFltExpr(env, stmt->Ist.WrTmp.data);
+      addInstr(env, LOONGARCH64Instr_FpMove(LAfpmove_FMOV_S, src, dst));
+   } else if (ty == Ity_F64) {
+      HReg dst = lookupIRTemp(env, tmp);
+      HReg src = iselFltExpr(env, stmt->Ist.WrTmp.data);
+      addInstr(env, LOONGARCH64Instr_FpMove(LAfpmove_FMOV_D, src, dst));
+   } else {
+      vpanic("iselStmt(loongarch64): Ist_WrTmp");
+   }
+}
+
 static void iselStmtExit ( ISelEnv* env, IRStmt* stmt )
 {
    if (stmt->Ist.Exit.dst->tag != Ico_U64)
@@ -658,6 +684,12 @@ static void iselStmt(ISelEnv* env, IRStmt* stmt)
          iselStmtPut(env, stmt);
          break;
 
+      /* --------- TMP --------- */
+      /* assign value to temporary */
+      case Ist_WrTmp:
+         iselStmtTmp(env, stmt);
+         break;
+
       /* --------- INSTR MARK --------- */
       /* Doesn't generate any executable code ... */
       case Ist_IMark:
-- 
2.39.1


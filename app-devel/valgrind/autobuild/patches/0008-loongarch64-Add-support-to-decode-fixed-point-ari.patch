From ccb894de07fe081cb985461084ccc8a0814b032e Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Wed, 16 Mar 2022 10:23:15 +0800
Subject: [PATCH v4 008/123] loongarch64: Add support to decode fixed point
 arithmetic insns

---
 VEX/priv/guest_loongarch64_toIR.c | 510 +++++++++++++++++++++++++++---
 1 file changed, 464 insertions(+), 46 deletions(-)

diff --git a/VEX/priv/guest_loongarch64_toIR.c b/VEX/priv/guest_loongarch64_toIR.c
index 41abd0c46..11d1e79be 100644
--- a/VEX/priv/guest_loongarch64_toIR.c
+++ b/VEX/priv/guest_loongarch64_toIR.c
@@ -540,322 +540,740 @@ static Bool gen_add_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("add.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* add = binop(Iop_Add32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, add));
+
+   return True;
 }
 
 static Bool gen_add_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("add.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_Add64, getIReg64(rj), getIReg64(rk)));
+
+   return True;
 }
 
 static Bool gen_sub_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("sub.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* sub = binop(Iop_Sub32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, sub));
+
+   return True;
 }
 
 static Bool gen_sub_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("sub.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_Sub64, getIReg64(rj), getIReg64(rk)));
+
+   return True;
 }
 
 static Bool gen_slt ( DisResult* dres, UInt insn,
                       const VexArchInfo* archinfo,
                       const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("slt %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* cond = binop(Iop_CmpLT64S, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, extendU(Ity_I1, cond));
+
+   return True;
 }
 
 static Bool gen_sltu ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("sltu %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* cond = binop(Iop_CmpLT64U, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, extendU(Ity_I1, cond));
+
+   return True;
 }
 
 static Bool gen_slti ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt rj   = get_rj(insn);
+   UInt rd   = get_rd(insn);
+
+   DIP("slti %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                           (Int)extend32(si12, 12));
+
+   IRExpr* cond = binop(Iop_CmpLT64S, getIReg64(rj),
+                        mkU64(extend64(si12, 12)));
+   putIReg(rd, extendU(Ity_I1, cond));
+
+   return True;
 }
 
 static Bool gen_sltui ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt rj   = get_rj(insn);
+   UInt rd   = get_rd(insn);
+
+   DIP("sltui %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                             (Int)extend32(si12, 12));
+
+   IRExpr* cond = binop(Iop_CmpLT64U, getIReg64(rj),
+                        mkU64(extend64(si12, 12)));
+   putIReg(rd, extendU(Ity_I1, cond));
+
+   return True;
 }
 
 static Bool gen_nor ( DisResult* dres, UInt insn,
                       const VexArchInfo* archinfo,
                       const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("nor %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* or = binop(Iop_Or64, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, unop(Iop_Not64, or));
+
+   return True;
 }
 
 static Bool gen_and ( DisResult* dres, UInt insn,
                       const VexArchInfo* archinfo,
                       const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("and %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_And64, getIReg64(rj), getIReg64(rk)));
+
+   return True;
 }
 
 static Bool gen_or ( DisResult* dres, UInt insn,
                      const VexArchInfo* archinfo,
                      const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("or %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_Or64, getIReg64(rj), getIReg64(rk)));
+
+   return True;
 }
 
 static Bool gen_xor ( DisResult* dres, UInt insn,
                       const VexArchInfo* archinfo,
                       const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("xor %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_Xor64, getIReg64(rj), getIReg64(rk)));
+
+   return True;
 }
 
 static Bool gen_orn ( DisResult* dres, UInt insn,
                       const VexArchInfo* archinfo,
                       const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("orn %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* not = unop(Iop_Not64, getIReg64(rk));
+   putIReg(rd, binop(Iop_Or64, getIReg64(rj), not));
+
+   return True;
 }
 
 static Bool gen_andn ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("andn %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* not = unop(Iop_Not64, getIReg64(rk));
+   putIReg(rd, binop(Iop_And64, getIReg64(rj), not));
+
+   return True;
 }
 
 static Bool gen_mul_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mul.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mul = binop(Iop_MullS32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, unop(Iop_64to32, mul)));
+
+   return True;
 }
 
 static Bool gen_mulh_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mulh.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mul = binop(Iop_MullS32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, unop(Iop_64HIto32, mul)));
+
+   return True;
 }
 
 static Bool gen_mulh_wu ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mulh.wu %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mul = binop(Iop_MullU32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, unop(Iop_64HIto32, mul)));
+
+   return True;
 }
 
 static Bool gen_mul_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mul.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mul = binop(Iop_MullS64, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, unop(Iop_128to64, mul));
+
+   return True;
 }
 
 static Bool gen_mulh_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mulh.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mul = binop(Iop_MullS64, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, unop(Iop_128HIto64, mul));
+
+   return True;
 }
 
 static Bool gen_mulh_du ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mulh.du %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mul = binop(Iop_MullU64, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, unop(Iop_128HIto64, mul));
+
+   return True;
 }
 
 static Bool gen_mulw_d_w ( DisResult* dres, UInt insn,
                            const VexArchInfo* archinfo,
                            const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mulw.d.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_MullS32, getIReg32(rj), getIReg32(rk)));
+
+   return True;
 }
 
 static Bool gen_mulw_d_wu ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mulw.d.wu %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_MullU32, getIReg32(rj), getIReg32(rk)));
+
+   return True;
 }
 
 static Bool gen_div_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("div.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* div = binop(Iop_DivS32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, div));
+
+   return True;
 }
 
 static Bool gen_mod_w ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mod.w %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mod = binop(Iop_DivModS32to32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, unop(Iop_64HIto32, mod)));
+
+   return True;
 }
 
 static Bool gen_div_wu ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("div.wu %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* div = binop(Iop_DivU32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, div));
+
+   return True;
 }
 
 static Bool gen_mod_wu ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mod.wu %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mod = binop(Iop_DivModU32to32, getIReg32(rj), getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, unop(Iop_64HIto32, mod)));
+
+   return True;
 }
 
 static Bool gen_div_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("div.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_DivS64, getIReg64(rj), getIReg64(rk)));
+
+   return True;
 }
 
 static Bool gen_mod_d ( DisResult* dres, UInt insn,
                         const VexArchInfo* archinfo,
                         const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mod.d %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mod = binop(Iop_DivModS64to64, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, unop(Iop_128HIto64, mod));
+
+   return True;
 }
 
 static Bool gen_div_du ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("div.du %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   putIReg(rd, binop(Iop_DivU64, getIReg64(rj), getIReg64(rk)));
+
+   return True;
 }
 
 static Bool gen_mod_du ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt rk = get_rk(insn);
+   UInt rj = get_rj(insn);
+   UInt rd = get_rd(insn);
+
+   DIP("mod.du %s, %s, %s\n", nameIReg(rd), nameIReg(rj), nameIReg(rk));
+
+   IRExpr* mod = binop(Iop_DivModU64to64, getIReg64(rj), getIReg64(rk));
+   putIReg(rd, unop(Iop_128HIto64, mod));
+
+   return True;
 }
 
 static Bool gen_alsl_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt sa2 = get_sa2(insn);
+   UInt  rk = get_rk(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("alsl.w %s, %s, %s, %u\n", nameIReg(rd), nameIReg(rj),
+                                  nameIReg(rk), sa2);
+
+   IRExpr* shl = binop(Iop_Shl32, getIReg32(rj), mkU8(sa2 + 1));
+   IRExpr* add = binop(Iop_Add32, shl, getIReg32(rk));
+   putIReg(rd, extendS(Ity_I32, add));
+
+   return True;
 }
 
 static Bool gen_alsl_wu ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt sa2 = get_sa2(insn);
+   UInt  rk = get_rk(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("alsl.wu %s, %s, %s, %u\n", nameIReg(rd), nameIReg(rj),
+                                   nameIReg(rk), sa2);
+
+   IRExpr* shl = binop(Iop_Shl32, getIReg32(rj), mkU8(sa2 + 1));
+   IRExpr* add = binop(Iop_Add32, shl, getIReg32(rk));
+   putIReg(rd, extendU(Ity_I32, add));
+
+   return True;
 }
 
 static Bool gen_alsl_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt sa2 = get_sa2(insn);
+   UInt  rk = get_rk(insn);
+   UInt  rj = get_rj(insn);
+   UInt  rd = get_rd(insn);
+
+   DIP("alsl.d %s, %s, %s, %u\n", nameIReg(rd), nameIReg(rj),
+                                  nameIReg(rk), sa2);
+
+   IRExpr* shl = binop(Iop_Shl64, getIReg64(rj), mkU8(sa2 + 1));
+   putIReg(rd, binop(Iop_Add64, shl, getIReg64(rk)));
+
+   return True;
 }
 
 static Bool gen_lu12i_w ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si20 = get_si20(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("lu12i.w %s, %d\n", nameIReg(rd), (Int)extend32(si20, 20));
+
+   IRExpr* imm = mkU32(si20 << 12);
+   putIReg(rd, extendS(Ity_I32, imm));
+
+   return True;
 }
 
 static Bool gen_lu32i_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si20 = get_si20(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("lu32i.d %s, %d\n", nameIReg(rd), (Int)extend32(si20, 20));
+
+   IRExpr* imm = mkU64((ULong)extend32(si20, 20) << 32);
+   IRExpr* shl = binop(Iop_Shl64, getIReg64(rd), mkU8(32));
+   IRExpr* shr = binop(Iop_Shr64, shl, mkU8(32));
+   putIReg(rd, binop(Iop_Or64, imm, shr));
+
+   return True;
 }
 
 static Bool gen_lu52i_d ( DisResult* dres, UInt insn,
                           const VexArchInfo* archinfo,
                           const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("lu52i.d %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                               (Int)extend32(si12, 12));
+
+   IRExpr* imm = mkU64((ULong)si12 << 52);
+   IRExpr* shl = binop(Iop_Shl64, getIReg64(rj), mkU8(12));
+   IRExpr* shr = binop(Iop_Shr64, shl, mkU8(12));
+   putIReg(rd, binop(Iop_Or64, imm, shr));
+
+   return True;
 }
 
 static Bool gen_pcaddi ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si20 = get_si20(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("pcaddi %s, %d\n", nameIReg(rd), (Int)extend32(si20, 20));
+
+   putIReg(rd, mkU64(guest_PC_curr_instr + extend64(si20 << 2, 22)));
+
+   return True;
 }
 
 static Bool gen_pcalau12i ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si20 = get_si20(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("pcalau12i %s, %d\n", nameIReg(rd), (Int)extend32(si20, 20));
+
+   IRExpr* imm = mkU64(guest_PC_curr_instr + extend64(si20 << 12, 32));
+   IRExpr* shr = binop(Iop_Shr64, imm, mkU8(12));
+   putIReg(rd, binop(Iop_Shl64, shr, mkU8(12)));
+
+   return True;
 }
 
 static Bool gen_pcaddu12i ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si20 = get_si20(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("pcaddu12i %s, %d\n", nameIReg(rd), (Int)extend32(si20, 20));
+
+   putIReg(rd, mkU64(guest_PC_curr_instr + extend64(si20 << 12, 32)));
+
+   return True;
 }
 
 static Bool gen_pcaddu18i ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si20 = get_si20(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("pcaddu18i %s, %d\n", nameIReg(rd), (Int)extend32(si20, 20));
+
+   putIReg(rd, mkU64(guest_PC_curr_instr + extend64((ULong)si20 << 18, 38)));
+
+   return True;
 }
 
 static Bool gen_addi_w ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("addi.w %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                              (Int)extend32(si12, 12));
+
+   IRExpr* imm = mkU32(extend32(si12, 12));
+   IRExpr* add = binop(Iop_Add32, getIReg32(rj), imm);
+   putIReg(rd, extendS(Ity_I32, add));
+
+   return True;
 }
 
 static Bool gen_addi_d ( DisResult* dres, UInt insn,
                          const VexArchInfo* archinfo,
                          const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si12 = get_si12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("addi.d %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                              (Int)extend32(si12, 12));
+
+   IRExpr* imm = mkU64(extend64(si12, 12));
+   putIReg(rd, binop(Iop_Add64, getIReg64(rj), imm));
+
+   return True;
 }
 
 static Bool gen_addu16i_d ( DisResult* dres, UInt insn,
                             const VexArchInfo* archinfo,
                             const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt si16 = get_si16(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("addu16i.d %s, %s, %d\n", nameIReg(rd), nameIReg(rj),
+                                 (Int)extend32(si16, 16));
+
+   IRExpr* imm = mkU64(extend64(si16 << 16, 32));
+   putIReg(rd, binop(Iop_Add64, getIReg64(rj), imm));
+
+   return True;
 }
 
 static Bool gen_andi ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui12 = get_ui12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("andi %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui12);
+
+   IRExpr* imm = mkU64((ULong)ui12);
+   putIReg(rd, binop(Iop_And64, getIReg64(rj), imm));
+
+   return True;
 }
 
 static Bool gen_ori ( DisResult* dres, UInt insn,
                       const VexArchInfo* archinfo,
                       const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui12 = get_ui12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("ori %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui12);
+
+   IRExpr* imm = mkU64((ULong)ui12);
+   putIReg(rd, binop(Iop_Or64, getIReg64(rj), imm));
+
+   return True;
 }
 
 static Bool gen_xori ( DisResult* dres, UInt insn,
                        const VexArchInfo* archinfo,
                        const VexAbiInfo* abiinfo )
 {
-   return False;
+   UInt ui12 = get_ui12(insn);
+   UInt   rj = get_rj(insn);
+   UInt   rd = get_rd(insn);
+
+   DIP("xori %s, %s, %u\n", nameIReg(rd), nameIReg(rj), ui12);
+
+   IRExpr* imm = mkU64((ULong)ui12);
+   putIReg(rd, binop(Iop_Xor64, getIReg64(rj), imm));
+
+   return True;
 }
 
 
-- 
2.39.1


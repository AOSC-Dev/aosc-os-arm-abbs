From a0f419dac0bf5f3b012185f4c93cc24a9bc3a24b Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Tue, 19 Jul 2022 09:31:34 +0800
Subject: [PATCH v4 113/123] loongarch64: Add none test for pc-related
 instructions

---
 .gitignore                           |  1 +
 none/tests/loongarch64/Makefile.am   |  6 ++-
 none/tests/loongarch64/pc.c          | 66 ++++++++++++++++++++++++++++
 none/tests/loongarch64/pc.stderr.exp |  0
 none/tests/loongarch64/pc.stdout.exp | 28 ++++++++++++
 none/tests/loongarch64/pc.vgtest     |  2 +
 6 files changed, 101 insertions(+), 2 deletions(-)
 create mode 100644 none/tests/loongarch64/pc.c
 create mode 100644 none/tests/loongarch64/pc.stderr.exp
 create mode 100644 none/tests/loongarch64/pc.stdout.exp
 create mode 100644 none/tests/loongarch64/pc.vgtest

diff --git a/.gitignore b/.gitignore
index e0db9fc29..1607a2341 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2061,6 +2061,7 @@
 /none/tests/loongarch64/llsc
 /none/tests/loongarch64/memory
 /none/tests/loongarch64/move
+/none/tests/loongarch64/pc
 
 # /none/tests/scripts/
 /none/tests/scripts/*.dSYM
diff --git a/none/tests/loongarch64/Makefile.am b/none/tests/loongarch64/Makefile.am
index 5015b420d..d91fb12b6 100644
--- a/none/tests/loongarch64/Makefile.am
+++ b/none/tests/loongarch64/Makefile.am
@@ -13,7 +13,8 @@ EXTRA_DIST = \
 	integer.stdout.exp integer.stderr.exp integer.vgtest \
 	llsc.stdout.exp llsc.stderr.exp llsc.vgtest \
 	memory.stdout.exp memory.stderr.exp memory.vgtest \
-	move.stdout.exp move.stderr.exp move.vgtest
+	move.stdout.exp move.stderr.exp move.vgtest \
+	pc.stdout.exp pc.stderr.exp pc.vgtest
 
 check_PROGRAMS = \
 	allexec \
@@ -26,7 +27,8 @@ check_PROGRAMS = \
 	integer \
 	llsc \
 	memory \
-	move
+	move \
+	pc
 
 AM_CFLAGS    += @FLAG_M64@
 AM_CXXFLAGS  += @FLAG_M64@
diff --git a/none/tests/loongarch64/pc.c b/none/tests/loongarch64/pc.c
new file mode 100644
index 000000000..a4938463a
--- /dev/null
+++ b/none/tests/loongarch64/pc.c
@@ -0,0 +1,66 @@
+#include <stdio.h>
+#include <stdbool.h>
+
+#define TESTINST_RI(insn, imm, offs, clear)          \
+   {                                                 \
+      unsigned long res, exp;                        \
+      __asm__ __volatile__(                          \
+         "  la.local $t0, 1f   \n\t"                 \
+         "  jirl %0, $t0, 0    \n\t"                 \
+         "1:                   \n\t"                 \
+            insn " %1," #imm " \n\t"                 \
+         : "=r" (exp), "=r" (res)                    \
+         :                                           \
+         : "$t0", "memory");                         \
+      printf("test %s\n", insn);                     \
+      exp += (long)imm << 40 >> (40 - offs);         \
+      if (clear)                                     \
+         exp &= 0xfffffffffffff000UL;                \
+      if (res != exp)                                \
+         printf("res: %#lx, exp: %#lx\n", res, exp); \
+   }
+
+void test(void)
+{
+   /* ---------------- pcaddi rd, si20 ---------------- */
+   TESTINST_RI("pcaddi", 0, 2, false);
+   TESTINST_RI("pcaddi", 1, 2, false);
+   TESTINST_RI("pcaddi", 100, 2, false);
+   TESTINST_RI("pcaddi", 12345, 2, false);
+   TESTINST_RI("pcaddi", -12345, 2, false);
+   TESTINST_RI("pcaddi", 524287, 2, false);
+   TESTINST_RI("pcaddi", -524288, 2, false);
+
+   /* ---------------- pcaddu12i rd, si20 ---------------- */
+   TESTINST_RI("pcaddu12i", 0, 12, false);
+   TESTINST_RI("pcaddu12i", 1, 12, false);
+   TESTINST_RI("pcaddu12i", 100, 12, false);
+   TESTINST_RI("pcaddu12i", 12345, 12, false);
+   TESTINST_RI("pcaddu12i", -12345, 12, false);
+   TESTINST_RI("pcaddu12i", 524287, 12, false);
+   TESTINST_RI("pcaddu12i", -524288, 12, false);
+
+   /* ---------------- pcaddu18i rd, si20 ---------------- */
+   TESTINST_RI("pcaddu18i", 0, 18, false);
+   TESTINST_RI("pcaddu18i", 1, 18, false);
+   TESTINST_RI("pcaddu18i", 100, 18, false);
+   TESTINST_RI("pcaddu18i", 12345, 18, false);
+   TESTINST_RI("pcaddu18i", -12345, 18, false);
+   TESTINST_RI("pcaddu18i", 524287, 18, false);
+   TESTINST_RI("pcaddu18i", -524288, 18, false);
+
+   /* ---------------- pcalau12i rd, si20 ---------------- */
+   TESTINST_RI("pcalau12i", 0, 12, true);
+   TESTINST_RI("pcalau12i", 1, 12, true);
+   TESTINST_RI("pcalau12i", 100, 12, true);
+   TESTINST_RI("pcalau12i", 12345, 12, true);
+   TESTINST_RI("pcalau12i", -12345, 12, true);
+   TESTINST_RI("pcalau12i", 524287, 12, true);
+   TESTINST_RI("pcalau12i", -524288, 12, true);
+}
+
+int main(void)
+{
+   test();
+   return 0;
+}
diff --git a/none/tests/loongarch64/pc.stderr.exp b/none/tests/loongarch64/pc.stderr.exp
new file mode 100644
index 000000000..e69de29bb
diff --git a/none/tests/loongarch64/pc.stdout.exp b/none/tests/loongarch64/pc.stdout.exp
new file mode 100644
index 000000000..422ea404b
--- /dev/null
+++ b/none/tests/loongarch64/pc.stdout.exp
@@ -0,0 +1,28 @@
+test pcaddi
+test pcaddi
+test pcaddi
+test pcaddi
+test pcaddi
+test pcaddi
+test pcaddi
+test pcaddu12i
+test pcaddu12i
+test pcaddu12i
+test pcaddu12i
+test pcaddu12i
+test pcaddu12i
+test pcaddu12i
+test pcaddu18i
+test pcaddu18i
+test pcaddu18i
+test pcaddu18i
+test pcaddu18i
+test pcaddu18i
+test pcaddu18i
+test pcalau12i
+test pcalau12i
+test pcalau12i
+test pcalau12i
+test pcalau12i
+test pcalau12i
+test pcalau12i
diff --git a/none/tests/loongarch64/pc.vgtest b/none/tests/loongarch64/pc.vgtest
new file mode 100644
index 000000000..468226df2
--- /dev/null
+++ b/none/tests/loongarch64/pc.vgtest
@@ -0,0 +1,2 @@
+prog: pc
+vgopts: -q
-- 
2.39.1


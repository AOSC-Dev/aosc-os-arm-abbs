From dfd8cf924edc76a9bdb82be2670aed828e591e3f Mon Sep 17 00:00:00 2001
From: Feiyang Chen <chenfeiyang@loongson.cn>
Date: Wed, 23 Mar 2022 16:35:53 +0800
Subject: [PATCH v4 087/123] loongarch64: Add support for syscall

---
 coregrind/m_syscall.c | 16 ++++++++++++----
 1 file changed, 12 insertions(+), 4 deletions(-)

diff --git a/coregrind/m_syscall.c b/coregrind/m_syscall.c
index 8e3a00f88..84d30b921 100644
--- a/coregrind/m_syscall.c
+++ b/coregrind/m_syscall.c
@@ -205,8 +205,13 @@ SysRes VG_(mk_SysRes_arm64_linux) ( Long val ) {
 }
 
 SysRes VG_(mk_SysRes_loongarch64_linux) ( UWord val ) {
-   /* TODO */
    SysRes res;
+   res._isError = val >= -4095 && val <= -1;
+   if (res._isError) {
+      res._val = (UWord)(-val);
+   } else {
+      res._val = (UWord)val;
+   }
    return res;
 }
 
@@ -1044,12 +1049,14 @@ asm (
 extern UWord do_syscall_WRK (UWord a1, UWord a2, UWord a3, /* $a0, $a1, $a2 */
                              UWord a4, UWord a5, UWord a6, /* $a3, $a4, $a5 */
                              UWord syscall_no);            /* $a6 */
-/* TODO */
 asm (
    ".text                                  \n\t"
    ".globl do_syscall_WRK                  \n\t"
    ".type  do_syscall_WRK, @function       \n\t"
    "do_syscall_WRK:                        \n\t"
+   "   move    $a7, $a6                    \n\t"           /* a7 = syscall_no */
+   "   syscall 0                           \n\t"
+   "   jr      $ra                         \n\t"
    ".size do_syscall_WRK, .-do_syscall_WRK \n\t"
    ".previous                              \n\t"
 );
@@ -1295,8 +1302,9 @@ SysRes VG_(do_syscall) ( UWord sysno, RegWord a1, RegWord a2, RegWord a3,
    return VG_(mk_SysRes_nanomips_linux)(reg_a0);
 
 #elif defined(VGP_loongarch64_linux)
-   /* TODO */
-   return VG_(mk_SysRes_loongarch64_linux)(0);
+   UWord val = 0;
+   val = do_syscall_WRK(a1, a2, a3, a4, a5, a6, sysno);
+   return VG_(mk_SysRes_loongarch64_linux)(val);
 
 #  elif defined(VGP_x86_solaris)
    UInt val, val2, err = False;
-- 
2.39.1


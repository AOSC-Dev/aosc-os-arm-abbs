From 8ad3f727e7be9a6ccda91257c67d681bb1ac5485 Mon Sep 17 00:00:00 2001
From: Emmmer <yjhdandan@163.com>
Date: Sat, 28 Jan 2023 15:38:32 -0700
Subject: [PATCH 2002/2002] [LLDB][RISCV] riscv changes

---
 .../NativeRegisterContextLinux_riscv64.cpp    |   8 +-
 .../Utility/RegisterInfoPOSIX_riscv64.cpp     |   5 +-
 .../Utility/RegisterInfoPOSIX_riscv64.h       |   2 +-
 .../Process/Utility/RegisterInfos_riscv64.h   | 133 ++++++------
 .../Utility/lldb-riscv-register-enums.h       |  63 +++++-
 lldb/source/Utility/RISCV_DWARF_Registers.h   | 195 ++++++++++++++++++
 6 files changed, 337 insertions(+), 69 deletions(-)
 create mode 100644 lldb/source/Utility/RISCV_DWARF_Registers.h

diff --git a/lldb/source/Plugins/Process/Utility/RegisterInfoPOSIX_riscv64.cpp b/lldb/source/Plugins/Process/Utility/RegisterInfoPOSIX_riscv64.cpp
index 06c4e8ec6853..3819401c543b 100644
--- a/lldb/source/Plugins/Process/Utility/RegisterInfoPOSIX_riscv64.cpp
+++ b/lldb/source/Plugins/Process/Utility/RegisterInfoPOSIX_riscv64.cpp
@@ -104,7 +104,7 @@ RegisterInfoPOSIX_riscv64::RegisterInfoPOSIX_riscv64(
       m_register_info_count(GetRegisterInfoCount(target_arch)) {}
 
 uint32_t RegisterInfoPOSIX_riscv64::GetRegisterCount() const {
-  return k_num_gpr_registers;
+  return m_register_info_count;
 }
 
 size_t RegisterInfoPOSIX_riscv64::GetGPRSize() const {
@@ -121,11 +121,12 @@ RegisterInfoPOSIX_riscv64::GetRegisterInfo() const {
 }
 
 size_t RegisterInfoPOSIX_riscv64::GetRegisterSetCount() const {
-  return k_num_register_sets - 1;
+  return k_num_register_sets;
 }
 
 size_t RegisterInfoPOSIX_riscv64::GetRegisterSetFromRegisterIndex(
     uint32_t reg_index) const {
+  // coverity[unsigned_compare]
   if (reg_index >= gpr_first_riscv && reg_index <= gpr_last_riscv)
     return GPRegSet;
   if (reg_index >= fpr_first_riscv && reg_index <= fpr_last_riscv)
diff --git a/lldb/source/Plugins/Process/Utility/RegisterInfoPOSIX_riscv64.h b/lldb/source/Plugins/Process/Utility/RegisterInfoPOSIX_riscv64.h
index 0e07b910f855..c5b955f93af6 100644
--- a/lldb/source/Plugins/Process/Utility/RegisterInfoPOSIX_riscv64.h
+++ b/lldb/source/Plugins/Process/Utility/RegisterInfoPOSIX_riscv64.h
@@ -31,7 +31,7 @@ public:
   };
 
   struct FPR {
-    uint64_t f[32];
+    uint64_t fpr[32];
     uint32_t fcsr;
   };
 
diff --git a/lldb/source/Plugins/Process/Utility/RegisterInfos_riscv64.h b/lldb/source/Plugins/Process/Utility/RegisterInfos_riscv64.h
index ac1ec087e376..331155eab32f 100644
--- a/lldb/source/Plugins/Process/Utility/RegisterInfos_riscv64.h
+++ b/lldb/source/Plugins/Process/Utility/RegisterInfos_riscv64.h
@@ -53,9 +53,13 @@ using namespace riscv_dwarf;
     GPR64_KIND(gpr_##reg, generic_kind), nullptr, nullptr                      \
   }
 
-#define DEFINE_FPR64(reg, generic_kind)                                        \
+#define DEFINE_FPR64(reg, generic_kind) DEFINE_FPR64_ALT(reg, reg, generic_kind)
+
+#define DEFINE_FPR64_ALT(reg, alt, generic_kind) DEFINE_FPR_ALT(reg, alt, 8, generic_kind)
+
+#define DEFINE_FPR_ALT(reg, alt, size, generic_kind)                           \
   {                                                                            \
-    #reg, nullptr, 8, FPR_OFFSET(fpr_##reg##_riscv - fpr_first_riscv),         \
+    #reg, #alt, size, FPR_OFFSET(fpr_##reg##_riscv - fpr_first_riscv),         \
     lldb::eEncodingUint, lldb::eFormatHex,                                     \
     FPR64_KIND(fpr_##reg, generic_kind), nullptr, nullptr                      \
   }
@@ -67,69 +71,70 @@ static lldb_private::RegisterInfo g_register_infos_riscv64_le[] = {
     DEFINE_GPR64(pc, LLDB_REGNUM_GENERIC_PC),
     DEFINE_GPR64_ALT(ra, x1, LLDB_REGNUM_GENERIC_RA),
     DEFINE_GPR64_ALT(sp, x2, LLDB_REGNUM_GENERIC_SP),
-    DEFINE_GPR64(x3, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x4, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x5, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x6, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x7, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(gp, x3, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(tp, x4, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(t0, x5, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(t1, x6, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(t2, x7, LLDB_INVALID_REGNUM),
     DEFINE_GPR64_ALT(fp, x8, LLDB_REGNUM_GENERIC_FP),
-    DEFINE_GPR64(x9, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x10, LLDB_REGNUM_GENERIC_ARG1),
-    DEFINE_GPR64(x11, LLDB_REGNUM_GENERIC_ARG2),
-    DEFINE_GPR64(x12, LLDB_REGNUM_GENERIC_ARG3),
-    DEFINE_GPR64(x13, LLDB_REGNUM_GENERIC_ARG4),
-    DEFINE_GPR64(x14, LLDB_REGNUM_GENERIC_ARG5),
-    DEFINE_GPR64(x15, LLDB_REGNUM_GENERIC_ARG6),
-    DEFINE_GPR64(x16, LLDB_REGNUM_GENERIC_ARG7),
-    DEFINE_GPR64(x17, LLDB_REGNUM_GENERIC_ARG8),
-    DEFINE_GPR64(x18, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x19, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x20, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x21, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x22, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x23, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x24, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x25, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x26, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x27, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x28, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x29, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x30, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x31, LLDB_INVALID_REGNUM),
-    DEFINE_GPR64(x0, LLDB_INVALID_REGNUM),
-
-    DEFINE_FPR64(f0, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f1, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f2, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f3, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f4, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f5, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f6, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f7, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f8, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f9, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f10, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f11, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f12, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f13, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f14, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f15, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f16, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f17, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f18, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f19, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f20, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f21, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f22, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f23, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f24, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f25, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f26, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f27, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f28, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f29, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f30, LLDB_INVALID_REGNUM),
-    DEFINE_FPR64(f31, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s1, x9, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(a0, x10, LLDB_REGNUM_GENERIC_ARG1),
+    DEFINE_GPR64_ALT(a1, x11, LLDB_REGNUM_GENERIC_ARG2),
+    DEFINE_GPR64_ALT(a2, x12, LLDB_REGNUM_GENERIC_ARG3),
+    DEFINE_GPR64_ALT(a3, x13, LLDB_REGNUM_GENERIC_ARG4),
+    DEFINE_GPR64_ALT(a4, x14, LLDB_REGNUM_GENERIC_ARG5),
+    DEFINE_GPR64_ALT(a5, x15, LLDB_REGNUM_GENERIC_ARG6),
+    DEFINE_GPR64_ALT(a6, x16, LLDB_REGNUM_GENERIC_ARG7),
+    DEFINE_GPR64_ALT(a7, x17, LLDB_REGNUM_GENERIC_ARG8),
+    DEFINE_GPR64_ALT(s2, x18, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s3, x19, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s4, x20, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s5, x21, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s6, x22, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s7, x23, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s8, x24, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s9, x25, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s10, x26, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(s11, x27, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(t3, x28, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(t4, x29, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(t5, x30, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(t6, x31, LLDB_INVALID_REGNUM),
+    DEFINE_GPR64_ALT(zero, x0, LLDB_INVALID_REGNUM),
+
+    DEFINE_FPR64_ALT(ft0, f0, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft1, f1, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft2, f2, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft3, f3, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft4, f4, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft5, f5, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft6, f6, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft7, f7, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs0, f8, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs1, f9, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fa0, f10, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fa1, f11, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fa2, f12, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fa3, f13, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fa4, f14, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fa5, f15, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fa6, f16, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fa7, f17, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs2, f18, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs3, f19, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs4, f20, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs5, f21, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs6, f22, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs7, f23, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs8, f24, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs9, f25, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs10, f26, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(fs11, f27, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft8, f28, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft9, f29, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft10, f30, LLDB_INVALID_REGNUM),
+    DEFINE_FPR64_ALT(ft11, f31, LLDB_INVALID_REGNUM),
+    DEFINE_FPR_ALT(fcsr, nullptr, 4, LLDB_INVALID_REGNUM),
 };
 
 #endif // DECLARE_REGISTER_INFOS_RISCV64_STRUCT
diff --git a/lldb/source/Plugins/Process/Utility/lldb-riscv-register-enums.h b/lldb/source/Plugins/Process/Utility/lldb-riscv-register-enums.h
index 820bf6aaf988..8c335b8c1094 100644
--- a/lldb/source/Plugins/Process/Utility/lldb-riscv-register-enums.h
+++ b/lldb/source/Plugins/Process/Utility/lldb-riscv-register-enums.h
@@ -49,10 +49,39 @@ enum {
   gpr_x30_riscv,
   gpr_x31_riscv,
   gpr_x0_riscv,
-  gpr_last_riscv = gpr_x0_riscv,
+  gpr_zero_riscv = gpr_x0_riscv,
   gpr_ra_riscv = gpr_x1_riscv,
   gpr_sp_riscv = gpr_x2_riscv,
+  gpr_gp_riscv = gpr_x3_riscv,
+  gpr_tp_riscv = gpr_x4_riscv,
+  gpr_t0_riscv = gpr_x5_riscv,
+  gpr_t1_riscv = gpr_x6_riscv,
+  gpr_t2_riscv = gpr_x7_riscv,
   gpr_fp_riscv = gpr_x8_riscv,
+  gpr_s1_riscv = gpr_x9_riscv,
+  gpr_a0_riscv = gpr_x10_riscv,
+  gpr_a1_riscv = gpr_x11_riscv,
+  gpr_a2_riscv = gpr_x12_riscv,
+  gpr_a3_riscv = gpr_x13_riscv,
+  gpr_a4_riscv = gpr_x14_riscv,
+  gpr_a5_riscv = gpr_x15_riscv,
+  gpr_a6_riscv = gpr_x16_riscv,
+  gpr_a7_riscv = gpr_x17_riscv,
+  gpr_s2_riscv = gpr_x18_riscv,
+  gpr_s3_riscv = gpr_x19_riscv,
+  gpr_s4_riscv = gpr_x20_riscv,
+  gpr_s5_riscv = gpr_x21_riscv,
+  gpr_s6_riscv = gpr_x22_riscv,
+  gpr_s7_riscv = gpr_x23_riscv,
+  gpr_s8_riscv = gpr_x24_riscv,
+  gpr_s9_riscv = gpr_x25_riscv,
+  gpr_s10_riscv = gpr_x26_riscv,
+  gpr_s11_riscv = gpr_x27_riscv,
+  gpr_t3_riscv = gpr_x28_riscv,
+  gpr_t4_riscv = gpr_x29_riscv,
+  gpr_t5_riscv = gpr_x30_riscv,
+  gpr_t6_riscv = gpr_x31_riscv,
+  gpr_last_riscv = gpr_x0_riscv,
 
   fpr_first_riscv = 33,
   fpr_f0_riscv = fpr_first_riscv,
@@ -89,6 +118,38 @@ enum {
   fpr_f31_riscv,
 
   fpr_fcsr_riscv,
+  fpr_ft0_riscv = fpr_f0_riscv,
+  fpr_ft1_riscv = fpr_f1_riscv,
+  fpr_ft2_riscv = fpr_f2_riscv,
+  fpr_ft3_riscv = fpr_f3_riscv,
+  fpr_ft4_riscv = fpr_f4_riscv,
+  fpr_ft5_riscv = fpr_f5_riscv,
+  fpr_ft6_riscv = fpr_f6_riscv,
+  fpr_ft7_riscv = fpr_f7_riscv,
+  fpr_fs0_riscv = fpr_f8_riscv,
+  fpr_fs1_riscv = fpr_f9_riscv,
+  fpr_fa0_riscv = fpr_f10_riscv,
+  fpr_fa1_riscv = fpr_f11_riscv,
+  fpr_fa2_riscv = fpr_f12_riscv,
+  fpr_fa3_riscv = fpr_f13_riscv,
+  fpr_fa4_riscv = fpr_f14_riscv,
+  fpr_fa5_riscv = fpr_f15_riscv,
+  fpr_fa6_riscv = fpr_f16_riscv,
+  fpr_fa7_riscv = fpr_f17_riscv,
+  fpr_fs2_riscv = fpr_f18_riscv,
+  fpr_fs3_riscv = fpr_f19_riscv,
+  fpr_fs4_riscv = fpr_f20_riscv,
+  fpr_fs5_riscv = fpr_f21_riscv,
+  fpr_fs6_riscv = fpr_f22_riscv,
+  fpr_fs7_riscv = fpr_f23_riscv,
+  fpr_fs8_riscv = fpr_f24_riscv,
+  fpr_fs9_riscv = fpr_f25_riscv,
+  fpr_fs10_riscv = fpr_f26_riscv,
+  fpr_fs11_riscv = fpr_f27_riscv,
+  fpr_ft8_riscv = fpr_f28_riscv,
+  fpr_ft9_riscv = fpr_f29_riscv,
+  fpr_ft10_riscv = fpr_f30_riscv,
+  fpr_ft11_riscv = fpr_f31_riscv,
   fpr_last_riscv = fpr_fcsr_riscv,
 
   k_num_registers_riscv
diff --git a/lldb/source/Utility/RISCV_DWARF_Registers.h b/lldb/source/Utility/RISCV_DWARF_Registers.h
new file mode 100644
index 000000000000..b7fc9d913e33
--- /dev/null
+++ b/lldb/source/Utility/RISCV_DWARF_Registers.h
@@ -0,0 +1,195 @@
+//===-- RISCV_DWARF_Registers.h ---------------------------------*- C++ -*-===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLDB_SOURCE_UTILITY_RISCV_DWARF_REGISTERS_H
+#define LLDB_SOURCE_UTILITY_RISCV_DWARF_REGISTERS_H
+
+#include "lldb/lldb-private.h"
+
+namespace riscv_dwarf {
+
+enum {
+  dwarf_gpr_x0 = 0,
+  dwarf_gpr_x1,
+  dwarf_gpr_x2,
+  dwarf_gpr_x3,
+  dwarf_gpr_x4,
+  dwarf_gpr_x5,
+  dwarf_gpr_x6,
+  dwarf_gpr_x7,
+  dwarf_gpr_x8,
+  dwarf_gpr_x9,
+  dwarf_gpr_x10,
+  dwarf_gpr_x11,
+  dwarf_gpr_x12,
+  dwarf_gpr_x13,
+  dwarf_gpr_x14,
+  dwarf_gpr_x15,
+  dwarf_gpr_x16,
+  dwarf_gpr_x17,
+  dwarf_gpr_x18,
+  dwarf_gpr_x19,
+  dwarf_gpr_x20,
+  dwarf_gpr_x21,
+  dwarf_gpr_x22,
+  dwarf_gpr_x23,
+  dwarf_gpr_x24,
+  dwarf_gpr_x25,
+  dwarf_gpr_x26,
+  dwarf_gpr_x27,
+  dwarf_gpr_x28,
+  dwarf_gpr_x29,
+  dwarf_gpr_x30,
+  dwarf_gpr_x31 = 31,
+
+  dwarf_fpr_f0 = 32,
+  dwarf_fpr_f1,
+  dwarf_fpr_f2,
+  dwarf_fpr_f3,
+  dwarf_fpr_f4,
+  dwarf_fpr_f5,
+  dwarf_fpr_f6,
+  dwarf_fpr_f7,
+  dwarf_fpr_f8,
+  dwarf_fpr_f9,
+  dwarf_fpr_f10,
+  dwarf_fpr_f11,
+  dwarf_fpr_f12,
+  dwarf_fpr_f13,
+  dwarf_fpr_f14,
+  dwarf_fpr_f15,
+  dwarf_fpr_f16,
+  dwarf_fpr_f17,
+  dwarf_fpr_f18,
+  dwarf_fpr_f19,
+  dwarf_fpr_f20,
+  dwarf_fpr_f21,
+  dwarf_fpr_f22,
+  dwarf_fpr_f23,
+  dwarf_fpr_f24,
+  dwarf_fpr_f25,
+  dwarf_fpr_f26,
+  dwarf_fpr_f27,
+  dwarf_fpr_f28,
+  dwarf_fpr_f29,
+  dwarf_fpr_f30,
+  dwarf_fpr_f31 = 63,
+
+  // alternate frame return column
+  dwarf_alt_fr_col = 64,
+
+  dwarf_v0 = 96,
+  dwarf_v1,
+  dwarf_v2,
+  dwarf_v3,
+  dwarf_v4,
+  dwarf_v5,
+  dwarf_v6,
+  dwarf_v7,
+  dwarf_v8,
+  dwarf_v9,
+  dwarf_v10,
+  dwarf_v11,
+  dwarf_v12,
+  dwarf_v13,
+  dwarf_v14,
+  dwarf_v15,
+  dwarf_v16,
+  dwarf_v17,
+  dwarf_v18,
+  dwarf_v19,
+  dwarf_v20,
+  dwarf_v21,
+  dwarf_v22,
+  dwarf_v23,
+  dwarf_v24,
+  dwarf_v25,
+  dwarf_v26,
+  dwarf_v27,
+  dwarf_v28,
+  dwarf_v29,
+  dwarf_v30,
+  dwarf_v31 = 127,
+  dwarf_first_csr = 4096,
+  dwarf_fpr_fcsr = dwarf_first_csr + 0x003,
+  dwarf_last_csr = 8191,
+
+  // register ABI name
+  dwarf_gpr_zero = dwarf_gpr_x0,
+  dwarf_gpr_ra = dwarf_gpr_x1,
+  dwarf_gpr_sp = dwarf_gpr_x2,
+  dwarf_gpr_gp = dwarf_gpr_x3,
+  dwarf_gpr_tp = dwarf_gpr_x4,
+  dwarf_gpr_t0 = dwarf_gpr_x5,
+  dwarf_gpr_t1 = dwarf_gpr_x6,
+  dwarf_gpr_t2 = dwarf_gpr_x7,
+  dwarf_gpr_fp = dwarf_gpr_x8,
+  dwarf_gpr_s1 = dwarf_gpr_x9,
+  dwarf_gpr_a0 = dwarf_gpr_x10,
+  dwarf_gpr_a1 = dwarf_gpr_x11,
+  dwarf_gpr_a2 = dwarf_gpr_x12,
+  dwarf_gpr_a3 = dwarf_gpr_x13,
+  dwarf_gpr_a4 = dwarf_gpr_x14,
+  dwarf_gpr_a5 = dwarf_gpr_x15,
+  dwarf_gpr_a6 = dwarf_gpr_x16,
+  dwarf_gpr_a7 = dwarf_gpr_x17,
+  dwarf_gpr_s2 = dwarf_gpr_x18,
+  dwarf_gpr_s3 = dwarf_gpr_x19,
+  dwarf_gpr_s4 = dwarf_gpr_x20,
+  dwarf_gpr_s5 = dwarf_gpr_x21,
+  dwarf_gpr_s6 = dwarf_gpr_x22,
+  dwarf_gpr_s7 = dwarf_gpr_x23,
+  dwarf_gpr_s8 = dwarf_gpr_x24,
+  dwarf_gpr_s9 = dwarf_gpr_x25,
+  dwarf_gpr_s10 = dwarf_gpr_x26,
+  dwarf_gpr_s11 = dwarf_gpr_x27,
+  dwarf_gpr_t3 = dwarf_gpr_x28,
+  dwarf_gpr_t4 = dwarf_gpr_x29,
+  dwarf_gpr_t5 = dwarf_gpr_x30,
+  dwarf_gpr_t6 = dwarf_gpr_x31,
+
+  dwarf_fpr_ft0 = dwarf_fpr_f0,
+  dwarf_fpr_ft1 = dwarf_fpr_f1,
+  dwarf_fpr_ft2 = dwarf_fpr_f2,
+  dwarf_fpr_ft3 = dwarf_fpr_f3,
+  dwarf_fpr_ft4 = dwarf_fpr_f4,
+  dwarf_fpr_ft5 = dwarf_fpr_f5,
+  dwarf_fpr_ft6 = dwarf_fpr_f6,
+  dwarf_fpr_ft7 = dwarf_fpr_f7,
+  dwarf_fpr_fs0 = dwarf_fpr_f8,
+  dwarf_fpr_fs1 = dwarf_fpr_f9,
+  dwarf_fpr_fa0 = dwarf_fpr_f10,
+  dwarf_fpr_fa1 = dwarf_fpr_f11,
+  dwarf_fpr_fa2 = dwarf_fpr_f12,
+  dwarf_fpr_fa3 = dwarf_fpr_f13,
+  dwarf_fpr_fa4 = dwarf_fpr_f14,
+  dwarf_fpr_fa5 = dwarf_fpr_f15,
+  dwarf_fpr_fa6 = dwarf_fpr_f16,
+  dwarf_fpr_fa7 = dwarf_fpr_f17,
+  dwarf_fpr_fs2 = dwarf_fpr_f18,
+  dwarf_fpr_fs3 = dwarf_fpr_f19,
+  dwarf_fpr_fs4 = dwarf_fpr_f20,
+  dwarf_fpr_fs5 = dwarf_fpr_f21,
+  dwarf_fpr_fs6 = dwarf_fpr_f22,
+  dwarf_fpr_fs7 = dwarf_fpr_f23,
+  dwarf_fpr_fs8 = dwarf_fpr_f24,
+  dwarf_fpr_fs9 = dwarf_fpr_f25,
+  dwarf_fpr_fs10 = dwarf_fpr_f26,
+  dwarf_fpr_fs11 = dwarf_fpr_f27,
+  dwarf_fpr_ft8 = dwarf_fpr_f28,
+  dwarf_fpr_ft9 = dwarf_fpr_f29,
+  dwarf_fpr_ft10 = dwarf_fpr_f30,
+  dwarf_fpr_ft11 = dwarf_fpr_f31,
+
+  // mock pc regnum
+  dwarf_gpr_pc = 11451,
+};
+
+} // namespace riscv_dwarf
+
+#endif // LLDB_SOURCE_UTILITY_RISCV_DWARF_REGISTERS_H
-- 
2.39.1


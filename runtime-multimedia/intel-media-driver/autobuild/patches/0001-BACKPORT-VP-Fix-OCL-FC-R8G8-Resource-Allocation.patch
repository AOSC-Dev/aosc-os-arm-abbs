From bd807493c4c18d8d1dc5c8ff4a4a1820f4ae87cb Mon Sep 17 00:00:00 2001
From: Gu_Peiyi <peiyi.gu@intel.com>
Date: Mon, 9 Dec 2024 14:02:01 +0800
Subject: [PATCH 1/3] BACKPORT: [VP] Fix OCL FC R8G8 Resource Allocation

fix resource allocation fail

Link: https://github.com/intel/media-driver/issues/1887
Link: https://github.com/intel/media-driver/commit/7faa3bfe1a4cb79180eae64ccb426af5102f11e3
Signed-off-by: Mingcong Bai <jeffbai@aosc.io>
---
 .../vp/hal/bufferMgr/vp_resource_manager.cpp  | 261 +++++++++---------
 .../linux/common/os/mos_interface.cpp         |   6 +-
 2 files changed, 136 insertions(+), 131 deletions(-)

diff --git a/media_softlet/agnostic/common/vp/hal/bufferMgr/vp_resource_manager.cpp b/media_softlet/agnostic/common/vp/hal/bufferMgr/vp_resource_manager.cpp
index ce535d046..b5849f49f 100644
--- a/media_softlet/agnostic/common/vp/hal/bufferMgr/vp_resource_manager.cpp
+++ b/media_softlet/agnostic/common/vp/hal/bufferMgr/vp_resource_manager.cpp
@@ -1097,139 +1097,142 @@ MOS_STATUS VpResourceManager::AssignFcResources(VP_EXECUTE_CAPS &caps, std::vect
         allocated));
     surfSetting.surfGroup.insert(std::make_pair(SurfaceTypeDecompressionSync, m_decompressionSyncSurface));
 
-    // Allocate OCL FC intermedia inputSurface
-    for (uint32_t i = 0; i < inputSurfaces.size(); ++i)
-    {
-        VP_PUBLIC_CHK_NULL_RETURN(inputSurfaces[i]);
-        VP_PUBLIC_CHK_NULL_RETURN(inputSurfaces[i]->osSurface);
-        MOS_FORMAT fcIntermediaInputFormat                 = Format_Any;
-        MOS_FORMAT fcSeparateIntermediaSecPlaneInputFormat = Format_Any;
-        uint32_t   widthPL1Factor                          = 1;
-        uint32_t   heightPL1Factor                         = 1;
-        switch (inputSurfaces[i]->osSurface->Format)
-        {
-        case Format_RGBP:
-        case Format_BGRP:
-            fcIntermediaInputFormat = Format_A8R8G8B8;
-            break;
-        case Format_444P:
-            fcIntermediaInputFormat = Format_AYUV;
-            break;
-        case Format_I420:
-        case Format_YV12:
-        case Format_IYUV:
-        case Format_IMC3:
-            fcIntermediaInputFormat = Format_NV12;
-            break;
-        case Format_422H:
-            fcIntermediaInputFormat                 = Format_R8UN;
-            fcSeparateIntermediaSecPlaneInputFormat = Format_R8G8UN;
-            widthPL1Factor                          = 2;
-            break;
-        case Format_422V:
-            fcIntermediaInputFormat                 = Format_R8UN;
-            fcSeparateIntermediaSecPlaneInputFormat = Format_R8G8UN;
-            heightPL1Factor                         = 2;
-            break;
-        case Format_411P:
-            fcIntermediaInputFormat                 = Format_R8UN;
-            fcSeparateIntermediaSecPlaneInputFormat = Format_R8G8UN;
-            widthPL1Factor                          = 4;
-            break;
-        default:
-            break;
-        }
-        if (fcIntermediaInputFormat != Format_Any)
-        {
-            VP_PUBLIC_CHK_STATUS_RETURN(m_allocator.ReAllocateSurface(
-                m_fcIntermediaSurfaceInput[i],
-                "fcIntermediaSurfaceInput",
-                fcIntermediaInputFormat,
-                MOS_GFXRES_2D,
-                MOS_TILE_Y,
-                inputSurfaces[i]->osSurface->dwWidth,
-                inputSurfaces[i]->osSurface->dwHeight,
-                false,
-                MOS_MMC_DISABLED,
-                allocated,
-                false,
-                IsDeferredResourceDestroyNeeded(),
-                MOS_HW_RESOURCE_USAGE_VP_INTERNAL_READ_WRITE_RENDER));
-
-            m_fcIntermediaSurfaceInput[i]->rcSrc         = inputSurfaces[i]->rcSrc;
-            m_fcIntermediaSurfaceInput[i]->rcDst         = inputSurfaces[i]->rcDst;
-            m_fcIntermediaSurfaceInput[i]->SampleType    = inputSurfaces[i]->SampleType;
-            surfSetting.surfGroup.insert(std::make_pair((SurfaceType)(SurfaceTypeFcIntermediaInput + i), m_fcIntermediaSurfaceInput[i]));
-        }
-        if (fcSeparateIntermediaSecPlaneInputFormat != Format_Any)
-        {
-            VP_PUBLIC_CHK_STATUS_RETURN(m_allocator.ReAllocateSurface(
-                m_fcSeparateIntermediaSurfaceSecPlaneInput[i],
-                "fcSeparateIntermediaSurfaceSecPlaneInput",
-                fcSeparateIntermediaSecPlaneInputFormat,
-                MOS_GFXRES_2D,
-                MOS_TILE_Y,
-                inputSurfaces[i]->osSurface->dwWidth / widthPL1Factor,
-                inputSurfaces[i]->osSurface->dwHeight / heightPL1Factor,
-                false,
-                MOS_MMC_DISABLED,
-                allocated,
-                false,
-                IsDeferredResourceDestroyNeeded(),
-                MOS_HW_RESOURCE_USAGE_VP_INTERNAL_READ_WRITE_RENDER));
-
-            m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcSrc.top    = inputSurfaces[i]->rcSrc.top / heightPL1Factor;
-            m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcSrc.bottom = inputSurfaces[i]->rcSrc.bottom / heightPL1Factor;
-            m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcSrc.left   = inputSurfaces[i]->rcSrc.left / widthPL1Factor;
-            m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcSrc.right  = inputSurfaces[i]->rcSrc.right / widthPL1Factor;
-            m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcDst        = inputSurfaces[i]->rcDst;
-            m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->SampleType   = inputSurfaces[i]->SampleType;
-            surfSetting.surfGroup.insert(std::make_pair((SurfaceType)(SurfaceTypeFcSeparateIntermediaInputSecPlane + i), m_fcSeparateIntermediaSurfaceSecPlaneInput[i]));
-        }
-    }
-    // Allocate OCL FC intermedia outputSurface
+    if (m_vpUserFeatureControl && m_vpUserFeatureControl->EnableOclFC())
     {
-        MOS_FORMAT fcIntermediaSurfaceOutputFormat = Format_Any;
-        VP_PUBLIC_CHK_NULL_RETURN(outputSurface);
-        VP_PUBLIC_CHK_NULL_RETURN(outputSurface->osSurface);
-        switch (outputSurface->osSurface->Format)
+        // Allocate OCL FC intermedia inputSurface
+        for (uint32_t i = 0; i < inputSurfaces.size(); ++i)
         {
-        case Format_RGBP:
-        case Format_BGRP:
-            fcIntermediaSurfaceOutputFormat = Format_A8R8G8B8;
-            break;
-        case Format_444P:
-            fcIntermediaSurfaceOutputFormat = Format_AYUV;
-            break;
-        case Format_I420:
-        case Format_IMC3:
-        case Format_YV12:
-        case Format_IYUV:
-            fcIntermediaSurfaceOutputFormat = Format_NV12;
-            break;
-        default:
-            break;
+            VP_PUBLIC_CHK_NULL_RETURN(inputSurfaces[i]);
+            VP_PUBLIC_CHK_NULL_RETURN(inputSurfaces[i]->osSurface);
+            MOS_FORMAT fcIntermediaInputFormat                 = Format_Any;
+            MOS_FORMAT fcSeparateIntermediaSecPlaneInputFormat = Format_Any;
+            uint32_t   widthPL1Factor                          = 1;
+            uint32_t   heightPL1Factor                         = 1;
+            switch (inputSurfaces[i]->osSurface->Format)
+            {
+            case Format_RGBP:
+            case Format_BGRP:
+                fcIntermediaInputFormat = Format_A8R8G8B8;
+                break;
+            case Format_444P:
+                fcIntermediaInputFormat = Format_AYUV;
+                break;
+            case Format_I420:
+            case Format_YV12:
+            case Format_IYUV:
+            case Format_IMC3:
+                fcIntermediaInputFormat = Format_NV12;
+                break;
+            case Format_422H:
+                fcIntermediaInputFormat                 = Format_R8UN;
+                fcSeparateIntermediaSecPlaneInputFormat = Format_R8G8UN;
+                widthPL1Factor                          = 2;
+                break;
+            case Format_422V:
+                fcIntermediaInputFormat                 = Format_R8UN;
+                fcSeparateIntermediaSecPlaneInputFormat = Format_R8G8UN;
+                heightPL1Factor                         = 2;
+                break;
+            case Format_411P:
+                fcIntermediaInputFormat                 = Format_R8UN;
+                fcSeparateIntermediaSecPlaneInputFormat = Format_R8G8UN;
+                widthPL1Factor                          = 4;
+                break;
+            default:
+                break;
+            }
+            if (fcIntermediaInputFormat != Format_Any)
+            {
+                VP_PUBLIC_CHK_STATUS_RETURN(m_allocator.ReAllocateSurface(
+                    m_fcIntermediaSurfaceInput[i],
+                    "fcIntermediaSurfaceInput",
+                    fcIntermediaInputFormat,
+                    MOS_GFXRES_2D,
+                    MOS_TILE_Y,
+                    inputSurfaces[i]->osSurface->dwWidth,
+                    inputSurfaces[i]->osSurface->dwHeight,
+                    false,
+                    MOS_MMC_DISABLED,
+                    allocated,
+                    false,
+                    IsDeferredResourceDestroyNeeded(),
+                    MOS_HW_RESOURCE_USAGE_VP_INTERNAL_READ_WRITE_RENDER));
+
+                m_fcIntermediaSurfaceInput[i]->rcSrc      = inputSurfaces[i]->rcSrc;
+                m_fcIntermediaSurfaceInput[i]->rcDst      = inputSurfaces[i]->rcDst;
+                m_fcIntermediaSurfaceInput[i]->SampleType = inputSurfaces[i]->SampleType;
+                surfSetting.surfGroup.insert(std::make_pair((SurfaceType)(SurfaceTypeFcIntermediaInput + i), m_fcIntermediaSurfaceInput[i]));
+            }
+            if (fcSeparateIntermediaSecPlaneInputFormat != Format_Any)
+            {
+                VP_PUBLIC_CHK_STATUS_RETURN(m_allocator.ReAllocateSurface(
+                    m_fcSeparateIntermediaSurfaceSecPlaneInput[i],
+                    "fcSeparateIntermediaSurfaceSecPlaneInput",
+                    fcSeparateIntermediaSecPlaneInputFormat,
+                    MOS_GFXRES_2D,
+                    MOS_TILE_Y,
+                    inputSurfaces[i]->osSurface->dwWidth / widthPL1Factor,
+                    inputSurfaces[i]->osSurface->dwHeight / heightPL1Factor,
+                    false,
+                    MOS_MMC_DISABLED,
+                    allocated,
+                    false,
+                    IsDeferredResourceDestroyNeeded(),
+                    MOS_HW_RESOURCE_USAGE_VP_INTERNAL_READ_WRITE_RENDER));
+
+                m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcSrc.top    = inputSurfaces[i]->rcSrc.top / heightPL1Factor;
+                m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcSrc.bottom = inputSurfaces[i]->rcSrc.bottom / heightPL1Factor;
+                m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcSrc.left   = inputSurfaces[i]->rcSrc.left / widthPL1Factor;
+                m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcSrc.right  = inputSurfaces[i]->rcSrc.right / widthPL1Factor;
+                m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->rcDst        = inputSurfaces[i]->rcDst;
+                m_fcSeparateIntermediaSurfaceSecPlaneInput[i]->SampleType   = inputSurfaces[i]->SampleType;
+                surfSetting.surfGroup.insert(std::make_pair((SurfaceType)(SurfaceTypeFcSeparateIntermediaInputSecPlane + i), m_fcSeparateIntermediaSurfaceSecPlaneInput[i]));
+            }
         }
-        if (fcIntermediaSurfaceOutputFormat != Format_Any)
+        // Allocate OCL FC intermedia outputSurface
         {
-            VP_PUBLIC_CHK_STATUS_RETURN(m_allocator.ReAllocateSurface(
-                m_fcIntermediaSurfaceOutput,
-                "fcIntermediaSurfaceOutput",
-                fcIntermediaSurfaceOutputFormat,
-                MOS_GFXRES_2D,
-                MOS_TILE_Y,
-                outputSurface->osSurface->dwWidth,
-                outputSurface->osSurface->dwHeight,
-                false,
-                MOS_MMC_DISABLED,
-                allocated,
-                false,
-                IsDeferredResourceDestroyNeeded(),
-                MOS_HW_RESOURCE_USAGE_VP_INTERNAL_READ_WRITE_RENDER));
-            m_fcIntermediaSurfaceOutput->rcSrc      = outputSurface->rcSrc;
-            m_fcIntermediaSurfaceOutput->rcDst      = outputSurface->rcDst;
-            m_fcIntermediaSurfaceOutput->SampleType = outputSurface->SampleType;
-            surfSetting.surfGroup.insert(std::make_pair((SurfaceType)(SurfaceTypeFcIntermediaOutput), m_fcIntermediaSurfaceOutput));
+            MOS_FORMAT fcIntermediaSurfaceOutputFormat = Format_Any;
+            VP_PUBLIC_CHK_NULL_RETURN(outputSurface);
+            VP_PUBLIC_CHK_NULL_RETURN(outputSurface->osSurface);
+            switch (outputSurface->osSurface->Format)
+            {
+            case Format_RGBP:
+            case Format_BGRP:
+                fcIntermediaSurfaceOutputFormat = Format_A8R8G8B8;
+                break;
+            case Format_444P:
+                fcIntermediaSurfaceOutputFormat = Format_AYUV;
+                break;
+            case Format_I420:
+            case Format_IMC3:
+            case Format_YV12:
+            case Format_IYUV:
+                fcIntermediaSurfaceOutputFormat = Format_NV12;
+                break;
+            default:
+                break;
+            }
+            if (fcIntermediaSurfaceOutputFormat != Format_Any)
+            {
+                VP_PUBLIC_CHK_STATUS_RETURN(m_allocator.ReAllocateSurface(
+                    m_fcIntermediaSurfaceOutput,
+                    "fcIntermediaSurfaceOutput",
+                    fcIntermediaSurfaceOutputFormat,
+                    MOS_GFXRES_2D,
+                    MOS_TILE_Y,
+                    outputSurface->osSurface->dwWidth,
+                    outputSurface->osSurface->dwHeight,
+                    false,
+                    MOS_MMC_DISABLED,
+                    allocated,
+                    false,
+                    IsDeferredResourceDestroyNeeded(),
+                    MOS_HW_RESOURCE_USAGE_VP_INTERNAL_READ_WRITE_RENDER));
+                m_fcIntermediaSurfaceOutput->rcSrc      = outputSurface->rcSrc;
+                m_fcIntermediaSurfaceOutput->rcDst      = outputSurface->rcDst;
+                m_fcIntermediaSurfaceOutput->SampleType = outputSurface->SampleType;
+                surfSetting.surfGroup.insert(std::make_pair((SurfaceType)(SurfaceTypeFcIntermediaOutput), m_fcIntermediaSurfaceOutput));
+            }
         }
     }
     return MOS_STATUS_SUCCESS;
diff --git a/media_softlet/linux/common/os/mos_interface.cpp b/media_softlet/linux/common/os/mos_interface.cpp
index c8ec8815e..7b2bdde9f 100644
--- a/media_softlet/linux/common/os/mos_interface.cpp
+++ b/media_softlet/linux/common/os/mos_interface.cpp
@@ -3848,7 +3848,8 @@ MOS_FORMAT MosInterface::GmmFmtToMosFmt(
         {GMM_FORMAT_R24_UNORM_X8_TYPELESS, Format_D24S8UN},
         {GMM_FORMAT_R32_FLOAT_X8X24_TYPELESS, Format_D32S8X24_FLOAT},
         {GMM_FORMAT_R16G16_SINT_TYPE, Format_R16G16S},
-        {GMM_FORMAT_R32G32B32A32_FLOAT, Format_R32G32B32A32F}};
+        {GMM_FORMAT_R32G32B32A32_FLOAT, Format_R32G32B32A32F},
+        {GMM_FORMAT_R8G8_UNORM_TYPE, Format_R8G8UN}};
 
     auto iter = gmm2MosFmtMap.find(format);
     if (iter != gmm2MosFmtMap.end())
@@ -3910,7 +3911,8 @@ GMM_RESOURCE_FORMAT MosInterface::MosFmtToGmmFmt(MOS_FORMAT format)
         {Format_R10G10B10A2,    GMM_FORMAT_R10G10B10A2_UNORM_TYPE},
         {Format_B10G10R10A2,    GMM_FORMAT_B10G10R10A2_UNORM_TYPE},
         {Format_A16B16G16R16F,  GMM_FORMAT_R16G16B16A16_FLOAT},
-        {Format_R32G32B32A32F,  GMM_FORMAT_R32G32B32A32_FLOAT}
+        {Format_R32G32B32A32F,  GMM_FORMAT_R32G32B32A32_FLOAT},
+        {Format_R8G8UN,         GMM_FORMAT_R8G8_UNORM_TYPE}
     };
     
     auto iter = mos2GmmFmtMap.find(format);
-- 
2.48.1


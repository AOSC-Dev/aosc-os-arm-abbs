From 1c3a82a38bb1351ba23b518f9a196f1f7984a554 Mon Sep 17 00:00:00 2001
From: Icenowy Zheng <uwu@icenowy.me>
Date: Thu, 16 Jan 2025 09:05:31 +0800
Subject: [PATCH 2/3] FROMLIST: zink: Do not use demote on IMG blobs

The implementation of demote in IMG blobs seems to be a piece of hack,
and the current use of it in Zink leads to assertion failure with
information "Uniflex does not support demote and terminate in the same
shader".

Disable usage of demote for IMG blobs.

[Mingcong Bai: Resolved minor merge conflict in
src/gallium/drivers/zink/zink_screen.c, as
PIPE_CAP_DEMOTE_TO_HELPER_INVOCATION in zink_get_param() was refactored
as src->demote_to_helper_invocation in zink_init_screen_caps().]

Signed-off-by: Icenowy Zheng <uwu@icenowy.me>
Signed-off-by: Mingcong Bai <jeffbai@aosc.io>
---
 src/gallium/drivers/zink/zink_compiler.c |  3 ++-
 src/gallium/drivers/zink/zink_screen.c   | 15 +++++++++++++--
 src/gallium/drivers/zink/zink_types.h    |  1 +
 3 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/src/gallium/drivers/zink/zink_compiler.c b/src/gallium/drivers/zink/zink_compiler.c
index 5613724c068..77cceedd68f 100644
--- a/src/gallium/drivers/zink/zink_compiler.c
+++ b/src/gallium/drivers/zink/zink_compiler.c
@@ -1362,7 +1362,8 @@ zink_screen_init_compiler(struct zink_screen *screen)
        zink_driverid(screen) == VK_DRIVER_ID_AMD_PROPRIETARY)
       screen->nir_options.lower_doubles_options = nir_lower_dmod;
 
-   if (screen->info.have_EXT_shader_demote_to_helper_invocation)
+   if (screen->info.have_EXT_shader_demote_to_helper_invocation &&
+       !screen->driver_compiler_workarounds.broken_demote)
       screen->nir_options.discard_is_demote = true;
 
    screen->nir_options.support_indirect_inputs = (uint8_t)BITFIELD_MASK(PIPE_SHADER_TYPES);
diff --git a/src/gallium/drivers/zink/zink_screen.c b/src/gallium/drivers/zink/zink_screen.c
index 1740238f458..d35e0bca727 100644
--- a/src/gallium/drivers/zink/zink_screen.c
+++ b/src/gallium/drivers/zink/zink_screen.c
@@ -938,8 +938,9 @@ zink_init_screen_caps(struct zink_screen *screen)
        screen->info.have_EXT_shader_subgroup_ballot);
 
    caps->demote_to_helper_invocation =
-      screen->spirv_version >= SPIRV_VERSION(1, 6) ||
-      screen->info.have_EXT_shader_demote_to_helper_invocation;
+      (screen->spirv_version >= SPIRV_VERSION(1, 6) ||
+       screen->info.have_EXT_shader_demote_to_helper_invocation) &&
+      !screen->driver_compiler_workarounds.broken_demote;
 
    caps->sample_shading = screen->info.feats.features.sampleRateShading;
 
@@ -2986,6 +2987,16 @@ init_driver_workarounds(struct zink_screen *screen)
       break;
    }
 
+   /* these drivers do not implement demote properly */
+   switch (zink_driverid(screen)) {
+   case VK_DRIVER_ID_IMAGINATION_PROPRIETARY:
+      screen->driver_compiler_workarounds.broken_demote = true;
+      break;
+   default:
+      screen->driver_compiler_workarounds.broken_demote = false;
+      break;
+   }
+
    /* When robust contexts are advertised but robustImageAccess2 is not available */
    screen->driver_compiler_workarounds.lower_robustImageAccess2 =
       !screen->info.rb2_feats.robustImageAccess2 &&
diff --git a/src/gallium/drivers/zink/zink_types.h b/src/gallium/drivers/zink/zink_types.h
index c34b9a222bc..38a37fca724 100644
--- a/src/gallium/drivers/zink/zink_types.h
+++ b/src/gallium/drivers/zink/zink_types.h
@@ -1537,6 +1537,7 @@ struct zink_screen {
       bool needs_sanitised_layer;
       bool io_opt;
       bool broken_const;
+      bool broken_demote;
    } driver_compiler_workarounds;
    struct {
       bool broken_l4a4;
-- 
2.48.1


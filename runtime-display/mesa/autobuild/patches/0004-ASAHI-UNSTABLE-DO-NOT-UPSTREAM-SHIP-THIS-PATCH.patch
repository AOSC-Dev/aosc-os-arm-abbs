From e3c4bb2000047cebb736e4d5c2852db6ab966818 Mon Sep 17 00:00:00 2001
From: Alyssa Rosenzweig <alyssa@rosenzweig.io>
Date: Tue, 23 Jul 2024 12:25:50 -0400
Subject: [PATCH 4/4] ASAHI: UNSTABLE - DO NOT UPSTREAM/SHIP THIS PATCH

Signed-off-by: Alyssa Rosenzweig <alyssa@rosenzweig.io>

[Mingcong Bai: Asahi Linux updates its patchset at
https://gitlab.freedesktop.org/asahi/mesa/, but only this patch is needed
for OpenGL enablement on Apple silicon devices.]

Link: https://gitlab.freedesktop.org/asahi/mesa/-/commit/57333a8b6e86804949c6ebfa3ea3a380b118f031
Signed-off-by: Mingcong Bai <jeffbai@aosc.io>
---
 include/drm-uapi/drm_fourcc.h                 |  6 +++-
 src/asahi/compiler/agx_compile.c              |  6 ++++
 src/asahi/compiler/agx_compile.h              | 10 ++++++
 src/asahi/lib/agx_device.c                    | 34 +++----------------
 src/asahi/lib/decode.c                        | 22 +++++++++++-
 src/asahi/lib/unstable_asahi_drm.h            |  7 +---
 src/asahi/vulkan/hk_physical_device.c         |  3 --
 src/asahi/vulkan/hk_private.h                 |  8 -----
 src/compiler/nir/nir_lower_helper_writes.c    |  2 +-
 src/compiler/spirv/spirv_to_nir.c             |  2 +-
 .../auxiliary/pipe-loader/pipe_loader_drm.c   |  4 +++
 .../auxiliary/target-helpers/drm_helper.h     | 21 ++++++++++++
 .../target-helpers/drm_helper_public.h        |  1 +
 src/gallium/drivers/asahi/agx_pipe.c          | 16 +++++----
 src/gallium/targets/dril/meson.build          |  1 +
 15 files changed, 86 insertions(+), 57 deletions(-)

diff --git a/include/drm-uapi/drm_fourcc.h b/include/drm-uapi/drm_fourcc.h
index e41a3cec6a9..e5e31667092 100644
--- a/include/drm-uapi/drm_fourcc.h
+++ b/include/drm-uapi/drm_fourcc.h
@@ -421,7 +421,8 @@ extern "C" {
 #define DRM_FORMAT_MOD_VENDOR_ARM     0x08
 #define DRM_FORMAT_MOD_VENDOR_ALLWINNER 0x09
 #define DRM_FORMAT_MOD_VENDOR_AMLOGIC 0x0a
-#define DRM_FORMAT_MOD_VENDOR_MTK     0x0b
+#define DRM_FORMAT_MOD_VENDOR_MTK     0xbb
+#define DRM_FORMAT_MOD_VENDOR_APPLE 0x0b
 
 /* add more to the end as needed */
 
@@ -1649,6 +1650,9 @@ drm_fourcc_canonicalize_nvidia_format_mod(__u64 modifier)
 #define AMD_FMT_MOD_CLEAR(field) \
 	(~((__u64)AMD_FMT_MOD_##field##_MASK << AMD_FMT_MOD_##field##_SHIFT))
 
+#define DRM_FORMAT_MOD_APPLE_TWIDDLED fourcc_mod_code(APPLE, 1)
+#define DRM_FORMAT_MOD_APPLE_TWIDDLED_COMPRESSED fourcc_mod_code(APPLE, 2)
+
 #if defined(__cplusplus)
 }
 #endif
diff --git a/src/asahi/compiler/agx_compile.c b/src/asahi/compiler/agx_compile.c
index 775d5e43aef..c47c034446b 100644
--- a/src/asahi/compiler/agx_compile.c
+++ b/src/asahi/compiler/agx_compile.c
@@ -3615,6 +3615,11 @@ agx_compile_function_nir(nir_shader *nir, nir_function_impl *impl,
       }
    }
 
+   if (agx_should_dump(nir, AGX_DBG_SHADERS)) {
+      agx_disassemble_stdout(binary->data + offset, binary->size - offset);
+      fflush(stdout);
+   }
+
    ralloc_free(ctx);
 
    return offset;
@@ -3701,6 +3706,7 @@ agx_preprocess_nir(nir_shader *nir, const nir_shader *libagx)
 
    if (nir->info.stage == MESA_SHADER_FRAGMENT) {
       NIR_PASS(_, nir, agx_nir_lower_frag_sidefx);
+      NIR_PASS(_, nir, nir_lower_is_helper_invocation);
    }
 
    /* Clean up deref gunk after lowering I/O */
diff --git a/src/asahi/compiler/agx_compile.h b/src/asahi/compiler/agx_compile.h
index c2666d3e4a8..4f7fc6c9d52 100644
--- a/src/asahi/compiler/agx_compile.h
+++ b/src/asahi/compiler/agx_compile.h
@@ -320,6 +320,16 @@ struct agx_occupancy {
 struct agx_occupancy agx_occupancy_for_register_count(unsigned halfregs);
 unsigned agx_max_registers_for_occupancy(unsigned occupancy);
 
+static inline void
+agx_disassemble_stdout(void *data, size_t size)
+{
+   FILE *tmp = fopen("/tmp/shader.bin", "wb");
+   fwrite(data, 1, size, tmp);
+   fclose(tmp);
+
+   system("python3 ~/applegpu/disassemble.py /tmp/shader.bin");
+}
+
 static const nir_shader_compiler_options agx_nir_options = {
    .lower_fdiv = true,
    .fuse_ffma16 = true,
diff --git a/src/asahi/lib/agx_device.c b/src/asahi/lib/agx_device.c
index 9edddef4173..73d1f9df763 100644
--- a/src/asahi/lib/agx_device.c
+++ b/src/asahi/lib/agx_device.c
@@ -521,36 +521,12 @@ agx_open_device(void *memctx, struct agx_device *dev)
    }
    assert(params_size >= sizeof(dev->params));
 
-   /* Refuse to probe. */
    if (dev->params.unstable_uabi_version != DRM_ASAHI_UNSTABLE_UABI_VERSION) {
-      fprintf(
-         stderr,
-         "You are attempting to use upstream Mesa with a downstream kernel!\n"
-         "This WILL NOT work.\n"
-         "The Asahi UABI is unstable and NOT SUPPORTED in upstream Mesa.\n"
-         "UABI related code in upstream Mesa is not for use!\n"
-         "\n"
-         "Do NOT attempt to patch out checks, you WILL break your system.\n"
-         "Do NOT report bugs.\n"
-         "Do NOT ask Mesa developers for support.\n"
-         "Do NOT write guides about how to patch out these checks.\n"
-         "Do NOT package patches to Mesa to bypass this.\n"
-         "\n"
-         "~~~\n"
-         "This is not a place of honor.\n"
-         "No highly esteemed deed is commemorated here.\n"
-         "Nothing valued is here.\n"
-         "\n"
-         "What is here was dangerous and repulsive to us.\n"
-         "This message is a warning about danger.\n"
-         "\n"
-         "The danger is still present, in your time, as it was in ours.\n"
-         "The danger is unleashed only if you substantially disturb this place physically.\n"
-         "This place is best shunned and left uninhabited.\n"
-         "~~~\n"
-         "\n"
-         "THIS IS NOT A BUG. THIS IS YOU DOING SOMETHING BROKEN!\n");
-      abort();
+      fprintf(stderr, "UABI mismatch: Kernel %d, Mesa %d\n",
+              dev->params.unstable_uabi_version,
+              DRM_ASAHI_UNSTABLE_UABI_VERSION);
+      assert(0);
+      return false;
    }
 
    uint64_t incompat =
diff --git a/src/asahi/lib/decode.c b/src/asahi/lib/decode.c
index 4d5db023131..539451dd670 100644
--- a/src/asahi/lib/decode.c
+++ b/src/asahi/lib/decode.c
@@ -28,7 +28,27 @@ struct libagxdecode_config lib_config;
 static void
 agx_disassemble(void *_code, size_t maxlen, FILE *fp)
 {
-   /* stub */
+   FILE *tmp = fopen("/tmp/shader.bin", "wb");
+   fwrite(_code, 1, maxlen, tmp);
+   fclose(tmp);
+
+   system(
+      "python3 ~/applegpu/disassemble.py /tmp/shader.bin > /tmp/shader.asm");
+
+   tmp = fopen("/tmp/shader.asm", "r");
+
+   fseek(tmp, 0, SEEK_END);
+   unsigned filesize = ftell(tmp);
+   rewind(tmp);
+
+   char *code = malloc(filesize);
+   unsigned res = fread(code, 1, filesize, tmp);
+   if (res != filesize) {
+      printf("Couldn't read full file\n");
+   }
+   fclose(tmp);
+   fwrite(code, 1, filesize, fp);
+   free(code);
 }
 
 FILE *agxdecode_dump_stream;
diff --git a/src/asahi/lib/unstable_asahi_drm.h b/src/asahi/lib/unstable_asahi_drm.h
index 06c96412a21..e5b55012fce 100644
--- a/src/asahi/lib/unstable_asahi_drm.h
+++ b/src/asahi/lib/unstable_asahi_drm.h
@@ -17,12 +17,7 @@
 extern "C" {
 #endif
 
-/*
- * The UAPI defined in this file MUST NOT BE USED. End users, DO NOT attempt to
- * use upstream Mesa with asahi kernels, it will blow up. Distro packagers, DO
- * NOT patch upstream Mesa to do the same.
- */
-#define DRM_ASAHI_UNSTABLE_UABI_VERSION (0xDEADBEEF)
+#define DRM_ASAHI_UNSTABLE_UABI_VERSION		10011
 
 #define DRM_ASAHI_GET_PARAMS			0x00
 #define DRM_ASAHI_VM_CREATE			0x01
diff --git a/src/asahi/vulkan/hk_physical_device.c b/src/asahi/vulkan/hk_physical_device.c
index 8dcbd15c2b7..98f9f723c51 100644
--- a/src/asahi/vulkan/hk_physical_device.c
+++ b/src/asahi/vulkan/hk_physical_device.c
@@ -1095,9 +1095,6 @@ hk_create_drm_physical_device(struct vk_instance *_instance,
    struct hk_instance *instance = (struct hk_instance *)_instance;
    VkResult result;
 
-   /* Blanket refusal to probe due to unstable UAPI. */
-   return VK_ERROR_INCOMPATIBLE_DRIVER;
-
    if (!(drm_device->available_nodes & (1 << DRM_NODE_RENDER)) ||
        drm_device->bustype != DRM_BUS_PLATFORM)
       return VK_ERROR_INCOMPATIBLE_DRIVER;
diff --git a/src/asahi/vulkan/hk_private.h b/src/asahi/vulkan/hk_private.h
index 248813ecfc8..8994b787df3 100644
--- a/src/asahi/vulkan/hk_private.h
+++ b/src/asahi/vulkan/hk_private.h
@@ -49,11 +49,3 @@ struct hk_addr_range {
       if (dev->dev.debug & AGX_DBG_PERF)                                       \
          mesa_log(MESA_LOG_WARN, (MESA_LOG_TAG), (fmt), ##__VA_ARGS__);        \
    } while (0)
-
-/* Fake values, pending UAPI upstreaming */
-#ifndef DRM_FORMAT_MOD_APPLE_TWIDDLED
-#define DRM_FORMAT_MOD_APPLE_TWIDDLED (2)
-#endif
-#ifndef DRM_FORMAT_MOD_APPLE_TWIDDLED_COMPRESSED
-#define DRM_FORMAT_MOD_APPLE_TWIDDLED_COMPRESSED (3)
-#endif
diff --git a/src/compiler/nir/nir_lower_helper_writes.c b/src/compiler/nir/nir_lower_helper_writes.c
index c06123cf1dd..9bb9634e978 100644
--- a/src/compiler/nir/nir_lower_helper_writes.c
+++ b/src/compiler/nir/nir_lower_helper_writes.c
@@ -53,7 +53,7 @@ lower(nir_builder *b, nir_intrinsic_instr *intr, void *data)
    bool has_dest = nir_intrinsic_infos[intr->intrinsic].has_dest;
    nir_def *undef = NULL;
 
-   nir_def *helper = nir_load_helper_invocation(b, 1);
+   nir_def *helper = nir_is_helper_invocation(b, 1);
    nir_push_if(b, nir_inot(b, helper));
    nir_instr_remove(&intr->instr);
    nir_builder_instr_insert(b, &intr->instr);
diff --git a/src/compiler/spirv/spirv_to_nir.c b/src/compiler/spirv/spirv_to_nir.c
index e1851672fa5..3d8d793f79e 100644
--- a/src/compiler/spirv/spirv_to_nir.c
+++ b/src/compiler/spirv/spirv_to_nir.c
@@ -1744,7 +1744,7 @@ validate_image_type_for_sampled_image(struct vtn_builder *b,
          vtn_fail("Starting with SPIR-V 1.6, %s "
                   "must not have a Dim of Buffer.", operand);
       } else {
-         vtn_warn("%s should not have a Dim of Buffer.", operand);
+         //vtn_warn("%s should not have a Dim of Buffer.", operand);
       }
    }
 }
diff --git a/src/gallium/auxiliary/pipe-loader/pipe_loader_drm.c b/src/gallium/auxiliary/pipe-loader/pipe_loader_drm.c
index 985ace997bd..b56b0081749 100644
--- a/src/gallium/auxiliary/pipe-loader/pipe_loader_drm.c
+++ b/src/gallium/auxiliary/pipe-loader/pipe_loader_drm.c
@@ -88,6 +88,7 @@ static const struct drm_driver_descriptor *driver_descriptors[] = {
    &vc4_driver_descriptor,
    &panfrost_driver_descriptor,
    &panthor_driver_descriptor,
+   &asahi_driver_descriptor,
    &etnaviv_driver_descriptor,
    &tegra_driver_descriptor,
    &lima_driver_descriptor,
@@ -313,6 +314,9 @@ pipe_loader_get_compatible_render_capable_device_fd(int kms_only_fd)
    bool is_platform_device;
    struct pipe_loader_device *dev;
    const char * const drivers[] = {
+#if defined GALLIUM_ASAHI
+      "asahi",
+#endif
 #if defined GALLIUM_ETNAVIV
       "etnaviv",
 #endif
diff --git a/src/gallium/auxiliary/target-helpers/drm_helper.h b/src/gallium/auxiliary/target-helpers/drm_helper.h
index 3ddab30af49..446e0e12023 100644
--- a/src/gallium/auxiliary/target-helpers/drm_helper.h
+++ b/src/gallium/auxiliary/target-helpers/drm_helper.h
@@ -351,6 +351,27 @@ DRM_DRIVER_DESCRIPTOR_STUB(panfrost)
 DRM_DRIVER_DESCRIPTOR_STUB(panthor)
 #endif
 
+#ifdef GALLIUM_ASAHI
+#include "asahi/drm/asahi_drm_public.h"
+
+static struct pipe_screen *
+pipe_asahi_create_screen(int fd, const struct pipe_screen_config *config)
+{
+   struct pipe_screen *screen;
+
+   screen = asahi_drm_screen_create(fd, config);
+   return screen ? debug_screen_wrap(screen) : NULL;
+}
+
+const driOptionDescription asahi_driconf[] = {
+      #include "asahi/driinfo_asahi.h"
+};
+DRM_DRIVER_DESCRIPTOR(asahi, asahi_driconf, ARRAY_SIZE(asahi_driconf))
+
+#else
+DRM_DRIVER_DESCRIPTOR_STUB(asahi)
+#endif
+
 #ifdef GALLIUM_ETNAVIV
 #include "etnaviv/drm/etnaviv_drm_public.h"
 
diff --git a/src/gallium/auxiliary/target-helpers/drm_helper_public.h b/src/gallium/auxiliary/target-helpers/drm_helper_public.h
index f3889694354..e7fcd6b379f 100644
--- a/src/gallium/auxiliary/target-helpers/drm_helper_public.h
+++ b/src/gallium/auxiliary/target-helpers/drm_helper_public.h
@@ -19,6 +19,7 @@ extern const struct drm_driver_descriptor v3d_driver_descriptor;
 extern const struct drm_driver_descriptor vc4_driver_descriptor;
 extern const struct drm_driver_descriptor panfrost_driver_descriptor;
 extern const struct drm_driver_descriptor panthor_driver_descriptor;
+extern const struct drm_driver_descriptor asahi_driver_descriptor;
 extern const struct drm_driver_descriptor etnaviv_driver_descriptor;
 extern const struct drm_driver_descriptor tegra_driver_descriptor;
 extern const struct drm_driver_descriptor lima_driver_descriptor;
diff --git a/src/gallium/drivers/asahi/agx_pipe.c b/src/gallium/drivers/asahi/agx_pipe.c
index 2b075fb4f95..67bd1f029f7 100644
--- a/src/gallium/drivers/asahi/agx_pipe.c
+++ b/src/gallium/drivers/asahi/agx_pipe.c
@@ -404,6 +404,15 @@ agx_compression_allowed(const struct agx_resource *pres)
       return false;
    }
 
+   /* Workaround for https://github.com/supertuxkart/stk-code/issues/4863
+    *
+    * XXX: Fix upstream or at least driconf, this is terrible.
+    */
+   if (strcmp(util_get_process_name(), "supertuxkart") == 0) {
+      if (pres->base.bind & PIPE_BIND_DEPTH_STENCIL)
+         return false;
+   }
+
    /* Limited to renderable */
    if (pres->base.bind &
        ~(PIPE_BIND_SAMPLER_VIEW | PIPE_BIND_RENDER_TARGET |
@@ -2583,13 +2592,6 @@ agx_screen_create(int fd, struct renderonly *ro,
    struct agx_screen *agx_screen;
    struct pipe_screen *screen;
 
-   /* Refuse to probe. There is no stable UAPI yet. Upstream Mesa cannot be used
-    * yet with Asahi. Do not try. Do not patch out this check. Do not teach
-    * others about patching this check. Do not distribute upstream Mesa with
-    * this check patched out.
-    */
-   return NULL;
-
    agx_screen = rzalloc(NULL, struct agx_screen);
    if (!agx_screen)
       return NULL;
diff --git a/src/gallium/targets/dril/meson.build b/src/gallium/targets/dril/meson.build
index 7cfa982ffe1..896b25242e0 100644
--- a/src/gallium/targets/dril/meson.build
+++ b/src/gallium/targets/dril/meson.build
@@ -63,6 +63,7 @@ dril_dri = shared_library(
 )
 
 foreach d : [[with_gallium_kmsro, [
+               'apple_dri.so',
                'armada-drm_dri.so',
                'exynos_dri.so',
                'gm12u320_dri.so',
-- 
2.48.1


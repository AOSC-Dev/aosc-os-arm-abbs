From 0b3a7fbefd65071bb7acac2924b66ac459e09a9b Mon Sep 17 00:00:00 2001
From: eatradish <sakiiily@aosc.io>
Date: Mon, 15 Jul 2024 15:43:38 +0800
Subject: [PATCH 1/2] Disable check update and not use `rust-toolchain.toml`

---
 Cargo.lock                                    | 29 -------
 Cargo.toml                                    |  2 -
 assets/settings/default.json                  |  2 +-
 crates/activity_indicator/Cargo.toml          |  1 -
 .../src/activity_indicator.rs                 | 75 +------------------
 crates/title_bar/Cargo.toml                   |  1 -
 crates/title_bar/src/title_bar.rs             | 31 +-------
 crates/zed/Cargo.toml                         |  1 -
 crates/zed/src/main.rs                        |  2 -
 crates/zed/src/zed.rs                         |  2 -
 crates/zed/src/zed/app_menus.rs               |  1 -
 rust-toolchain.toml                           |  5 --
 12 files changed, 3 insertions(+), 149 deletions(-)
 delete mode 100644 rust-toolchain.toml

diff --git a/Cargo.lock b/Cargo.lock
index f09a7a31f..495900b0c 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -7,7 +7,6 @@ name = "activity_indicator"
 version = "0.1.0"
 dependencies = [
  "anyhow",
- "auto_update",
  "editor",
  "extension",
  "futures 0.3.28",
@@ -966,32 +965,6 @@ dependencies = [
  "util",
 ]
 
-[[package]]
-name = "auto_update"
-version = "0.1.0"
-dependencies = [
- "anyhow",
- "client",
- "db",
- "editor",
- "gpui",
- "http 0.1.0",
- "isahc",
- "log",
- "markdown_preview",
- "menu",
- "release_channel",
- "schemars",
- "serde",
- "serde_derive",
- "serde_json",
- "settings",
- "smol",
- "tempfile",
- "util",
- "workspace",
-]
-
 [[package]]
 name = "autocfg"
 version = "1.1.0"
@@ -11026,7 +10999,6 @@ checksum = "1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20"
 name = "title_bar"
 version = "0.1.0"
 dependencies = [
- "auto_update",
  "call",
  "client",
  "collections",
@@ -13569,7 +13541,6 @@ dependencies = [
  "assets",
  "assistant",
  "audio",
- "auto_update",
  "backtrace",
  "breadcrumbs",
  "call",
diff --git a/Cargo.toml b/Cargo.toml
index 35e4fec0f..2e8b947aa 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -7,7 +7,6 @@ members = [
     "crates/assistant_slash_command",
     "crates/assistant_tooling",
     "crates/audio",
-    "crates/auto_update",
     "crates/breadcrumbs",
     "crates/call",
     "crates/channel",
@@ -160,7 +159,6 @@ assistant = { path = "crates/assistant" }
 assistant_slash_command = { path = "crates/assistant_slash_command" }
 assistant_tooling = { path = "crates/assistant_tooling" }
 audio = { path = "crates/audio" }
-auto_update = { path = "crates/auto_update" }
 breadcrumbs = { path = "crates/breadcrumbs" }
 call = { path = "crates/call" }
 channel = { path = "crates/channel" }
diff --git a/assets/settings/default.json b/assets/settings/default.json
index 3d13dd7cf..d17a935de 100644
--- a/assets/settings/default.json
+++ b/assets/settings/default.json
@@ -503,7 +503,7 @@
   },
   // Automatically update Zed. This setting may be ignored on Linux if
   // installed through a package manager.
-  "auto_update": true,
+  "auto_update": false,
   // Diagnostics configuration.
   "diagnostics": {
     // Whether to show warnings or not by default.
diff --git a/crates/activity_indicator/Cargo.toml b/crates/activity_indicator/Cargo.toml
index 9761a0823..8d749e79f 100644
--- a/crates/activity_indicator/Cargo.toml
+++ b/crates/activity_indicator/Cargo.toml
@@ -14,7 +14,6 @@ doctest = false
 
 [dependencies]
 anyhow.workspace = true
-auto_update.workspace = true
 editor.workspace = true
 extension.workspace = true
 futures.workspace = true
diff --git a/crates/activity_indicator/src/activity_indicator.rs b/crates/activity_indicator/src/activity_indicator.rs
index 89023c12c..de9393227 100644
--- a/crates/activity_indicator/src/activity_indicator.rs
+++ b/crates/activity_indicator/src/activity_indicator.rs
@@ -1,4 +1,3 @@
-use auto_update::{AutoUpdateStatus, AutoUpdater, DismissErrorMessage};
 use editor::Editor;
 use extension::ExtensionStore;
 use futures::StreamExt;
@@ -26,7 +25,6 @@ pub enum Event {
 pub struct ActivityIndicator {
     statuses: Vec<LspStatus>,
     project: Model<Project>,
-    auto_updater: Option<Model<AutoUpdater>>,
     context_menu: Option<View<ContextMenu>>,
 }
 
@@ -55,7 +53,6 @@ impl ActivityIndicator {
         cx: &mut ViewContext<Workspace>,
     ) -> View<ActivityIndicator> {
         let project = workspace.project().clone();
-        let auto_updater = AutoUpdater::get(cx);
         let this = cx.new_view(|cx: &mut ViewContext<Self>| {
             let mut status_events = languages.language_server_binary_statuses();
             cx.spawn(|this, mut cx| async move {
@@ -71,14 +68,9 @@ impl ActivityIndicator {
             .detach();
             cx.observe(&project, |_, _, cx| cx.notify()).detach();
 
-            if let Some(auto_updater) = auto_updater.as_ref() {
-                cx.observe(auto_updater, |_, _, cx| cx.notify()).detach();
-            }
-
             Self {
                 statuses: Default::default(),
                 project: project.clone(),
-                auto_updater,
                 context_menu: None,
             }
         });
@@ -136,15 +128,6 @@ impl ActivityIndicator {
         cx.notify();
     }
 
-    fn dismiss_error_message(&mut self, _: &DismissErrorMessage, cx: &mut ViewContext<Self>) {
-        if let Some(updater) = &self.auto_updater {
-            updater.update(cx, |updater, cx| {
-                updater.dismiss_error(cx);
-            });
-        }
-        cx.notify();
-    }
-
     fn pending_language_server_work<'a>(
         &self,
         cx: &'a AppContext,
@@ -292,61 +275,6 @@ impl ActivityIndicator {
             };
         }
 
-        // Show any application auto-update info.
-        if let Some(updater) = &self.auto_updater {
-            return match &updater.read(cx).status() {
-                AutoUpdateStatus::Checking => Content {
-                    icon: Some(
-                        Icon::new(IconName::Download)
-                            .size(IconSize::Small)
-                            .into_any_element(),
-                    ),
-                    message: "Checking for Zed updates…".to_string(),
-                    on_click: None,
-                },
-                AutoUpdateStatus::Downloading => Content {
-                    icon: Some(
-                        Icon::new(IconName::Download)
-                            .size(IconSize::Small)
-                            .into_any_element(),
-                    ),
-                    message: "Downloading Zed update…".to_string(),
-                    on_click: None,
-                },
-                AutoUpdateStatus::Installing => Content {
-                    icon: Some(
-                        Icon::new(IconName::Download)
-                            .size(IconSize::Small)
-                            .into_any_element(),
-                    ),
-                    message: "Installing Zed update…".to_string(),
-                    on_click: None,
-                },
-                AutoUpdateStatus::Updated { binary_path } => Content {
-                    icon: None,
-                    message: "Click to restart and update Zed".to_string(),
-                    on_click: Some(Arc::new({
-                        let reload = workspace::Reload {
-                            binary_path: Some(binary_path.clone()),
-                        };
-                        move |_, cx| workspace::reload(&reload, cx)
-                    })),
-                },
-                AutoUpdateStatus::Errored => Content {
-                    icon: Some(
-                        Icon::new(IconName::ExclamationTriangle)
-                            .size(IconSize::Small)
-                            .into_any_element(),
-                    ),
-                    message: "Auto update failed".to_string(),
-                    on_click: Some(Arc::new(|this, cx| {
-                        this.dismiss_error_message(&Default::default(), cx)
-                    })),
-                },
-                AutoUpdateStatus::Idle => Default::default(),
-            };
-        }
-
         if let Some(extension_store) =
             ExtensionStore::try_global(cx).map(|extension_store| extension_store.read(cx))
         {
@@ -444,8 +372,7 @@ impl Render for ActivityIndicator {
 
         let mut result = h_flex()
             .id("activity-indicator")
-            .on_action(cx.listener(Self::show_error_message))
-            .on_action(cx.listener(Self::dismiss_error_message));
+            .on_action(cx.listener(Self::show_error_message));
 
         if let Some(on_click) = content.on_click {
             result = result
diff --git a/crates/title_bar/Cargo.toml b/crates/title_bar/Cargo.toml
index 5e5bd754e..d3e2055c1 100644
--- a/crates/title_bar/Cargo.toml
+++ b/crates/title_bar/Cargo.toml
@@ -29,7 +29,6 @@ test-support = [
 ]
 
 [dependencies]
-auto_update.workspace = true
 call.workspace = true
 client.workspace = true
 command_palette.workspace = true
diff --git a/crates/title_bar/src/title_bar.rs b/crates/title_bar/src/title_bar.rs
index 4926ec51b..51d19be17 100644
--- a/crates/title_bar/src/title_bar.rs
+++ b/crates/title_bar/src/title_bar.rs
@@ -4,7 +4,6 @@ mod platforms;
 mod window_controls;
 
 use crate::platforms::{platform_linux, platform_mac, platform_windows};
-use auto_update::AutoUpdateStatus;
 use call::{ActiveCall, ParticipantLocation};
 use client::{Client, UserStore};
 use collab::render_color_ribbon;
@@ -645,7 +644,6 @@ impl TitleBar {
                                 }),
                             )
                             .action("Give Feedback", Box::new(feedback::GiveFeedback))
-                            .action("Check for Updates", Box::new(auto_update::Check))
                             .action("View Telemetry", Box::new(zed_actions::OpenTelemetryLog))
                             .action(
                                 "View Dependency Licenses",
@@ -862,7 +860,7 @@ impl TitleBar {
     fn render_connection_status(
         &self,
         status: &client::Status,
-        cx: &mut ViewContext<Self>,
+        _cx: &mut ViewContext<Self>,
     ) -> Option<AnyElement> {
         match status {
             client::Status::ConnectionError
@@ -876,33 +874,6 @@ impl TitleBar {
                     .tooltip(|cx| Tooltip::text("Disconnected", cx))
                     .into_any_element(),
             ),
-            client::Status::UpgradeRequired => {
-                let auto_updater = auto_update::AutoUpdater::get(cx);
-                let label = match auto_updater.map(|auto_update| auto_update.read(cx).status()) {
-                    Some(AutoUpdateStatus::Updated { .. }) => "Please restart Zed to Collaborate",
-                    Some(AutoUpdateStatus::Installing)
-                    | Some(AutoUpdateStatus::Downloading)
-                    | Some(AutoUpdateStatus::Checking) => "Updating...",
-                    Some(AutoUpdateStatus::Idle) | Some(AutoUpdateStatus::Errored) | None => {
-                        "Please update Zed to Collaborate"
-                    }
-                };
-
-                Some(
-                    Button::new("connection-status", label)
-                        .label_size(LabelSize::Small)
-                        .on_click(|_, cx| {
-                            if let Some(auto_updater) = auto_update::AutoUpdater::get(cx) {
-                                if auto_updater.read(cx).status().is_updated() {
-                                    workspace::reload(&Default::default(), cx);
-                                    return;
-                                }
-                            }
-                            auto_update::check(&Default::default(), cx);
-                        })
-                        .into_any_element(),
-                )
-            }
             _ => None,
         }
     }
diff --git a/crates/zed/Cargo.toml b/crates/zed/Cargo.toml
index 076dcdf2b..3a5d3a4df 100644
--- a/crates/zed/Cargo.toml
+++ b/crates/zed/Cargo.toml
@@ -20,7 +20,6 @@ anyhow.workspace = true
 assets.workspace = true
 assistant.workspace = true
 audio.workspace = true
-auto_update.workspace = true
 backtrace = "0.3"
 breadcrumbs.workspace = true
 call.workspace = true
diff --git a/crates/zed/src/main.rs b/crates/zed/src/main.rs
index f623e5fcd..bc48bd066 100644
--- a/crates/zed/src/main.rs
+++ b/crates/zed/src/main.rs
@@ -434,8 +434,6 @@ fn main() {
         });
         AppState::set_global(Arc::downgrade(&app_state), cx);
 
-        auto_update::init(client.http_client(), cx);
-
         reliability::init(client.http_client(), installation_id, cx);
 
         let args = Args::parse();
diff --git a/crates/zed/src/zed.rs b/crates/zed/src/zed.rs
index 3bd98963f..24443262f 100644
--- a/crates/zed/src/zed.rs
+++ b/crates/zed/src/zed.rs
@@ -160,8 +160,6 @@ pub fn initialize_workspace(app_state: Arc<AppState>, cx: &mut AppContext) {
             status_bar.add_right_item(cursor_position, cx);
         });
 
-        auto_update::notify_of_any_new_update(cx);
-
         let handle = cx.view().downgrade();
         cx.on_window_should_close(move |cx| {
             handle
diff --git a/crates/zed/src/zed/app_menus.rs b/crates/zed/src/zed/app_menus.rs
index 403b28e36..1879329d7 100644
--- a/crates/zed/src/zed/app_menus.rs
+++ b/crates/zed/src/zed/app_menus.rs
@@ -10,7 +10,6 @@ pub fn app_menus() -> Vec<Menu<'static>> {
             name: "Zed",
             items: vec![
                 MenuItem::action("About Zed…", zed_actions::About),
-                MenuItem::action("Check for Updates", auto_update::Check),
                 MenuItem::separator(),
                 MenuItem::submenu(Menu {
                     name: "Preferences",
diff --git a/rust-toolchain.toml b/rust-toolchain.toml
deleted file mode 100644
index 8d422bd51..000000000
--- a/rust-toolchain.toml
+++ /dev/null
@@ -1,5 +0,0 @@
-[toolchain]
-channel = "1.79"
-profile = "minimal"
-components = [ "rustfmt", "clippy" ]
-targets = [ "x86_64-apple-darwin", "aarch64-apple-darwin", "x86_64-unknown-linux-gnu", "wasm32-wasi" ]
-- 
2.45.2


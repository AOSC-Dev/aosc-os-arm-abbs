From 4e24b2705300937171fe8d5188494dbafac0546c Mon Sep 17 00:00:00 2001
From: "Unknown W. Brackets" <checkins@unknownbrackets.org>
Date: Mon, 8 Feb 2021 23:30:14 -0800
Subject: [PATCH] mipsjit: Fix basic compilation.

---
 Core/MIPS/JitCommon/JitState.cpp |  4 ++++
 Core/MIPS/MIPS/MipsJit.cpp       | 18 ++++++++++++++++++
 Core/MIPS/MIPS/MipsJit.h         | 14 +++++++++++---
 3 files changed, 33 insertions(+), 3 deletions(-)

diff --git a/Core/MIPS/JitCommon/JitState.cpp b/Core/MIPS/JitCommon/JitState.cpp
index 895589cad..d564b57d5 100644
--- a/Core/MIPS/JitCommon/JitState.cpp
+++ b/Core/MIPS/JitCommon/JitState.cpp
@@ -47,7 +47,11 @@ namespace MIPSComp {
 
 		// We can get block linking to work with W^X by doing even more unprotect/re-protect, but let's try without first.
 		// enableBlocklink = !PlatformIsWXExclusive();  // Revert to this line if block linking is slow in W^X mode
+#if PPSSPP_ARCH(MIPS)
+		enableBlocklink = false;
+#else
 		enableBlocklink = !Disabled(JitDisable::BLOCKLINK);
+#endif
 		immBranches = false;
 		continueBranches = false;
 		continueJumps = false;
diff --git a/Core/MIPS/MIPS/MipsJit.cpp b/Core/MIPS/MIPS/MipsJit.cpp
index 33013481a..5103b226a 100644
--- a/Core/MIPS/MIPS/MipsJit.cpp
+++ b/Core/MIPS/MIPS/MipsJit.cpp
@@ -79,6 +79,16 @@ void MipsJit::FlushPrefixV()
 {
 }
 
+MIPSOpcode MipsJit::GetOriginalOp(MIPSOpcode op) {
+	JitBlockCache *bc = GetBlockCache();
+	int block_num = bc->GetBlockNumberFromEmuHackOp(op, true);
+	if (block_num >= 0) {
+		return bc->GetOriginalFirstOp(block_num);
+	} else {
+		return op;
+	}
+}
+
 void MipsJit::ClearCache()
 {
 	blocks.Clear();
@@ -226,6 +236,14 @@ void MipsJit::Comp_RunBlock(MIPSOpcode op)
 	ERROR_LOG(JIT, "Comp_RunBlock should never be reached!");
 }
 
+void MipsJit::LinkBlock(u8 *exitPoint, const u8 *checkedEntry) {
+	// TODO
+}
+
+void MipsJit::UnlinkBlock(u8 *checkedEntry, u32 originalAddress) {
+	// TODO
+}
+
 bool MipsJit::ReplaceJalTo(u32 dest) {
 	const ReplacementTableEntry *entry = nullptr;
 	u32 funcSize = 0;
diff --git a/Core/MIPS/MIPS/MipsJit.h b/Core/MIPS/MIPS/MipsJit.h
index 23b164b1e..2ef4ccbec 100644
--- a/Core/MIPS/MIPS/MipsJit.h
+++ b/Core/MIPS/MIPS/MipsJit.h
@@ -49,6 +49,8 @@ class MipsJit : public MIPSGen::MIPSCodeBlock, public JitInterface, public MIPSF
 	void Compile(u32 em_address) override;	// Compiles a block at current MIPS PC
 	const u8 *DoJit(u32 em_address, JitBlock *b);
 
+	const u8 *GetCrashHandler() const override { return nullptr; }
+	bool CodeInRange(const u8 *ptr) const override { return IsInSpace(ptr); }
 	bool DescribeCodePtr(const u8 *ptr, std::string &name);
 
 	void CompileDelaySlot(int flags);
@@ -131,6 +133,8 @@ class MipsJit : public MIPSGen::MIPSCodeBlock, public JitInterface, public MIPSF
 	JitBlockCache *GetBlockCache() override { return &blocks; }
 	JitBlockCacheDebugInterface *GetBlockCacheDebugInterface() override { return &blocks; }
 
+	MIPSOpcode GetOriginalOp(MIPSOpcode op) override;
+
 	std::vector<u32> SaveAndClearEmuHackOps() override { return blocks.SaveAndClearEmuHackOps(); }
 	void RestoreSavedEmuHackOps(std::vector<u32> saved) override { blocks.RestoreSavedEmuHackOps(saved); }
 
@@ -138,6 +142,13 @@ class MipsJit : public MIPSGen::MIPSCodeBlock, public JitInterface, public MIPSF
 	void InvalidateCacheAt(u32 em_address, int length = 4) override;
 	void UpdateFCR31() override;
 
+	const u8 *GetDispatcher() const override {
+		return dispatcher;
+	}
+
+	void LinkBlock(u8 *exitPoint, const u8 *checkedEntry) override;
+	void UnlinkBlock(u8 *checkedEntry, u32 originalAddress) override;
+
 	void EatPrefix() override { js.EatPrefix(); }
 
 private:
@@ -183,8 +194,5 @@ class MipsJit : public MIPSGen::MIPSCodeBlock, public JitInterface, public MIPSF
 	const u8 *dispatcherNoCheck;
 };
 
-typedef void (MipsJit::*MIPSCompileFunc)(MIPSOpcode opcode);
-typedef int (MipsJit::*MIPSReplaceFunc)();
-
 }	// namespace MIPSComp
 
-- 
2.30.0


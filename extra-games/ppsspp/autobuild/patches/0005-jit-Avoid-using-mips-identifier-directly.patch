From cae08150957edadc89a2b35f29c0e31b09c2865e Mon Sep 17 00:00:00 2001
From: "Unknown W. Brackets" <checkins@unknownbrackets.org>
Date: Thu, 25 Feb 2021 20:20:36 -0800
Subject: [PATCH] jit: Avoid using mips identifier directly.

Apparently this gets defined on mips systems.
---
 Core/MIPS/ARM/ArmJit.cpp              |  2 +-
 Core/MIPS/ARM/ArmJit.h                |  2 +-
 Core/MIPS/ARM/ArmRegCache.cpp         |  2 +-
 Core/MIPS/ARM/ArmRegCache.h           |  2 +-
 Core/MIPS/ARM/ArmRegCacheFPU.cpp      |  2 +-
 Core/MIPS/ARM/ArmRegCacheFPU.h        |  4 ++--
 Core/MIPS/ARM64/Arm64Jit.cpp          |  2 +-
 Core/MIPS/ARM64/Arm64Jit.h            |  2 +-
 Core/MIPS/ARM64/Arm64RegCache.cpp     |  2 +-
 Core/MIPS/ARM64/Arm64RegCache.h       |  2 +-
 Core/MIPS/ARM64/Arm64RegCacheFPU.cpp  |  2 +-
 Core/MIPS/ARM64/Arm64RegCacheFPU.h    |  4 ++--
 Core/MIPS/IR/IRInst.h                 |  2 +-
 Core/MIPS/IR/IRInterpreter.cpp        |  6 ++++++
 Core/MIPS/IR/IRInterpreter.h          |  2 +-
 Core/MIPS/IR/IRJit.cpp                |  2 +-
 Core/MIPS/IR/IRJit.h                  |  2 +-
 Core/MIPS/JitCommon/JitBlockCache.cpp |  2 +-
 Core/MIPS/JitCommon/JitBlockCache.h   |  2 +-
 Core/MIPS/JitCommon/JitCommon.cpp     | 12 ++++++------
 Core/MIPS/JitCommon/JitCommon.h       |  2 +-
 Core/MIPS/MIPS.h                      |  2 +-
 Core/MIPS/MIPS/MipsJit.cpp            |  2 +-
 Core/MIPS/MIPS/MipsJit.h              |  2 +-
 Core/MIPS/fake/FakeJit.cpp            |  2 +-
 Core/MIPS/fake/FakeJit.h              |  2 +-
 Core/MIPS/x86/Jit.cpp                 |  4 ++--
 Core/MIPS/x86/Jit.h                   |  2 +-
 Core/MIPS/x86/RegCache.cpp            | 10 ++++------
 Core/MIPS/x86/RegCache.h              | 10 +++++-----
 Core/MIPS/x86/RegCacheFPU.cpp         | 18 ++++++++----------
 Core/MIPS/x86/RegCacheFPU.h           | 20 ++++++++++----------
 unittest/TestArmEmitter.cpp           |  4 ++--
 33 files changed, 70 insertions(+), 68 deletions(-)

diff --git a/Core/MIPS/ARM/ArmJit.cpp b/Core/MIPS/ARM/ArmJit.cpp
index 653e1afe4..a557bc41d 100644
--- a/Core/MIPS/ARM/ArmJit.cpp
+++ b/Core/MIPS/ARM/ArmJit.cpp
@@ -104,7 +104,7 @@ namespace MIPSComp
 using namespace ArmGen;
 using namespace ArmJitConstants;
 
-ArmJit::ArmJit(MIPSState *mips) : blocks(mips, this), gpr(mips, &js, &jo), fpr(mips, &js, &jo), mips_(mips) { 
+ArmJit::ArmJit(MIPSState *mipsState) : blocks(mipsState, this), gpr(mipsState, &js, &jo), fpr(mipsState, &js, &jo), mips_(mipsState) {
 	logBlocks = 0;
 	dontLogBlocks = 0;
 	blocks.Init();
diff --git a/Core/MIPS/ARM/ArmJit.h b/Core/MIPS/ARM/ArmJit.h
index b6e313891..829f53ef7 100644
--- a/Core/MIPS/ARM/ArmJit.h
+++ b/Core/MIPS/ARM/ArmJit.h
@@ -35,7 +35,7 @@ namespace MIPSComp {
 
 class ArmJit : public ArmGen::ARMXCodeBlock, public JitInterface, public MIPSFrontendInterface {
 public:
-	ArmJit(MIPSState *mips);
+	ArmJit(MIPSState *mipsState);
 	virtual ~ArmJit();
 
 	void DoState(PointerWrap &p) override;
diff --git a/Core/MIPS/ARM/ArmRegCache.cpp b/Core/MIPS/ARM/ArmRegCache.cpp
index 8431caadf..61b16b5c5 100644
--- a/Core/MIPS/ARM/ArmRegCache.cpp
+++ b/Core/MIPS/ARM/ArmRegCache.cpp
@@ -32,7 +32,7 @@
 using namespace ArmGen;
 using namespace ArmJitConstants;
 
-ArmRegCache::ArmRegCache(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo) : mips_(mips), js_(js), jo_(jo) {
+ArmRegCache::ArmRegCache(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo) : mips_(mipsState), js_(js), jo_(jo) {
 }
 
 void ArmRegCache::Init(ARMXEmitter *emitter) {
diff --git a/Core/MIPS/ARM/ArmRegCache.h b/Core/MIPS/ARM/ArmRegCache.h
index 34dec9d77..bd85cc10b 100644
--- a/Core/MIPS/ARM/ArmRegCache.h
+++ b/Core/MIPS/ARM/ArmRegCache.h
@@ -84,7 +84,7 @@ namespace MIPSComp {
 
 class ArmRegCache {
 public:
-	ArmRegCache(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo);
+	ArmRegCache(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo);
 	~ArmRegCache() {}
 
 	void Init(ArmGen::ARMXEmitter *emitter);
diff --git a/Core/MIPS/ARM/ArmRegCacheFPU.cpp b/Core/MIPS/ARM/ArmRegCacheFPU.cpp
index b5e53d4f9..c939e4840 100644
--- a/Core/MIPS/ARM/ArmRegCacheFPU.cpp
+++ b/Core/MIPS/ARM/ArmRegCacheFPU.cpp
@@ -27,7 +27,7 @@
 using namespace ArmGen;
 using namespace ArmJitConstants;
 
-ArmRegCacheFPU::ArmRegCacheFPU(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo) : mips_(mips), js_(js), jo_(jo), vr(mr + 32), initialReady(false) {
+ArmRegCacheFPU::ArmRegCacheFPU(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo) : mips_(mipsState), js_(js), jo_(jo), vr(mr + 32) {
 	if (cpu_info.bNEON) {
 		numARMFpuReg_ = 32;
 	} else {
diff --git a/Core/MIPS/ARM/ArmRegCacheFPU.h b/Core/MIPS/ARM/ArmRegCacheFPU.h
index f14dc4bad..327ef6419 100644
--- a/Core/MIPS/ARM/ArmRegCacheFPU.h
+++ b/Core/MIPS/ARM/ArmRegCacheFPU.h
@@ -79,7 +79,7 @@ namespace MIPSComp {
 
 class ArmRegCacheFPU {
 public:
-	ArmRegCacheFPU(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo);
+	ArmRegCacheFPU(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo);
 	~ArmRegCacheFPU() {}
 
 	void Init(ArmGen::ARMXEmitter *emitter);
@@ -206,7 +206,7 @@ class ArmRegCacheFPU {
 	FPURegMIPS *vr;
 
 	bool pendingFlush;
-	bool initialReady;
+	bool initialReady = false;
 	FPURegARM arInitial[MAX_ARMFPUREG];
 	FPURegMIPS mrInitial[NUM_MIPSFPUREG];
 };
diff --git a/Core/MIPS/ARM64/Arm64Jit.cpp b/Core/MIPS/ARM64/Arm64Jit.cpp
index 6a518cc97..1b989a8d6 100644
--- a/Core/MIPS/ARM64/Arm64Jit.cpp
+++ b/Core/MIPS/ARM64/Arm64Jit.cpp
@@ -94,7 +94,7 @@ namespace MIPSComp
 using namespace Arm64Gen;
 using namespace Arm64JitConstants;
 
-Arm64Jit::Arm64Jit(MIPSState *mips) : blocks(mips, this), gpr(mips, &js, &jo), fpr(mips, &js, &jo), mips_(mips), fp(this) { 
+Arm64Jit::Arm64Jit(MIPSState *mipsState) : blocks(mipsState, this), gpr(mipsState, &js, &jo), fpr(mipsState, &js, &jo), mips_(mipsState), fp(this) {
 	// Automatically disable incompatible options.
 	if (((intptr_t)Memory::base & 0x00000000FFFFFFFFUL) != 0) {
 		jo.enablePointerify = false;
diff --git a/Core/MIPS/ARM64/Arm64Jit.h b/Core/MIPS/ARM64/Arm64Jit.h
index 95affe251..a9c97a85a 100644
--- a/Core/MIPS/ARM64/Arm64Jit.h
+++ b/Core/MIPS/ARM64/Arm64Jit.h
@@ -35,7 +35,7 @@ namespace MIPSComp {
 
 class Arm64Jit : public Arm64Gen::ARM64CodeBlock, public JitInterface, public MIPSFrontendInterface {
 public:
-	Arm64Jit(MIPSState *mips);
+	Arm64Jit(MIPSState *mipsState);
 	virtual ~Arm64Jit();
 
 	void DoState(PointerWrap &p) override;
diff --git a/Core/MIPS/ARM64/Arm64RegCache.cpp b/Core/MIPS/ARM64/Arm64RegCache.cpp
index b084adf10..ac97e33e7 100644
--- a/Core/MIPS/ARM64/Arm64RegCache.cpp
+++ b/Core/MIPS/ARM64/Arm64RegCache.cpp
@@ -33,7 +33,7 @@
 using namespace Arm64Gen;
 using namespace Arm64JitConstants;
 
-Arm64RegCache::Arm64RegCache(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo) : mips_(mips), js_(js), jo_(jo) {
+Arm64RegCache::Arm64RegCache(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo) : mips_(mipsState), js_(js), jo_(jo) {
 }
 
 void Arm64RegCache::Init(ARM64XEmitter *emitter) {
diff --git a/Core/MIPS/ARM64/Arm64RegCache.h b/Core/MIPS/ARM64/Arm64RegCache.h
index b95caf785..62f777119 100644
--- a/Core/MIPS/ARM64/Arm64RegCache.h
+++ b/Core/MIPS/ARM64/Arm64RegCache.h
@@ -82,7 +82,7 @@ namespace MIPSComp {
 
 class Arm64RegCache {
 public:
-	Arm64RegCache(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo);
+	Arm64RegCache(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo);
 	~Arm64RegCache() {}
 
 	void Init(Arm64Gen::ARM64XEmitter *emitter);
diff --git a/Core/MIPS/ARM64/Arm64RegCacheFPU.cpp b/Core/MIPS/ARM64/Arm64RegCacheFPU.cpp
index fffb38fcc..9d177ba49 100644
--- a/Core/MIPS/ARM64/Arm64RegCacheFPU.cpp
+++ b/Core/MIPS/ARM64/Arm64RegCacheFPU.cpp
@@ -31,7 +31,7 @@
 using namespace Arm64Gen;
 using namespace Arm64JitConstants;
 
-Arm64RegCacheFPU::Arm64RegCacheFPU(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo) : mips_(mips), vr(mr + 32), js_(js), jo_(jo), initialReady(false) {
+Arm64RegCacheFPU::Arm64RegCacheFPU(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo) : mips_(mipsState), vr(mr + 32), js_(js), jo_(jo) {
 	numARMFpuReg_ = 32;
 }
 
diff --git a/Core/MIPS/ARM64/Arm64RegCacheFPU.h b/Core/MIPS/ARM64/Arm64RegCacheFPU.h
index 1fe253704..13284d238 100644
--- a/Core/MIPS/ARM64/Arm64RegCacheFPU.h
+++ b/Core/MIPS/ARM64/Arm64RegCacheFPU.h
@@ -79,7 +79,7 @@ namespace MIPSComp {
 
 class Arm64RegCacheFPU {
 public:
-	Arm64RegCacheFPU(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo);
+	Arm64RegCacheFPU(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo);
 	~Arm64RegCacheFPU() {}
 
 	void Init(Arm64Gen::ARM64XEmitter *emitter, Arm64Gen::ARM64FloatEmitter *fp);
@@ -175,7 +175,7 @@ class Arm64RegCacheFPU {
 	FPURegMIPS *vr;
 
 	bool pendingFlush;
-	bool initialReady;
+	bool initialReady = false;
 	FPURegARM64 arInitial[MAX_ARMFPUREG];
 	FPURegMIPS mrInitial[NUM_MIPSFPUREG];
 };
diff --git a/Core/MIPS/IR/IRInst.h b/Core/MIPS/IR/IRInst.h
index a5ec8a843..1e2b6c141 100644
--- a/Core/MIPS/IR/IRInst.h
+++ b/Core/MIPS/IR/IRInst.h
@@ -334,7 +334,7 @@ struct IRInst {
 };
 
 // Returns the new PC.
-u32 IRInterpret(MIPSState *mips, const IRInst *inst, int count);
+u32 IRInterpret(MIPSState *ms, const IRInst *inst, int count);
 
 // Each IR block gets a constant pool.
 class IRWriter {
diff --git a/Core/MIPS/IR/IRInterpreter.cpp b/Core/MIPS/IR/IRInterpreter.cpp
index 6bae2b74c..132f095dc 100644
--- a/Core/MIPS/IR/IRInterpreter.cpp
+++ b/Core/MIPS/IR/IRInterpreter.cpp
@@ -33,6 +33,12 @@
 #include "Core/MIPS/IR/IRInterpreter.h"
 #include "Core/System.h"
 
+#ifdef mips
+// Why do MIPS compilers define something so generic?  Try to keep defined, at least...
+#undef mips
+#define mips mips
+#endif
+
 alignas(16) static const float vec4InitValues[8][4] = {
 	{ 0.0f, 0.0f, 0.0f, 0.0f },
 	{ 1.0f, 1.0f, 1.0f, 1.0f },
diff --git a/Core/MIPS/IR/IRInterpreter.h b/Core/MIPS/IR/IRInterpreter.h
index 092c2ac93..ec2c6f270 100644
--- a/Core/MIPS/IR/IRInterpreter.h
+++ b/Core/MIPS/IR/IRInterpreter.h
@@ -20,4 +20,4 @@ inline static u32 ReverseBits32(u32 v) {
 	return v;
 }
 
-u32 IRInterpret(MIPSState *mips, const IRInst *inst, int count);
+u32 IRInterpret(MIPSState *ms, const IRInst *inst, int count);
diff --git a/Core/MIPS/IR/IRJit.cpp b/Core/MIPS/IR/IRJit.cpp
index b2780dad0..f938619a9 100644
--- a/Core/MIPS/IR/IRJit.cpp
+++ b/Core/MIPS/IR/IRJit.cpp
@@ -41,7 +41,7 @@
 
 namespace MIPSComp {
 
-IRJit::IRJit(MIPSState *mips) : frontend_(mips->HasDefaultPrefix()), mips_(mips) {
+IRJit::IRJit(MIPSState *mipsState) : frontend_(mipsState->HasDefaultPrefix()), mips_(mipsState) {
 	// u32 size = 128 * 1024;
 	// blTrampolines_ = kernelMemory.Alloc(size, true, "trampoline");
 	InitIR();
diff --git a/Core/MIPS/IR/IRJit.h b/Core/MIPS/IR/IRJit.h
index 9beabe585..a8e30db88 100644
--- a/Core/MIPS/IR/IRJit.h
+++ b/Core/MIPS/IR/IRJit.h
@@ -135,7 +135,7 @@ class IRBlockCache : public JitBlockCacheDebugInterface {
 
 class IRJit : public JitInterface {
 public:
-	IRJit(MIPSState *mips);
+	IRJit(MIPSState *mipsState);
 	virtual ~IRJit();
 
 	void DoState(PointerWrap &p) override;
diff --git a/Core/MIPS/JitCommon/JitBlockCache.cpp b/Core/MIPS/JitCommon/JitBlockCache.cpp
index 9807ce955..2195b5f10 100644
--- a/Core/MIPS/JitCommon/JitBlockCache.cpp
+++ b/Core/MIPS/JitCommon/JitBlockCache.cpp
@@ -59,7 +59,7 @@ op_agent_t agent;
 
 const u32 INVALID_EXIT = 0xFFFFFFFF;
 
-JitBlockCache::JitBlockCache(MIPSState *mips, CodeBlockCommon *codeBlock) :
+JitBlockCache::JitBlockCache(MIPSState *mipsState, CodeBlockCommon *codeBlock) :
 	codeBlock_(codeBlock), blocks_(nullptr), num_blocks_(0) {
 }
 
diff --git a/Core/MIPS/JitCommon/JitBlockCache.h b/Core/MIPS/JitCommon/JitBlockCache.h
index 0b26138fb..fe6217da1 100644
--- a/Core/MIPS/JitCommon/JitBlockCache.h
+++ b/Core/MIPS/JitCommon/JitBlockCache.h
@@ -113,7 +113,7 @@ class JitBlockCacheDebugInterface {
 
 class JitBlockCache : public JitBlockCacheDebugInterface {
 public:
-	JitBlockCache(MIPSState *mips_, CodeBlockCommon *codeBlock);
+	JitBlockCache(MIPSState *mipsState, CodeBlockCommon *codeBlock);
 	~JitBlockCache();
 
 	int AllocateBlock(u32 em_address);
diff --git a/Core/MIPS/JitCommon/JitCommon.cpp b/Core/MIPS/JitCommon/JitCommon.cpp
index 397cc85ad..8ecd3a34d 100644
--- a/Core/MIPS/JitCommon/JitCommon.cpp
+++ b/Core/MIPS/JitCommon/JitCommon.cpp
@@ -63,17 +63,17 @@ namespace MIPSComp {
 		}
 	}
 
-	JitInterface *CreateNativeJit(MIPSState *mips) {
+	JitInterface *CreateNativeJit(MIPSState *mipsState) {
 #if PPSSPP_ARCH(ARM)
-		return new MIPSComp::ArmJit(mips);
+		return new MIPSComp::ArmJit(mipsState);
 #elif PPSSPP_ARCH(ARM64)
-		return new MIPSComp::Arm64Jit(mips);
+		return new MIPSComp::Arm64Jit(mipsState);
 #elif PPSSPP_ARCH(X86) || PPSSPP_ARCH(AMD64)
-		return new MIPSComp::Jit(mips);
+		return new MIPSComp::Jit(mipsState);
 #elif PPSSPP_ARCH(MIPS)
-		return new MIPSComp::MipsJit(mips);
+		return new MIPSComp::MipsJit(mipsState);
 #else
-		return new MIPSComp::FakeJit(mips);
+		return new MIPSComp::FakeJit(mipsState);
 #endif
 	}
 
diff --git a/Core/MIPS/JitCommon/JitCommon.h b/Core/MIPS/JitCommon/JitCommon.h
index e39a8bab2..8515a3176 100644
--- a/Core/MIPS/JitCommon/JitCommon.h
+++ b/Core/MIPS/JitCommon/JitCommon.h
@@ -157,5 +157,5 @@ namespace MIPSComp {
 
 	void DoDummyJitState(PointerWrap &p);
 
-	JitInterface *CreateNativeJit(MIPSState *mips);
+	JitInterface *CreateNativeJit(MIPSState *mipsState);
 }
diff --git a/Core/MIPS/MIPS.h b/Core/MIPS/MIPS.h
index 31df9d8ba..6635a153f 100644
--- a/Core/MIPS/MIPS.h
+++ b/Core/MIPS/MIPS.h
@@ -162,7 +162,7 @@ enum class CPUCore;
 	(int)(offsetof(MIPSState, x) - offsetof(MIPSState, f[0]) + (i) * 4))
 
 // To get RIP/relative addressing (requires tight memory control so generated code isn't too far from the binary, and a reachable variable called mips):
-// #define MIPSSTATE_VAR(x) M(&mips->x)
+// #define MIPSSTATE_VAR(x) M(&mips_->x)
 
 #endif
 
diff --git a/Core/MIPS/MIPS/MipsJit.cpp b/Core/MIPS/MIPS/MipsJit.cpp
index 5103b226a..da5cb93ba 100644
--- a/Core/MIPS/MIPS/MipsJit.cpp
+++ b/Core/MIPS/MIPS/MipsJit.cpp
@@ -41,7 +41,7 @@ void DisassembleMIPS(const u8 *data, int size) {
 namespace MIPSComp
 {
 
-MipsJit::MipsJit(MIPSState *mips) : blocks(mips, this), mips_(mips)
+MipsJit::MipsJit(MIPSState *mipsState) : blocks(mipsState, this), mips_(mipsState)
 { 
 	logBlocks = 0;
 	dontLogBlocks = 0;
diff --git a/Core/MIPS/MIPS/MipsJit.h b/Core/MIPS/MIPS/MipsJit.h
index 2ef4ccbec..195579b37 100644
--- a/Core/MIPS/MIPS/MipsJit.h
+++ b/Core/MIPS/MIPS/MipsJit.h
@@ -35,7 +35,7 @@ namespace MIPSComp
 class MipsJit : public MIPSGen::MIPSCodeBlock, public JitInterface, public MIPSFrontendInterface
 {
 public:
-	MipsJit(MIPSState *mips);
+	MipsJit(MIPSState *mipsState);
 
 	void DoState(PointerWrap &p) override;
 
diff --git a/Core/MIPS/fake/FakeJit.cpp b/Core/MIPS/fake/FakeJit.cpp
index a03c73211..8150e2611 100644
--- a/Core/MIPS/fake/FakeJit.cpp
+++ b/Core/MIPS/fake/FakeJit.cpp
@@ -40,7 +40,7 @@ void DisassembleFake(const u8 *data, int size) {
 namespace MIPSComp
 {
 
-FakeJit::FakeJit(MIPSState *mips) : blocks(mips, this), mips_(mips)
+FakeJit::FakeJit(MIPSState *mipsState) : blocks(mipsState, this), mips_(mipsState)
 { 
 	logBlocks = 0;
 	dontLogBlocks = 0;
diff --git a/Core/MIPS/fake/FakeJit.h b/Core/MIPS/fake/FakeJit.h
index dd1954d1b..8c3403d56 100644
--- a/Core/MIPS/fake/FakeJit.h
+++ b/Core/MIPS/fake/FakeJit.h
@@ -33,7 +33,7 @@ typedef int FakeReg;
 
 class FakeJit : public FakeGen::FakeXCodeBlock, public JitInterface, public MIPSFrontendInterface {
 public:
-	FakeJit(MIPSState *mips);
+	FakeJit(MIPSState *mipsState);
 
 	void DoState(PointerWrap &p);
 	static void DoDummyState(PointerWrap &p);
diff --git a/Core/MIPS/x86/Jit.cpp b/Core/MIPS/x86/Jit.cpp
index 6e77fbade..370702eca 100644
--- a/Core/MIPS/x86/Jit.cpp
+++ b/Core/MIPS/x86/Jit.cpp
@@ -105,8 +105,8 @@ static void JitLogMiss(MIPSOpcode op)
 // JitBlockCache doesn't use this, just stores it.
 #pragma warning(disable:4355)
 #endif
-Jit::Jit(MIPSState *mips)
-		: blocks(mips, this), mips_(mips) {
+Jit::Jit(MIPSState *mipsState)
+		: blocks(mipsState, this), mips_(mipsState) {
 	blocks.Init();
 	gpr.SetEmitter(this);
 	fpr.SetEmitter(this);
diff --git a/Core/MIPS/x86/Jit.h b/Core/MIPS/x86/Jit.h
index 6c679547b..e6e11ac89 100644
--- a/Core/MIPS/x86/Jit.h
+++ b/Core/MIPS/x86/Jit.h
@@ -46,7 +46,7 @@ struct RegCacheState {
 
 class Jit : public Gen::XCodeBlock, public JitInterface, public MIPSFrontendInterface {
 public:
-	Jit(MIPSState *mips);
+	Jit(MIPSState *mipsState);
 	virtual ~Jit();
 
 	const JitOptions &GetJitOptions() { return jo; }
diff --git a/Core/MIPS/x86/RegCache.cpp b/Core/MIPS/x86/RegCache.cpp
index fa8479323..4a68d807f 100644
--- a/Core/MIPS/x86/RegCache.cpp
+++ b/Core/MIPS/x86/RegCache.cpp
@@ -54,12 +54,10 @@ void GPRRegCache::FlushBeforeCall() {
 	Flush();
 }
 
-GPRRegCache::GPRRegCache() : mips(0), emit(0) {
-	memset(regs, 0, sizeof(regs));
-	memset(xregs, 0, sizeof(xregs));
+GPRRegCache::GPRRegCache() {
 }
 
-void GPRRegCache::Start(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo, MIPSAnalyst::AnalysisResults &stats) {
+void GPRRegCache::Start(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo, MIPSAnalyst::AnalysisResults &stats) {
 #ifdef _M_X64
 	if (allocationOrderR15[0] == INVALID_REG) {
 		memcpy(allocationOrderR15, allocationOrder, sizeof(allocationOrder));
@@ -67,7 +65,7 @@ void GPRRegCache::Start(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOp
 	}
 #endif
 
-	this->mips = mips;
+	mips_ = mipsState;
 	for (int i = 0; i < NUM_X_REGS; i++) {
 		xregs[i].free = true;
 		xregs[i].dirty = false;
@@ -421,7 +419,7 @@ void GPRRegCache::Flush() {
 			else if (regs[i].location.IsImm()) {
 				StoreFromRegister(r);
 			} else {
-				_assert_msg_(false, "Jit64 - Flush unhandled case, reg %d PC: %08x", i, mips->pc);
+				_assert_msg_(false, "Jit64 - Flush unhandled case, reg %d PC: %08x", i, mips_->pc);
 			}
 		}
 	}
diff --git a/Core/MIPS/x86/RegCache.h b/Core/MIPS/x86/RegCache.h
index cdda09eb3..252394769 100644
--- a/Core/MIPS/x86/RegCache.h
+++ b/Core/MIPS/x86/RegCache.h
@@ -69,7 +69,7 @@ class GPRRegCache
 public:
 	GPRRegCache();
 	~GPRRegCache() {}
-	void Start(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo, MIPSAnalyst::AnalysisResults &stats);
+	void Start(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo, MIPSAnalyst::AnalysisResults &stats);
 
 	void DiscardRegContentsIfCached(MIPSGPReg preg);
 	void DiscardR(MIPSGPReg preg);
@@ -119,17 +119,17 @@ class GPRRegCache
 	void GetState(GPRRegCacheState &state) const;
 	void RestoreState(const GPRRegCacheState& state);
 
-	MIPSState *mips;
+	MIPSState *mips_ = nullptr;
 
 private:
 	Gen::X64Reg GetFreeXReg();
 	Gen::X64Reg FindBestToSpill(bool unusedOnly, bool *clobbered);
 	const Gen::X64Reg *GetAllocationOrder(int &count);
 
-	MIPSCachedReg regs[X64JitConstants::NUM_MIPS_GPRS];
-	X64CachedReg xregs[X64JitConstants::NUM_X_REGS];
+	MIPSCachedReg regs[X64JitConstants::NUM_MIPS_GPRS]{};
+	X64CachedReg xregs[X64JitConstants::NUM_X_REGS]{};
 
-	Gen::XEmitter *emit;
+	Gen::XEmitter *emit = nullptr;
 	MIPSComp::JitState *js_;
 	MIPSComp::JitOptions *jo_;
 };
diff --git a/Core/MIPS/x86/RegCacheFPU.cpp b/Core/MIPS/x86/RegCacheFPU.cpp
index e217bfc9e..293aa2e14 100644
--- a/Core/MIPS/x86/RegCacheFPU.cpp
+++ b/Core/MIPS/x86/RegCacheFPU.cpp
@@ -31,14 +31,12 @@
 using namespace Gen;
 using namespace X64JitConstants;
 
-FPURegCache::FPURegCache() : mips(0), initialReady(false), emit(0) {
-	memset(regs, 0, sizeof(regs));
-	memset(xregs, 0, sizeof(xregs));
+FPURegCache::FPURegCache() {
 	vregs = regs + 32;
 }
 
-void FPURegCache::Start(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo, MIPSAnalyst::AnalysisResults &stats, bool useRip) {
-	this->mips = mips;
+void FPURegCache::Start(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo, MIPSAnalyst::AnalysisResults &stats, bool useRip) {
+	mips_ = mipsState;
 	useRip_ = useRip;
 	if (!initialReady) {
 		SetupInitialRegs();
@@ -409,7 +407,7 @@ X64Reg FPURegCache::LoadRegsVS(const u8 *v, int n) {
 				break;
 			}
 		}
-		const float *f = v[0] < 128 ? &mips->v[voffset[v[0]]] : &mips->tempValues[v[0] - 128];
+		const float *f = v[0] < 128 ? &mips_->v[voffset[v[0]]] : &mips_->tempValues[v[0] - 128];
 		if (((intptr_t)f & 0x7) == 0 && n == 2) {
 			emit->MOVQ_xmm(res, vregs[v[0]].location);
 		} else if (((intptr_t)f & 0xf) == 0) {
@@ -665,7 +663,7 @@ void FPURegCache::StoreFromRegister(int i) {
 				}
 			}
 
-			const float *f = mri[0] - 32 < 128 ? &mips->v[voffset[mri[0] - 32]] : &mips->tempValues[mri[0] - 32 - 128];
+			const float *f = mri[0] - 32 < 128 ? &mips_->v[voffset[mri[0] - 32]] : &mips_->tempValues[mri[0] - 32 - 128];
 			int align = (intptr_t)f & 0xf;
 
 			// If we can do a multistore...
@@ -872,7 +870,7 @@ void FPURegCache::Flush() {
 			} else if (regs[i].location.IsImm()) {
 				StoreFromRegister(i);
 			} else {
-				_assert_msg_(false, "Jit64 - Flush unhandled case, reg %i PC: %08x", i, mips->pc);
+				_assert_msg_(false, "Jit64 - Flush unhandled case, reg %i PC: %08x", i, mips_->pc);
 			}
 		}
 	}
@@ -887,13 +885,13 @@ OpArg FPURegCache::GetDefaultLocation(int reg) const {
 	} else if (reg < 32 + 128) {
 		// Here, RIP has the advantage so let's use it when possible
 		if (useRip_) {
-			return M(&mips->v[voffset[reg - 32]]);  // rip accessible
+			return M(&mips_->v[voffset[reg - 32]]);  // rip accessible
 		} else {
 			return MIPSSTATE_VAR_ELEM32(v[0], voffset[reg - 32]);
 		}
 	} else {
 		if (useRip_) {
-			return M(&mips->tempValues[reg - 32 - 128]);  // rip accessible
+			return M(&mips_->tempValues[reg - 32 - 128]);  // rip accessible
 		} else {
 			return MIPSSTATE_VAR_ELEM32(tempValues[0], reg - 32 - 128);
 		}
diff --git a/Core/MIPS/x86/RegCacheFPU.h b/Core/MIPS/x86/RegCacheFPU.h
index 3cf33d53b..452882f8e 100644
--- a/Core/MIPS/x86/RegCacheFPU.h
+++ b/Core/MIPS/x86/RegCacheFPU.h
@@ -97,7 +97,7 @@ class FPURegCache
 	FPURegCache();
 	~FPURegCache() {}
 
-	void Start(MIPSState *mips, MIPSComp::JitState *js, MIPSComp::JitOptions *jo, MIPSAnalyst::AnalysisResults &stats, bool useRip);
+	void Start(MIPSState *mipsState, MIPSComp::JitState *js, MIPSComp::JitOptions *jo, MIPSAnalyst::AnalysisResults &stats, bool useRip);
 	void MapReg(int preg, bool doLoad = true, bool makeDirty = true);
 	void StoreFromRegister(int preg);
 	void StoreFromRegisterV(int preg) {
@@ -126,11 +126,11 @@ class FPURegCache
 
 	const Gen::OpArg &R(int freg) const {return regs[freg].location;}
 	const Gen::OpArg &V(int vreg) const {
-		_dbg_assert_msg_(vregs[vreg].lane == 0, "SIMD reg %d used as V reg (use VS instead). pc=%08x", vreg, mips->pc);
+		_dbg_assert_msg_(vregs[vreg].lane == 0, "SIMD reg %d used as V reg (use VS instead). pc=%08x", vreg, mips_->pc);
 		return vregs[vreg].location;
 	}
 	const Gen::OpArg &VS(const u8 *vs) const {
-		_dbg_assert_msg_(vregs[vs[0]].lane != 0, "V reg %d used as VS reg (use V instead). pc=%08x", vs[0], mips->pc);
+		_dbg_assert_msg_(vregs[vs[0]].lane != 0, "V reg %d used as VS reg (use V instead). pc=%08x", vs[0], mips_->pc);
 		return vregs[vs[0]].location;
 	}
 
@@ -142,7 +142,7 @@ class FPURegCache
 	}
 
 	Gen::X64Reg VX(int vreg) const {
-		_dbg_assert_msg_(vregs[vreg].lane == 0, "SIMD reg %d used as V reg (use VSX instead). pc=%08x", vreg, mips->pc);
+		_dbg_assert_msg_(vregs[vreg].lane == 0, "SIMD reg %d used as V reg (use VSX instead). pc=%08x", vreg, mips_->pc);
 		if (vregs[vreg].away && vregs[vreg].location.IsSimpleReg())
 			return vregs[vreg].location.GetSimpleReg();
 		_assert_msg_(false, "Not so simple - v%i", vreg);
@@ -150,7 +150,7 @@ class FPURegCache
 	}
 
 	Gen::X64Reg VSX(const u8 *vs) const {
-		_dbg_assert_msg_(vregs[vs[0]].lane != 0, "V reg %d used as VS reg (use VX instead). pc=%08x", vs[0], mips->pc);
+		_dbg_assert_msg_(vregs[vs[0]].lane != 0, "V reg %d used as VS reg (use VX instead). pc=%08x", vs[0], mips_->pc);
 		if (vregs[vs[0]].away && vregs[vs[0]].location.IsSimpleReg())
 			return vregs[vs[0]].location.GetSimpleReg();
 		_assert_msg_(false, "Not so simple - v%i", vs[0]);
@@ -206,7 +206,7 @@ class FPURegCache
 	void GetState(FPURegCacheState &state) const;
 	void RestoreState(const FPURegCacheState& state);
 
-	MIPSState *mips;
+	MIPSState *mips_ = nullptr;
 
 	void FlushX(Gen::X64Reg reg);
 	Gen::X64Reg GetFreeXReg();
@@ -227,17 +227,17 @@ class FPURegCache
 
 	Gen::X64Reg LoadRegsVS(const u8 *v, int n);
 
-	MIPSCachedFPReg regs[NUM_MIPS_FPRS];
-	X64CachedFPReg xregs[NUM_X_FPREGS];
+	MIPSCachedFPReg regs[NUM_MIPS_FPRS]{};
+	X64CachedFPReg xregs[NUM_X_FPREGS]{};
 	MIPSCachedFPReg *vregs;
 
 	bool useRip_;
 	bool pendingFlush;
-	bool initialReady;
+	bool initialReady = false;
 	MIPSCachedFPReg regsInitial[NUM_MIPS_FPRS];
 	X64CachedFPReg xregsInitial[NUM_X_FPREGS];
 
-	Gen::XEmitter *emit;
+	Gen::XEmitter *emit = nullptr;
 	MIPSComp::JitState *js_;
 	MIPSComp::JitOptions *jo_;
 };
diff --git a/unittest/TestArmEmitter.cpp b/unittest/TestArmEmitter.cpp
index aa9db3f72..94acdbdb1 100644
--- a/unittest/TestArmEmitter.cpp
+++ b/unittest/TestArmEmitter.cpp
@@ -229,10 +229,10 @@ bool TestArmEmitter() {
 
 	const u8 *codeStart = emitter.GetCodePointer();
 
-	MIPSState mips;
+	MIPSState mipsState;
 	MIPSComp::JitState js;
 	MIPSComp::JitOptions jo;
-	ArmRegCacheFPU fpr(&mips, &js, &jo);
+	ArmRegCacheFPU fpr(&mipsState, &js, &jo);
 	fpr.SetEmitter(&emitter);
 	int C000 = GetColumnName(0, M_4x4, 0, 0);
 	int C010 = GetColumnName(0, M_4x4, 1, 0);
-- 
2.30.0


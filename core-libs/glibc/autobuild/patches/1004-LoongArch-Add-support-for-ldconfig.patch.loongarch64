From 28ddcf851f92119dbdbdec0bd5e3a6f75dbafaee Mon Sep 17 00:00:00 2001
From: caiyinyu <caiyinyu@loongson.cn>
Date: Tue, 7 Mar 2023 20:23:57 +0800
Subject: [PATCH 04/41] LoongArch: Add support for ldconfig.

---
 elf/cache.c                                   |  8 +-
 sysdeps/generic/ldconfig.h                    |  4 +-
 sysdeps/unix/sysv/linux/loongarch/dl-cache.h  | 82 +++++++++++++++++++
 .../unix/sysv/linux/loongarch/readelflib.c    | 70 ++++++++++++++++
 4 files changed, 162 insertions(+), 2 deletions(-)
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/dl-cache.h
 create mode 100644 sysdeps/unix/sysv/linux/loongarch/readelflib.c

diff --git a/elf/cache.c b/elf/cache.c
index c4c3139264..83e6b71349 100644
--- a/elf/cache.c
+++ b/elf/cache.c
@@ -1,4 +1,4 @@
-/* Copyright (C) 1999-2023 Free Software Foundation, Inc.
+/* Copyright (C) 2022-2023 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    This program is free software; you can redistribute it and/or modify
@@ -225,6 +225,12 @@ print_entry (const char *lib, int flag, uint64_t hwcap,
     case FLAG_RISCV_FLOAT_ABI_DOUBLE:
       fputs (",double-float", stdout);
       break;
+    case FLAG_LARCH_FLOAT_ABI_SOFT:
+      fputs (",soft-float", stdout);
+      break;
+    case FLAG_LARCH_FLOAT_ABI_DOUBLE:
+      fputs (",double-float", stdout);
+      break;
     case 0:
       break;
     default:
diff --git a/sysdeps/generic/ldconfig.h b/sysdeps/generic/ldconfig.h
index 0e1a9a9515..6c0747f59e 100644
--- a/sysdeps/generic/ldconfig.h
+++ b/sysdeps/generic/ldconfig.h
@@ -1,4 +1,4 @@
-/* Copyright (C) 1999-2023 Free Software Foundation, Inc.
+/* Copyright (C) 2022-2023 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -45,6 +45,8 @@
 #define FLAG_MIPS64_LIBN64_NAN2008	0x0e00
 #define FLAG_RISCV_FLOAT_ABI_SOFT	0x0f00
 #define FLAG_RISCV_FLOAT_ABI_DOUBLE	0x1000
+#define FLAG_LARCH_FLOAT_ABI_SOFT	0x1100
+#define FLAG_LARCH_FLOAT_ABI_DOUBLE	0x1200
 
 /* Name of auxiliary cache.  */
 #define _PATH_LDCONFIG_AUX_CACHE "/var/cache/ldconfig/aux-cache"
diff --git a/sysdeps/unix/sysv/linux/loongarch/dl-cache.h b/sysdeps/unix/sysv/linux/loongarch/dl-cache.h
new file mode 100644
index 0000000000..05219c6272
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/dl-cache.h
@@ -0,0 +1,82 @@
+/* Support for reading /etc/ld.so.cache files written by Linux ldconfig.
+   Copyright (C) 2022-2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library.  If not, see
+   <https://www.gnu.org/licenses/>.  */
+
+#include <ldconfig.h>
+#include <assert.h>
+
+#if defined __loongarch_double_float
+# define _DL_CACHE_DEFAULT_ID    (FLAG_LARCH_FLOAT_ABI_DOUBLE | FLAG_ELF_LIBC6)
+#else
+# define _DL_CACHE_DEFAULT_ID    (FLAG_LARCH_FLOAT_ABI_SOFT | FLAG_ELF_LIBC6)
+#endif
+
+#define _dl_cache_check_flags(flags)                    \
+  ((flags) == _DL_CACHE_DEFAULT_ID)
+
+/* If given a path to one of our library directories, adds every library
+   directory via add_dir (), otherwise just adds the giver directory.  On
+   LoongArch, libraries can be found in paths ending in:
+     - /lib64
+     - /lib64/sf
+   so this will add all of those paths.  */
+
+#define add_system_dir(dir) 						\
+  do							    		\
+    {									\
+      static const char* lib_dirs[] = {					\
+	"/lib64",							\
+	"/lib64/sf",							\
+	NULL,								\
+      };								\
+      const size_t lib_len = sizeof ("/lib") - 1;			\
+      size_t len = strlen (dir);					\
+      char path[len + 6];						\
+      const char **ptr;							\
+									\
+      memcpy (path, dir, len + 1);					\
+									\
+      for (ptr = lib_dirs; *ptr != NULL; ptr++)				\
+	{								\
+	  const char *lib_dir = *ptr;					\
+	  size_t dir_len = strlen (lib_dir);				\
+									\
+	  if (len >= dir_len						\
+	      && !memcmp (path + len - dir_len, lib_dir, dir_len))	\
+	    {								\
+	      len -= dir_len - lib_len;					\
+	      path[len] = '\0';						\
+	      break;							\
+	    }								\
+	}								\
+      add_dir (path);							\
+      if (len >= lib_len						\
+	  && !memcmp (path + len - lib_len, "/lib", lib_len))		\
+	for (ptr = lib_dirs; *ptr != NULL; ptr++)			\
+	  {								\
+	    const char *lib_dir = *ptr;					\
+	    size_t dir_len = strlen (lib_dir);				\
+									\
+	    assert (dir_len >= lib_len);				\
+	    memcpy (path + len, lib_dir + lib_len,			\
+		    dir_len - lib_len + 1);				\
+	    add_dir (path);						\
+	  }								\
+    } while (0)
+
+
+#include_next <dl-cache.h>
diff --git a/sysdeps/unix/sysv/linux/loongarch/readelflib.c b/sysdeps/unix/sysv/linux/loongarch/readelflib.c
new file mode 100644
index 0000000000..bcaff86b36
--- /dev/null
+++ b/sysdeps/unix/sysv/linux/loongarch/readelflib.c
@@ -0,0 +1,70 @@
+/* Support for reading ELF files.
+   Copyright (C) 2022-2023 Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, see
+   <https://www.gnu.org/licenses/>.  */
+
+
+int process_elf64_file (const char *file_name, const char *lib,
+			int *flag, unsigned int *isa_level, char **soname,
+			void *file_contents, size_t file_length);
+
+#define SUPPORTED_ELF_FLAGS \
+  (EF_LARCH_ABI_DOUBLE_FLOAT | EF_LARCH_ABI_SOFT_FLOAT)
+
+/* Returns 0 if everything is ok, != 0 in case of error.  */
+int
+process_elf_file (const char *file_name, const char *lib, int *flag,
+		  unsigned int *isa_level, char **soname, void *file_contents,
+		  size_t file_length)
+{
+  ElfW(Ehdr) *elf_header = (ElfW(Ehdr) *) file_contents;
+  Elf64_Ehdr *elf64_header = (Elf64_Ehdr *) elf_header;
+  int ret;
+  long flags;
+
+  /* LoongArch libraries are always libc.so.6+.  */
+  *flag = FLAG_ELF_LIBC6;
+
+  ret = process_elf64_file (file_name, lib, flag, isa_level, soname,
+				file_contents, file_length);
+  flags = elf64_header->e_flags;
+
+  /* LoongArch linkers encode the floating point ABI as part of the ELF headers.  */
+  switch (flags & SUPPORTED_ELF_FLAGS)
+    {
+      case EF_LARCH_ABI_SOFT_FLOAT:
+        *flag |= FLAG_LARCH_FLOAT_ABI_SOFT;
+	break;
+      case EF_LARCH_ABI_DOUBLE_FLOAT:
+        *flag |= FLAG_LARCH_FLOAT_ABI_DOUBLE;
+	break;
+      default:
+        return 1;
+    }
+
+  /* If there are any other ELF flags set then glibc doesn't support this
+     library.  */
+  if (flags & ~SUPPORTED_ELF_FLAGS)
+    return 1;
+
+  return ret;
+}
+
+#undef __ELF_NATIVE_CLASS
+#undef process_elf_file
+#define process_elf_file process_elf64_file
+#define __ELF_NATIVE_CLASS 64
+#include "elf/readelflib.c"
-- 
2.43.0


From 46ac30ef2363d9338c8d1c4a66614f89fc634249 Mon Sep 17 00:00:00 2001
From: Chao Li <lichao@loongson.cn>
Date: Tue, 16 Jul 2024 18:45:55 +0800
Subject: [PATCH 26/51] system/memrw: Add 8-bit and 16-bit memory operations

Added 8-bit and 16-bit memory access operations, which 8-bit uses
`movb` and 16-bit is `movw`.

Signed-off-by: Chao Li <lichao@loongson.cn>
---
 system/memrw.h | 32 +++++++++++++++++++++++++++++---
 1 file changed, 29 insertions(+), 3 deletions(-)

diff --git a/system/memrw.h b/system/memrw.h
index 9b061b4..eaedc51 100644
--- a/system/memrw.h
+++ b/system/memrw.h
@@ -4,7 +4,7 @@
 /**
  * \file
  *
- * Provides some 32/64-bit memory access functions. These stop the compiler
+ * Provides some 8/16/32/64-bit memory access functions. These stop the compiler
  * optimizing accesses which need to be ordered and atomic. Mostly used
  * for accessing memory-mapped hardware registers.
  *
@@ -15,6 +15,8 @@
 
 #include <stdint.h>
 
+#define __MEMRW_SUFFIX_8BIT  "b"
+#define __MEMRW_SUFFIX_16BIT "w"
 #define __MEMRW_SUFFIX_32BIT "l"
 #define __MEMRW_SUFFIX_64BIT "q"
 #define __MEMRW_READ_INSTRUCTIONS(bitwidth) "mov" __MEMRW_SUFFIX_##bitwidth##BIT " %1, %0"
@@ -38,7 +40,7 @@ static inline uint##bitwidth##_t read##bitwidth(const volatile uint##bitwidth##_
 static inline void write##bitwidth(const volatile uint##bitwidth##_t *ptr, uint##bitwidth##_t val) \
 { \
     __asm__ __volatile__( \
-	__MEMRW_WRITE_INSTRUCTIONS(bitwidth) \
+       __MEMRW_WRITE_INSTRUCTIONS(bitwidth) \
         : \
         : "m" (*ptr), \
           "r" (val) \
@@ -50,7 +52,7 @@ static inline void write##bitwidth(const volatile uint##bitwidth##_t *ptr, uint#
 static inline void flush##bitwidth(const volatile uint##bitwidth##_t *ptr, uint##bitwidth##_t val) \
 { \
     __asm__ __volatile__( \
-	__MEMRW_FLUSH_INSTRUCTIONS(bitwidth) \
+       __MEMRW_FLUSH_INSTRUCTIONS(bitwidth) \
         : \
         : "m" (*ptr), \
           "r" (val) \
@@ -58,6 +60,14 @@ static inline void flush##bitwidth(const volatile uint##bitwidth##_t *ptr, uint#
     ); \
 }
 
+/**
+ * Reads and returns the value stored in the 8-bit memory location pointed to by ptr.
+ */
+__MEMRW_READ_FUNC(8)
+/**
+ * Reads and returns the value stored in the 16-bit memory location pointed to by ptr.
+ */
+__MEMRW_READ_FUNC(16)
 /**
  * Reads and returns the value stored in the 32-bit memory location pointed to by ptr.
  */
@@ -67,6 +77,14 @@ __MEMRW_READ_FUNC(32)
  */
 __MEMRW_READ_FUNC(64)
 
+/**
+ * Writes val to the 8-bit memory location pointed to by ptr.
+ */
+__MEMRW_WRITE_FUNC(8)
+/**
+ * Writes val to the 16-bit memory location pointed to by ptr.
+ */
+__MEMRW_WRITE_FUNC(16)
 /**
  * Writes val to the 32-bit memory location pointed to by ptr.
  */
@@ -76,6 +94,14 @@ __MEMRW_WRITE_FUNC(32)
  */
 __MEMRW_WRITE_FUNC(64)
 
+/**
+ * Writes val to the 8-bit memory location pointed to by ptr. Only returns when the write is complete.
+ */
+__MEMRW_FLUSH_FUNC(8)
+/**
+ * Writes val to the 16-bit memory location pointed to by ptr. Only returns when the write is complete.
+ */
+__MEMRW_FLUSH_FUNC(16)
 /**
  * Writes val to the 32-bit memory location pointed to by ptr. Only returns when the write is complete.
  */
-- 
2.46.0


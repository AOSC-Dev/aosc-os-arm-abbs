From a2dfb092c35a99668a03df8341a31adbe9a72797 Mon Sep 17 00:00:00 2001
From: Chao Li <lichao@loongson.cn>
Date: Wed, 17 Jul 2024 16:22:13 +0800
Subject: [PATCH 38/51] system: Add the way to IO access via MMIO

Usually, it is access the IO like PCI IO via MMIO on non-X86 ARCHs, so
a method to access IO via MMIO is added.

Signed-off-by: Chao Li <lichao@loongson.cn>
---
 doc/Doxyfile  |  4 +--
 system/mmio.h | 94 +++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 96 insertions(+), 2 deletions(-)
 create mode 100644 system/mmio.h

diff --git a/doc/Doxyfile b/doc/Doxyfile
index 824e940..212dc94 100644
--- a/doc/Doxyfile
+++ b/doc/Doxyfile
@@ -935,7 +935,7 @@ EXCLUDE_PATTERNS       =
 # Note that the wildcards are matched against the file with absolute path, so to
 # exclude all test directories use the pattern */test/*
 
-EXCLUDE_SYMBOLS        = __MEMRW_*
+EXCLUDE_SYMBOLS        = __MEMRW_* __MMIORW_*
 
 # The EXAMPLE_PATH tag can be used to specify one or more files or directories
 # that contain example code fragments that are included (see the \include
@@ -2181,7 +2181,7 @@ PREDEFINED             = __attribute__(x)=
 # definition found in the source code.
 # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
 
-EXPAND_AS_DEFINED      = __MEMRW_READ_FUNC __MEMRW_WRITE_FUNC __MEMRW_FLUSH_FUNC
+EXPAND_AS_DEFINED      = __MEMRW_READ_FUNC __MEMRW_WRITE_FUNC __MEMRW_FLUSH_FUNC __MMIORW_READ_FUNC __MMIORW_WRITE_FUNC
 
 # If the SKIP_FUNCTION_MACROS tag is set to YES then doxygen's preprocessor will
 # remove all references to function-like macros that are alone on a line, have
diff --git a/system/mmio.h b/system/mmio.h
new file mode 100644
index 0000000..c0a069b
--- /dev/null
+++ b/system/mmio.h
@@ -0,0 +1,94 @@
+// SPDX-License-Identifier: GPL-2.0
+#ifndef MMIO_H
+#define MMIO_H
+/**
+ * \file
+ *
+ * Provides some macro definitions for the 8/16/32/64-bit MMIO access.
+ * These stop the compiler optimizing accesses which need to be ordered and
+ * atomic. Only used for accessing memory-mapped hardware registers, IO and
+ * memory spaces.
+ *//*
+ * Copyright (C) 2024 Loongson Technology Corporation Limited. All rights reserved.
+ *
+ */
+
+#include <stdint.h>
+
+#if defined(__loongarch_lp64)
+
+#define __MMIORW_SUFFIX_8BIT  "b"
+#define __MMIORW_SUFFIX_16BIT "h"
+#define __MMIORW_SUFFIX_32BIT "w"
+#define __MMIORW_SUFFIX_64BIT "d"
+
+#define __MMIORW_READ_INSTRUCTIONS(bitwidth) \
+"li.d $t0, 0x28; csrwr $t0, 0x0;" "ld." __MMIORW_SUFFIX_##bitwidth##BIT " %0, %1; csrwr $t0, 0x0"
+
+#define __MMIORW_WRITE_INSTRUCTIONS(bitwidth) \
+"li.d $t0, 0x28; csrwr $t0, 0x0;" "st." __MMIORW_SUFFIX_##bitwidth##BIT " %1, %0; csrwr $t0, 0x0"
+
+#define __MMIORW_READ_WRITE_CLOBBER "$t0", "memory"
+
+#endif
+
+#define __MMIORW_READ_FUNC(bitwidth) \
+static inline uint##bitwidth##_t mmio_read##bitwidth(const volatile uint##bitwidth##_t *ptr) \
+{ \
+    uint##bitwidth##_t val; \
+    __asm__ __volatile__ ( \
+        __MMIORW_READ_INSTRUCTIONS(bitwidth) \
+        : "=r" (val) \
+        : "m" (*ptr) \
+        : __MMIORW_READ_WRITE_CLOBBER \
+    ); \
+    return val; \
+}
+
+#define __MMIORW_WRITE_FUNC(bitwidth) \
+static inline void mmio_write##bitwidth(const volatile uint##bitwidth##_t *ptr, uint##bitwidth##_t val) \
+{ \
+    __asm__ __volatile__ ( \
+        __MMIORW_WRITE_INSTRUCTIONS(bitwidth) \
+        : \
+        :  "m" (*ptr), \
+           "r" (val) \
+        : __MMIORW_READ_WRITE_CLOBBER \
+    ); \
+}
+
+/**
+ * Reads and returns the value stored in the 8-bit memory IO location pointed to by ptr.
+ */
+__MMIORW_READ_FUNC(8)
+/**
+ * Reads and returns the value stored in the 16-bit memory IO location pointed to by ptr.
+ */
+__MMIORW_READ_FUNC(16)
+/**
+ * Reads and returns the value stored in the 32-bit memory IO location pointed to by ptr.
+ */
+__MMIORW_READ_FUNC(32)
+/**
+ * Reads and returns the value stored in the 64-bit memory IO location pointed to by ptr.
+ */
+__MMIORW_READ_FUNC(64)
+
+/**
+ * Writes val to the 8-bit memory IO location pointed to by ptr.
+ */
+__MMIORW_WRITE_FUNC(8)
+/**
+ * Writes val to the 16-bit memory IO location pointed to by ptr.
+ */
+__MMIORW_WRITE_FUNC(16)
+/**
+ * Writes val to the 32-bit memory IO location pointed to by ptr.
+ */
+__MMIORW_WRITE_FUNC(32)
+/**
+ * Writes val to the 64-bit memory IO location pointed to by ptr.
+ */
+__MMIORW_WRITE_FUNC(64)
+
+#endif // MMIO_H
-- 
2.46.0


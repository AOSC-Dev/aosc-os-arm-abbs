From b42692724bf4a3fd5d3dbf1d48daec12e4a97d8f Mon Sep 17 00:00:00 2001
From: Chao Li <lichao@loongson.cn>
Date: Thu, 18 Jul 2024 21:15:40 +0800
Subject: [PATCH 48/51] system/loongarch: Add LoongArch ARCH specific files

Added LoongArch ARCH specific files: cpucfg.c, cpuinfo.c, hwctrl.c,
memctrl.c, temperature.c, vmem.c

They use the same pubilc API for i386 and x64 platforms.

Signed-off-by: Chao Li <lichao@loongson.cn>
---
 system/cpuinfo.h               |   4 +
 system/loongarch/cpucfg.c      |  85 ++++++++++
 system/loongarch/cpuinfo.c     | 281 +++++++++++++++++++++++++++++++++
 system/loongarch/hwctrl.c      |  59 +++++++
 system/loongarch/memctrl.c     |  51 ++++++
 system/loongarch/temperature.c |  41 +++++
 system/loongarch/vmem.c        |  73 +++++++++
 7 files changed, 594 insertions(+)
 create mode 100644 system/loongarch/cpucfg.c
 create mode 100644 system/loongarch/cpuinfo.c
 create mode 100644 system/loongarch/hwctrl.c
 create mode 100644 system/loongarch/memctrl.c
 create mode 100644 system/loongarch/temperature.c
 create mode 100644 system/loongarch/vmem.c

diff --git a/system/cpuinfo.h b/system/cpuinfo.h
index df5fdde..9aaa57d 100644
--- a/system/cpuinfo.h
+++ b/system/cpuinfo.h
@@ -74,6 +74,10 @@
 #define IMC_K19_STK     0x81A0  // Zen4 (Storm Peak)
 #define IMC_K19_GRG     0x8150  // Zen5 (Granite Ridge)
 
+#define IMC_LSLA        0xC000  // Loongson LoongArch family
+#define IMC_LA464       0xC010  // LA464 (Loongson 3th Gen)
+#define IMC_LA664       0xC011  // LA664 (Loongson 4th Gen)
+
 /**
  * A string identifying the CPU make and model.
  */
diff --git a/system/loongarch/cpucfg.c b/system/loongarch/cpucfg.c
new file mode 100644
index 0000000..edd01e3
--- /dev/null
+++ b/system/loongarch/cpucfg.c
@@ -0,0 +1,85 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2024 Loongson Technology Corporation Limited. All rights reserved.
+
+#include <stdbool.h>
+#include <stdint.h>
+
+#include "cpuid.h"
+
+#include "string.h"
+
+#include <larchintrin.h>
+
+//------------------------------------------------------------------------------
+// Public Variables
+//------------------------------------------------------------------------------
+
+cpuid_info_t cpuid_info;
+
+//------------------------------------------------------------------------------
+// Public Functions
+//------------------------------------------------------------------------------
+
+void cpuid_init(void)
+{
+    // Get the vendor ID.
+    cpuid_info.vendor_id.raw[0] = (uint32_t)(__iocsrrd_w(0x10));
+    cpuid_info.vendor_id.raw[1] = (uint32_t)(__iocsrrd_w(0x14));
+    cpuid_info.vendor_id.raw[2] = (uint32_t)(__iocsrrd_w(0x18));
+    cpuid_info.vendor_id.str[CPUID_VENDOR_STR_LENGTH - 1] = '\0';
+
+    cpuid_info.topology.core_count   = -1;
+    cpuid_info.topology.thread_count = -1;
+    cpuid_info.topology.is_hybrid    =  0;
+    cpuid_info.topology.ecore_count  = -1;
+    cpuid_info.topology.pcore_count  = -1;
+
+    // Get the brand ID.
+    cpuid_info.brand_id.raw[0] = (uint32_t)(__iocsrrd_w(0x10));
+    cpuid_info.brand_id.raw[1] = (uint32_t)(__iocsrrd_w(0x14));
+    if (__iocsrrd_w(0x18) != 0x0) {
+      cpuid_info.brand_id.raw[2] = (uint32_t)(__iocsrrd_w(0x18));
+    } else {
+      cpuid_info.brand_id.raw[2] = 0x20202020;
+    }
+    if (__iocsrrd_w(0x1c) != 0x0) {
+      cpuid_info.brand_id.raw[3] = (uint32_t)(__iocsrrd_w(0x1c));
+    } else {
+      cpuid_info.brand_id.raw[3] = 0x20202020;
+    }
+    cpuid_info.brand_id.raw[4] = (uint32_t)(__iocsrrd_w(0x20));
+    cpuid_info.brand_id.raw[5] = (uint32_t)(__iocsrrd_w(0x24));
+    if (__iocsrrd_w(0x28) != 0x0) {
+      cpuid_info.brand_id.raw[6] = (uint32_t)(__iocsrrd_w(0x28));
+    } else {
+      cpuid_info.brand_id.raw[6] = 0x20202020;
+    }
+    if (__iocsrrd_w(0x2c) != 0x0) {
+      cpuid_info.brand_id.raw[7] = (uint32_t)(__iocsrrd_w(0x2c));
+    } else {
+      cpuid_info.brand_id.raw[7] = 0x20202020;
+    }
+    cpuid_info.brand_id.str[CPUID_BRAND_STR_LENGTH - 1] = '\0';
+
+    // Set correct HTT flag
+    cpuid_info.flags.htt = false;
+    if (strstr(cpuid_info.brand_id.str, "3A5") ||
+         strstr(cpuid_info.brand_id.str, "3C5") ||
+         strstr(cpuid_info.brand_id.str, "3D5") ||
+         strstr(cpuid_info.brand_id.str, "3E5") ||
+         strstr(cpuid_info.brand_id.str, "2K") ||
+         strstr(cpuid_info.brand_id.str, "B6000M"))
+    {
+      cpuid_info.flags.htt = false;
+    } else {
+      cpuid_info.flags.htt = true;
+    }
+}
+
+core_type_t get_ap_hybrid_type(void)
+{
+    //
+    // Currently, return P-Core anyway.
+    //
+    return CORE_PCORE;
+}
diff --git a/system/loongarch/cpuinfo.c b/system/loongarch/cpuinfo.c
new file mode 100644
index 0000000..7576f9c
--- /dev/null
+++ b/system/loongarch/cpuinfo.c
@@ -0,0 +1,281 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2020-2022 Martin Whitaker.
+// Copyright (C) 2004-2023 Sam Demeulemeester
+// Copyright (C) 2024 Loongson Technology Corporation Limited. All rights reserved.
+//
+#include <stdbool.h>
+#include <stddef.h>
+#include <stdint.h>
+
+#include <larchintrin.h>
+
+#include "cpuid.h"
+#include "tsc.h"
+
+#include "boot.h"
+#include "config.h"
+#include "pmem.h"
+#include "vmem.h"
+#include "memctrl.h"
+#include "memsize.h"
+#include "hwquirks.h"
+
+#include "cpuinfo.h"
+
+//------------------------------------------------------------------------------
+// Constants
+//------------------------------------------------------------------------------
+
+#define BENCH_MIN_START_ADR 0x10000000   // 256MB
+
+//------------------------------------------------------------------------------
+// Public Variables
+//------------------------------------------------------------------------------
+
+const char  *cpu_model = NULL;
+
+int         l1_cache = 0;
+int         l2_cache = 0;
+int         l3_cache = 0;
+
+uint32_t    l1_cache_speed  = 0;
+uint32_t    l2_cache_speed  = 0;
+uint32_t    l3_cache_speed  = 0;
+uint32_t    ram_speed = 0;
+
+uint32_t    clks_per_msec = 0;
+
+//------------------------------------------------------------------------------
+// Private Functions
+//------------------------------------------------------------------------------
+
+static void determine_cache_size()
+{
+  uint32_t cache_info = 0;
+  uint32_t cache_present = 0;
+  uint32_t ways = 0;
+  uint32_t index = 0;
+  uint32_t line_size = 0;
+
+  // Get the persentence of caches
+  cache_present = __cpucfg(0x10);
+
+  // L1 D cache persent
+  if (cache_present & (0x1 << 0)) {
+    cache_info = __cpucfg(0x12);
+    ways = (cache_info & 0xFFFF) + 1;
+    index = 1 << ((cache_info >> 16) & 0xFF);
+    line_size = 1 << ((cache_info >> 24) & 0x7F);
+    l1_cache = (ways * index * line_size) / 1024;
+  }
+
+  // L2 cache persent
+  if (cache_present & (0x1 << 3)) {
+    cache_info = __cpucfg(0x13);
+    ways = (cache_info & 0xFFFF) + 1;
+    index = 1 << ((cache_info >> 16) & 0xFF);
+    line_size = 1 << ((cache_info >> 24) & 0x7F);
+    l2_cache = (ways * index * line_size) / 1024;
+  }
+
+  // L3 cache persent
+  if (cache_present & (0x1 << 10)) {
+    cache_info = __cpucfg(0x14);
+    ways = (cache_info & 0xFFFF) + 1;
+    index = 1 << ((cache_info >> 16) & 0xFF);
+    line_size = 1 << ((cache_info >> 24) & 0x7F);
+    l3_cache = (ways * index * line_size) / 1024;
+  }
+}
+
+static void determine_imc(void)
+{
+  // Check Loongson IMC
+  if (cpuid_info.vendor_id.str[0] == 'L') {
+    imc.family = IMC_LSLA;
+    switch (cpuid_info.brand_id.str[0x12])
+    {
+      case '5':
+        imc.family = IMC_LA464;
+        break;
+      case '6':
+        imc.family = IMC_LA664;
+        break;
+      default:
+        break;
+    }
+  }
+}
+
+static void determine_cpu_model(void)
+{
+    cpu_model = cpuid_info.brand_id.str;
+    determine_imc();
+    return;
+}
+
+static uint32_t memspeed(uintptr_t src, uint32_t len, int iter)
+{
+    uintptr_t dst;
+    uintptr_t wlen;
+    uint64_t start_time, end_time, run_time_clk, overhead;
+    int i;
+
+    dst = src + len;
+
+    wlen = len / 8;
+    // Get number of clock cycles due to overhead
+    start_time = get_tsc();
+    for (i = 0; i < iter; i++) {
+      __asm__ __volatile__ (
+          "move   $t0, %0\n\t"        \
+          "move   $t1, %1\n\t"        \
+          "move   $t2, %2\n\t"        \
+          "2:\n\t"                    \
+          "beqz   $t2, 1f\n\t"        \
+          "addi.d $t0, $t0, 8\n\t"    \
+          "addi.d $t1, $t1, 8\n\t"    \
+          "addi.d $t2, $t2, -1\n\t"   \
+          "b      2b\n\t"             \
+          "1:\n\t"                    \
+          :: "r" (src), "r" (dst), "r" (0)
+          : "$t0", "$t1", "$t2"
+      );
+    }
+    end_time = get_tsc();
+
+    overhead = (end_time - start_time);
+
+    // Prime the cache
+    __asm__ __volatile__ (
+        "move   $t0, %0\n\t"        \
+        "move   $t1, %1\n\t"        \
+        "move   $t2, %2\n\t"        \
+        "2:\n\t"                    \
+        "beqz   $t2, 1f\n\t"        \
+        "ld.d   $t3, $t0, 0x0\n\t"       \
+        "st.d   $t3, $t1, 0x0\n\t"       \
+        "addi.d $t0, $t0, 8\n\t"    \
+        "addi.d $t1, $t1, 8\n\t"    \
+        "addi.d $t2, $t2, -1\n\t"   \
+        "b      2b\n\t"             \
+        "1:\n\t"                    \
+        :: "r" (src), "r" (dst), "r" (wlen)
+        : "$t0", "$t1", "$t2", "$t3"
+    );
+
+    // Write these bytes
+    start_time = get_tsc();
+    for (i = 0; i < iter; i++) {
+      __asm__ __volatile__ (
+          "move   $t0, %0\n\t"        \
+          "move   $t1, %1\n\t"        \
+          "move   $t2, %2\n\t"        \
+          "2:\n\t"                    \
+          "beqz   $t2, 1f\n\t"        \
+          "ld.d   $t3, $t0, 0x0\n\t"       \
+          "st.d   $t3, $t1, 0x0\n\t"       \
+          "addi.d $t0, $t0, 8\n\t"    \
+          "addi.d $t1, $t1, 8\n\t"    \
+          "addi.d $t2, $t2, -1\n\t"   \
+          "b      2b\n\t"             \
+          "1:\n\t"                    \
+          :: "r" (src), "r" (dst), "r" (wlen)
+          : "$t0", "$t1", "$t2", "$t3"
+      );
+    }
+    end_time = get_tsc();
+    if ((end_time - start_time) > overhead) {
+        run_time_clk = (end_time - start_time) - overhead;
+    } else {
+        return 0;
+    }
+
+    run_time_clk = ((len * iter) / (double)run_time_clk) * clks_per_msec * 2;
+
+    return run_time_clk;
+}
+
+static void measure_memory_bandwidth(void)
+{
+    uintptr_t bench_start_adr = 0;
+    size_t mem_test_len;
+
+    if (l3_cache) {
+        mem_test_len = 4*l3_cache*1024;
+    } else if (l2_cache) {
+        mem_test_len = 4*l2_cache*1024;
+    } else {
+        return; // If we're not able to detect L2, don't start benchmark
+    }
+
+    // Locate enough free space under the 4G address space for testing.
+    for (int i = 0; i < pm_map_size && pm_map[i].start < PAGE_C(4,GB); i++) {
+        uintptr_t try_start = pm_map[i].start << PAGE_SHIFT;
+        uintptr_t try_end   = try_start + mem_test_len * 2;
+
+        // No start address below BENCH_MIN_START_ADR
+        if (try_start < BENCH_MIN_START_ADR) {
+            if ((pm_map[i].end << PAGE_SHIFT) >= (BENCH_MIN_START_ADR + mem_test_len * 2)) {
+                try_start = BENCH_MIN_START_ADR;
+                try_end   = BENCH_MIN_START_ADR + mem_test_len * 2;
+            } else {
+                continue;
+            }
+        }
+
+        // Avoid the memory region where the program is currently located.
+        if (try_start < (uintptr_t)_end && try_end > (uintptr_t)_start) {
+            try_start = (uintptr_t)_end;
+            try_end   = try_start + mem_test_len * 2;
+        }
+
+        uintptr_t end_limit = (pm_map[i].end < PAGE_C(4,GB) ? pm_map[i].end : PAGE_C(4,GB)) << PAGE_SHIFT;
+        if (try_end <= end_limit) {
+            bench_start_adr = try_start;
+            break;
+        }
+    }
+
+    if (bench_start_adr == 0) {
+        return;
+    }
+
+    // Measure L1 BW using 1/3rd of the total L1 cache size
+    if (l1_cache) {
+        l1_cache_speed = memspeed(bench_start_adr, (l1_cache/3)*1024, 50);
+    }
+
+    // Measure L2 BW using half the L2 cache size
+    if (l2_cache) {
+        l2_cache_speed = memspeed(bench_start_adr, l2_cache/2*1024, 50);
+    }
+
+    // Measure L3 BW using half the L3 cache size
+    if (l3_cache) {
+        l3_cache_speed = memspeed(bench_start_adr, l3_cache/2*1024, 50);
+    }
+
+    // Measure RAM BW
+    ram_speed = memspeed(bench_start_adr, mem_test_len, 25);
+}
+
+//------------------------------------------------------------------------------
+// Public Functions
+//------------------------------------------------------------------------------
+
+void cpuinfo_init(void)
+{
+    // Get cache sizes for most AMD and Intel CPUs. Exceptions for old
+    // CPUs are handled in determine_cpu_model().
+    determine_cache_size();
+
+    determine_cpu_model();
+}
+
+void membw_init(void)
+{
+    if(enable_bench) {
+        measure_memory_bandwidth();
+    }
+}
diff --git a/system/loongarch/hwctrl.c b/system/loongarch/hwctrl.c
new file mode 100644
index 0000000..e0a213b
--- /dev/null
+++ b/system/loongarch/hwctrl.c
@@ -0,0 +1,59 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2020-2022 Martin Whitaker.
+// Copyright (C) 2024 Loongson Technology Corporation Limited. All rights reserved.
+
+#include "stddef.h"
+
+#include "boot.h"
+#include "bootparams.h"
+#include "efi.h"
+
+#include "unistd.h"
+
+#include "hwctrl.h"
+
+//------------------------------------------------------------------------------
+// Private Variables
+//------------------------------------------------------------------------------
+
+static efi_runtime_services_t   *efi_rs_table = NULL;
+
+//------------------------------------------------------------------------------
+// Public Functions
+//------------------------------------------------------------------------------
+
+void hwctrl_init(void)
+{
+    boot_params_t *boot_params = (boot_params_t *)boot_params_addr;
+    if (boot_params->efi_info.loader_signature == EFI64_LOADER_SIGNATURE) {
+        uintptr_t system_table_addr = (uintptr_t)boot_params->efi_info.sys_tab_hi << 32 | boot_params->efi_info.sys_tab;
+        if (system_table_addr != 0) {
+            efi64_system_table_t *sys_table = (efi64_system_table_t *)system_table_addr;
+            efi_rs_table = (efi_runtime_services_t *)sys_table->runtime_services;
+        }
+    }
+}
+
+void reboot(void)
+{
+    if (efi_rs_table != NULL) {
+        efi_rs_table->reset_system(EFI_RESET_COLD, 0, 0);
+        usleep(1000000);
+    } else {
+        while (1);
+    }
+}
+
+void floppy_off()
+{
+    //
+    // Do nothing
+    //
+}
+
+void cursor_off()
+{
+    //
+    // Do nothing
+    //
+}
diff --git a/system/loongarch/memctrl.c b/system/loongarch/memctrl.c
new file mode 100644
index 0000000..48f534c
--- /dev/null
+++ b/system/loongarch/memctrl.c
@@ -0,0 +1,51 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2004-2023 Sam Demeulemeester
+// Copyright (C) 2024 Loongson Technology Corporation Limited. All rights reserved.
+//
+// ------------------------
+//
+// Platform-specific code for IMC configuration, ECC support, etc.
+//
+
+#include <stdbool.h>
+
+#include "config.h"
+#include "cpuinfo.h"
+
+#include "memctrl.h"
+#include "imc/imc.h"
+
+#include "display.h"
+
+imc_info_t imc = {"UNDEF", 0, 0, 0, 0, 0, 0, 0, 0};
+
+ecc_info_t ecc_status = {false, ECC_ERR_NONE, 0, 0, 0, 0};
+
+// ---------------------
+// -- Public function --
+// ---------------------
+
+void memctrl_init(void)
+{
+    ecc_status.ecc_enabled = false;
+
+    if (!enable_mch_read) {
+        return;
+    }
+
+    switch(imc.family) {
+      case IMC_LA464:
+      case IMC_LA664:
+        get_imc_config_loongson_ddr4();
+        break;
+      default:
+        break;
+    }
+}
+
+void memctrl_poll_ecc(void)
+{
+    if (!ecc_status.ecc_enabled) {
+        return;
+    }
+}
diff --git a/system/loongarch/temperature.c b/system/loongarch/temperature.c
new file mode 100644
index 0000000..ca68a9c
--- /dev/null
+++ b/system/loongarch/temperature.c
@@ -0,0 +1,41 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2024 Loongson Technology Corporation Limited. All rights reserved.
+
+#include <stdint.h>
+
+#include "config.h"
+#include "cpuid.h"
+#include "cpuinfo.h"
+#include "hwquirks.h"
+#include "memctrl.h"
+
+#include "temperature.h"
+
+#include <larchintrin.h>
+
+//------------------------------------------------------------------------------
+// Public Variables
+//------------------------------------------------------------------------------
+
+float cpu_temp_offset = 0;
+
+//------------------------------------------------------------------------------
+// Public Functions
+//------------------------------------------------------------------------------
+
+void temperature_init(void)
+{
+    if (!enable_temperature) {
+        return;
+    }
+
+    // Process temperature-related quirks
+    if (quirk.type & QUIRK_TYPE_TEMP) {
+        quirk.process();
+    }
+}
+
+int get_cpu_temperature(void)
+{
+    return (int)(__iocsrrd_w(0x428));
+}
diff --git a/system/loongarch/vmem.c b/system/loongarch/vmem.c
new file mode 100644
index 0000000..29f8b24
--- /dev/null
+++ b/system/loongarch/vmem.c
@@ -0,0 +1,73 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright (C) 2024 Loongson Technology Corporation Limited. All rights reserved.
+
+#include <stdbool.h>
+#include <stdint.h>
+#include <larchintrin.h>
+
+#include "boot.h"
+
+#include "cpuid.h"
+
+#include "vmem.h"
+
+extern bool map_numa_memory_range;
+extern uint8_t highest_map_bit;
+
+//------------------------------------------------------------------------------
+// Constants
+//------------------------------------------------------------------------------
+
+#define MAX_REGION_PAGES  256     // VM pages
+#define PCI_IO_PERFIX     0xEULL << 40
+#define DMW0_BASE         0x8000000000000000
+#define MMIO_BASE         DMW0_BASE | PCI_IO_PERFIX
+
+//------------------------------------------------------------------------------
+// Public Functions
+//------------------------------------------------------------------------------
+
+uintptr_t map_region(uintptr_t base_addr, size_t size __attribute__((unused)), bool only_for_startup __attribute__((unused)))
+{
+    if (((base_addr < 0x80000000) && (base_addr > 0x30000000)) || ((base_addr & PCI_IO_PERFIX) != 0x0)) {
+        return MMIO_BASE | base_addr;
+    } else if ((base_addr < 0x20000000) && (base_addr > 0x10000000)) {
+        return DMW0_BASE | base_addr;
+    } else {
+        return base_addr;
+    }
+}
+
+bool map_window(uintptr_t start_page __attribute__((unused)))
+{
+    return true;
+}
+
+void *first_word_mapping(uintptr_t page)
+{
+    void *result;
+
+    if (map_numa_memory_range == true) {
+        if ((page >> (highest_map_bit - PAGE_SHIFT)) & 0xF) {
+            uintptr_t alias = (((uintptr_t)(page >> (highest_map_bit - PAGE_SHIFT)) & 0xF) << 32) ;
+            alias |= page & ~(0xF << (highest_map_bit - PAGE_SHIFT));
+            result = (void *)(alias << PAGE_SHIFT);
+        } else {
+            result = (void *)(page << PAGE_SHIFT);
+        }
+    } else {
+        result = (void *)(page << PAGE_SHIFT);
+    }
+    return result;
+}
+
+void *last_word_mapping(uintptr_t page, size_t word_size)
+{
+    return (uint8_t *)first_word_mapping(page) + (PAGE_SIZE - word_size);
+}
+
+uintptr_t page_of(void *addr)
+{
+    uintptr_t page = (uintptr_t)addr >> PAGE_SHIFT;
+    return page;
+}
-- 
2.46.0


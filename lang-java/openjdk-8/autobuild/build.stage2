##### Control part variables
UPDATE=${PKGVER:2:-3}
BUILD=${PKGVER:(-2)}
SJAVAC=1
BOOTSTRAP_ADOPTIUM=8u422-b05
BOOTSTRAP_ALPINE="v3.20"
BOOTSTRAP_DEBIAN="sid"
# the current version of LoongArchLinux jre-openjdk package
# https://loongarchlinux.org/package/?repo=extra&arch=loong64&name=jdk${BOOTSTRAP_LOONGARCH64_SUF}-openjdk
BOOTSTRAP_LOONGARCH64_SUF="8"
BOOTSTRAP_LOONGARCH64="8"

[ "${CROSS:-$ARCH}" = "amd64" ] && export JARCH="x86_64" CONFARCH="amd64"
[ "${CROSS:-$ARCH}" = "armv4" ] && export JARCH="aarch32" CONFARCH="aarch32"
[ "${CROSS:-$ARCH}" = "armv6hf" ] && export JARCH="aarch32" CONFARCH="aarch32"
[ "${CROSS:-$ARCH}" = "armv7hf" ] && export JARCH="aarch32" CONFARCH="aarch32"
[ "${CROSS:-$ARCH}" = "arm64" ] && export JARCH="aarch64" CONFARCH="aarch64"
[ "${CROSS:-$ARCH}" = "loongson3" ] && export JARCH="mips64" CONFARCH="mips64el"
[ "${CROSS:-$ARCH}" = "loongarch64" ] && export JARCH="loongarch64" CONFARCH="loongarch64"
[ "${CROSS:-$ARCH}" = "powerpc" ] && export JARCH="ppc" CONFARCH="ppc"
[ "${CROSS:-$ARCH}" = "ppc64" ] && export JARCH="ppc64" CONFARCH="ppc64"
[ "${CROSS:-$ARCH}" = "ppc64el" ] && export JARCH="ppc64le" CONFARCH="ppc64le"

[ "${CROSS:-$ARCH}" = "amd64" ] && export ADOPTIUM_ARCH="x64"
[ "${CROSS:-$ARCH}" = "armv4" ] && export ADOPTIUM_ARCH="arm"
[ "${CROSS:-$ARCH}" = "armv6hf" ] && export ADOPTIUM_ARCH="arm"
[ "${CROSS:-$ARCH}" = "armv7hf" ] && export ADOPTIUM_ARCH="arm"
[ "${CROSS:-$ARCH}" = "arm64" ] && export ADOPTIUM_ARCH="aarch64"
[ "${CROSS:-$ARCH}" = "ppc64el" ] && export ADOPTIUM_ARCH="ppc64le"
[ "${CROSS:-$ARCH}" = "loongson3" ] && export DEBIAN_ARCH="mips64el"
[ "${CROSS:-$ARCH}" = "riscv64" ] && abdie "riscv64 is not supported"
[ "${CROSS:-$ARCH}" = "loongarch64" ] && export LOONGARCH64_BOOT="y"

if [[ "${CROSS:-$ARCH}" != "amd64" && \
      "${CROSS:-$ARCH}" != "arm64" && \
      "${CROSS:-$ARCH}" != ppc64* && \
      "${CROSS:-$ARCH}" != "loongson3" && \
      "${CROSS:-$ARCH}" != "loongarch64" ]]; then
    config_zero="--with-jvm-variants=zero"
    SJAVAC=0
else
    config_zero=" "
fi

if [[ "${CROSS:-$ARCH}" = "armv4" || \
      "${CROSS:-$ARCH}" = "armv6hf" || \
      "${CROSS:-$ARCH}" = "armv7hf" ]]; then
    config_zero="--with-jvm-variants=client"
fi

if [[ "${SJAVAC}" == "1" ]]; then
    use_sjavac="--enable-sjavac" # Just a simple switch. And sjavac.jar is not needed, since JDK 8 has built-in a similar routine
fi

if [[ "${CROSS:-$ARCH}" = "armv4" || \
      "${CROSS:-$ARCH}" = "armv6hf" || \
      "${CROSS:-$ARCH}" = "armv7hf" ]]; then
    config_bits="--host=armv7a-hardfloat-linux-gnueabi --build=armv7a-hardfloat-linux-gnueabi"
fi

JAVA_MAJOR_VERSION=8
JDKBOOTDIR=""
if [[ -z "$JDKBOOTDIR" && -n "$ADOPTIUM_ARCH" ]]; then
    abinfo "Downloading Adoptium binary toolchain ..."
    wget -O bootjdk.tar.gz "https://github.com/adoptium/temurin${JAVA_MAJOR_VERSION}-binaries/releases/download/jdk${BOOTSTRAP_ADOPTIUM}/OpenJDK${JAVA_MAJOR_VERSION}U-jdk_${ADOPTIUM_ARCH}_linux_hotspot_${BOOTSTRAP_ADOPTIUM/-/}.tar.gz"

    abinfo "Preparing Adoptium binary toolchain ..."
    tar -xf bootjdk.tar.gz

    export JDKBOOTDIR="$SRCDIR/jdk${BOOTSTRAP_ADOPTIUM}"
fi

if [[ -z "$JDKBOOTDIR" && -n "$ALPINE_ARCH" ]]; then
    mkdir bootpkgs
    pushd bootpkgs || exit

    abinfo "Resolving Alpine JDK version ..."
    curl -sSL https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/APKINDEX.tar.gz |
        gzip -d | tar -x APKINDEX
    bootversion="$(grep -E "^P:openjdk${JAVA_MAJOR_VERSION}$" --max-count=1 -A 30 <APKINDEX |
        grep --max-count=1 -F 'V:' | cut -d':' -f2)"
    echo "Bootstrap JDK version: $bootversion"

    rm -vf APKINDEX

    abinfo "Downloading bootstrap Jmods ..."
    wget -O jmods.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${JAVA_MAJOR_VERSION}-jmods-$bootversion.apk"
    abinfo "Downloading bootstrap JDK ..."
    wget -O jdk.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${JAVA_MAJOR_VERSION}-jdk-$bootversion.apk"
    abinfo "Downloading bootstrap JRE ..."
    wget -O jre.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${JAVA_MAJOR_VERSION}-jre-$bootversion.apk"
    abinfo "Downloading bootstrap headless JRE ..."
    wget -O jre-headless.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${JAVA_MAJOR_VERSION}-jre-headless-$bootversion.apk"
    abinfo "Downloading bootstrap Jmods ..."
    wget -O jmods.apk "https://dl-cdn.alpinelinux.org/alpine/$BOOTSTRAP_ALPINE/community/$ALPINE_ARCH/openjdk${JAVA_MAJOR_VERSION}-jmods-$bootversion.apk"
    popd || exit

    pushd / || exit
    for path in "$SRCDIR"/bootpkgs/*; do
        abinfo "Extracting bootstrap package: $(basename "$path") ..."
        tar -xf "$path"
    done
    popd || exit

    export JDKBOOTDIR="/usr/lib/jvm/java-${JAVA_MAJOR_VERSION}-openjdk"
fi

if [[ -z "$JDKBOOTDIR" && -n "$DEBIAN_ARCH" ]]; then
    mkdir bootpkgs
    pushd bootpkgs || exit

    abinfo "Resolving Debian sid JDK version ..."
    bootversion="$(curl -sSL https://ftp.debian.org/debian/dists/$BOOTSTRAP_DEBIAN/main/binary-$DEBIAN_ARCH/Packages.xz |
        xz -d - | grep -E "^Package: openjdk-${JAVA_MAJOR_VERSION}-jdk$" --max-count 1 -A 30 |
        grep --max-count 1 -E '^Version: ' | cut -d' ' -f2)"
    echo "Bootstrap JDK version: $bootversion"

    abinfo "Downloading bootstrap JDK ..."
    wget -O jdk.deb "https://ftp.debian.org/debian/pool/main/o/openjdk-${JAVA_MAJOR_VERSION}/openjdk-${JAVA_MAJOR_VERSION}-jdk_${bootversion}_$DEBIAN_ARCH.deb"
    abinfo "Downloading bootstrap JDK (headless) ..."
    wget -O jdk-headless.deb "https://ftp.debian.org/debian/pool/main/o/openjdk-${JAVA_MAJOR_VERSION}/openjdk-${JAVA_MAJOR_VERSION}-jdk-headless_${bootversion}_$DEBIAN_ARCH.deb"
    abinfo "Downloading bootstrap JRE ..."
    wget -O jre.deb "https://ftp.debian.org/debian/pool/main/o/openjdk-${JAVA_MAJOR_VERSION}/openjdk-${JAVA_MAJOR_VERSION}-jre_${bootversion}_$DEBIAN_ARCH.deb"
    abinfo "Downloading bootstrap JRE (headless) ..."
    wget -O jre-headless.deb "https://ftp.debian.org/debian/pool/main/o/openjdk-${JAVA_MAJOR_VERSION}/openjdk-${JAVA_MAJOR_VERSION}-jre-headless_${bootversion}_$DEBIAN_ARCH.deb"
    popd || exit

    pushd / || exit
    for path in "$SRCDIR"/bootpkgs/*; do
        abinfo "Extracting bootstrap package: $(basename "$path") ..."
        dpkg-deb --vextract "$path" /
    done
    popd || exit

    export JDKBOOTDIR="/usr/lib/jvm/java-${JAVA_MAJOR_VERSION}-openjdk-$DEBIAN_ARCH"
fi

if [[ -z "$JDKBOOTDIR" && -n "$LOONGARCH64_BOOT" ]]; then
    abinfo "Downloading LoongArchLinux JRE binary toolchain ..."
    wget -O bootjre.tar.zst https://archapi.zhcn.cc/api/v1/extra/loong64/jre${BOOTSTRAP_LOONGARCH64_SUF}-openjdk/download/
    abinfo "Downloading LoongArchLinux headless JRE binary toolchain ..."
    wget -O bootjre-headless.tar.zst https://archapi.zhcn.cc/api/v1/extra/loong64/jre${BOOTSTRAP_LOONGARCH64_SUF}-openjdk-headless/download/
    abinfo "Downloading LoongArchLinux JDK binary toolchain ..."
    wget -O bootjdk.tar.zst https://archapi.zhcn.cc/api/v1/extra/loong64/jdk${BOOTSTRAP_LOONGARCH64_SUF}-openjdk/download/

    mkdir bootjdk
    cd bootjdk || exit
    abinfo "Extracting JRE binary toolchain ..."
    tar -xvf ../bootjre.tar.zst
    abinfo "Extracting JRE-headless binary toolchain ..."
    tar -xvf ../bootjre-headless.tar.zst
    abinfo "Extracting JDK binary toolchain ..."
    tar -xvf ../bootjdk.tar.zst

    if [[ -e etc ]]; then
        abinfo "Configuring boot JDK ..."
        while read -r path; do
            mkdir -pv /"$path"
        done < <(find etc -type d)
        while read -r path; do
            cp -vf "$path" /"$path"
        done < <(find etc -type f)
    fi

    cd .. || exit

    export JDKBOOTDIR="$SRCDIR/bootjdk/usr/lib/jvm/java-$BOOTSTRAP_LOONGARCH64-openjdk"
fi

if [[ -z "$JDKBOOTDIR" ]]; then
    abdie "Could not find a possible bootstrap JDK"
fi

export JDKBOOTDIR

unset JAVA_HOME
unset _JAVA_OPTIONS

install -d -m 755 "$SRCDIR"/image
sh configure \
    --prefix="$SRCDIR"/image \
    --with-update-version=${UPDATE} \
    --with-build-number=${BUILD} \
    --with-milestone="AOSC" \
    --with-num-cores=$(nproc) \
    --enable-unlimited-crypto \
    --with-zlib=system \
    --with-boot-jdk="$JDKBOOTDIR" \
    ${config_zero} ${use_sjavac} \
    ${config_bits} \
    --enable-precompiled-headers \
    --with-extra-cxxflags="${EXTRA_CPP_FLAGS}" \
    --with-extra-cflags="${EXTRA_CFLAGS}" \
    --with-extra-ldflags="${LDFLAGS}" \
    CC=gcc CXX=g++

# FIXME: use system giflibwhen possible

make DEBUG_BINARIES=true                 \
     DISABLE_HOTSPOT_OS_VERSION_CHECK=ok \
     SCTP_WERROR='' default docs

make install

pushd image/jvm/openjdk-1.8.0_${UPDATE}-AOSC
find . -iname '*.jar' -exec chmod ugo+r {} \;
chmod ugo+r lib/ct.sym

find . -iname '*.diz' -exec rm {} \;
find . -iname '*.debuginfo' -exec rm {} \;
popd

mkdir -p "$PKGDIR"/usr/lib/java-8
cp -r image/jvm/openjdk-1.8.0_${UPDATE}-AOSC/* "$PKGDIR"/usr/lib/java-8/

mv "$PKGDIR"/usr/lib/java-8/jre/lib/management/jmxremote.password{.template,}
mv "$PKGDIR"/usr/lib/java-8/jre/lib/management/snmp.acl{.template,}

mkdir -p "$PKGDIR"/etc/openjdk-8/
for i in ${CONFARCH}/jvm.cfg \
         calendars.properties \
         content-types.properties \
         flavormap.properties \
         images/cursors/cursors.properties \
         logging.properties \
         management/jmxremote.access \
         management/jmxremote.password \
         management/management.properties \
         management/snmp.acl \
         net.properties \
         psfont.properties.ja \
         psfontj2d.properties \
         security/java.policy \
         security/java.security \
         sound.properties; do
    _filepkgpath="$PKGDIR"/usr/lib/java-8/jre/lib/${i}
    install -D -m 644 ${_filepkgpath} "$PKGDIR"/etc/openjdk-8/${i}
done

mkdir -p "$PKGDIR"/usr/src/openjdk-8
mv "$PKGDIR"/usr/lib/java-8/src.zip "$PKGDIR"/usr/src/openjdk-8/src.zip
ln -sv /usr/src/openjdk-8/src.zip "$PKGDIR"/usr/lib/java-8/src.zip

install -d -m 755 "$PKGDIR"/usr/share/doc/openjdk-8
if [[ "${CROSS:-$ARCH}" != "amd64" && \
       "${CROSS:-$ARCH}" != "arm64" && \
       "${CROSS:-$ARCH}" != "armv4" && \
       "${CROSS:-$ARCH}" != "armv6hf" && \
       "${CROSS:-$ARCH}" != armv7hf && \
       "${CROSS:-$ARCH}" != ppc64* && \
       "${CROSS:-$ARCH}" != "loongson3" && \
       "${CROSS:-$ARCH}" != "loongarch64" ]]; then
    cp -r build/linux-${JARCH}-normal-zero-release/docs/* \
        "$PKGDIR"/usr/share/doc/openjdk-8/
elif [[ "${CROSS:-$ARCH}" = "armv4" || \
        "${CROSS:-$ARCH}" = "armv6hf" || \
        "${CROSS:-$ARCH}" = "armv7hf" ]]; then # 32-bit architectures are "client" variants
    cp -r build/linux-${JARCH}-normal-client-release/docs/* \
        "$PKGDIR"/usr/share/doc/openjdk-8/
else
    cp -r build/linux-${JARCH}-normal-server-release/docs/* \
        "$PKGDIR"/usr/share/doc/openjdk-8/
fi

cp -r "$PKGDIR"/usr/lib/java-8/jre/* "$PKGDIR"/usr/lib/java-8/
rm -rf "$PKGDIR"/usr/lib/java-8/jre/
mkdir -p "$PKGDIR"/usr/lib/java-8/jre/lib/
pushd "$PKGDIR"/usr/lib/java-8/jre/lib/
ln -sv ../../lib/* .
popd

mkdir -p "$PKGDIR"/etc/ssl/certs/java-8
cp image/jvm/openjdk-1.8.0_${UPDATE}-AOSC/jre/lib/security/cacerts "$PKGDIR"/etc/ssl/certs/java-8/

rm -fv "$PKGDIR"/usr/lib/java-8/lib/security/cacerts
ln -sfv /etc/ssl/certs/java-8/cacerts "$PKGDIR"/usr/lib/java-8/lib/security/cacerts

cat > "$SRCDIR"/autobuild/conffiles << EOF
/etc/openjdk-8/${CONFARCH}/jvm.cfg
/etc/openjdk-8/calendars.properties
/etc/openjdk-8/content-types.properties
/etc/openjdk-8/flavormap.properties
/etc/openjdk-8/images/cursors/cursors.properties
/etc/openjdk-8/logging.properties
/etc/openjdk-8/management/jmxremote.access
/etc/openjdk-8/management/jmxremote.password
/etc/openjdk-8/management/management.properties
/etc/openjdk-8/management/snmp.acl
/etc/openjdk-8/net.properties
/etc/openjdk-8/psfont.properties.ja
/etc/openjdk-8/psfontj2d.properties
/etc/openjdk-8/security/java.policy
/etc/openjdk-8/security/java.security
/etc/openjdk-8/sound.properties
EOF

mkdir -p "$SRCDIR"/autobuild/overrides/etc/ld.so.conf.d/
cat > "$SRCDIR"/autobuild/overrides/etc/ld.so.conf.d/openjdk-8.conf << EOF
/usr/lib/java-8/lib/${CONFARCH}
/usr/lib/java-8/lib/${CONFARCH}/jli
/usr/lib/java-8/lib/${CONFARCH}/server
EOF

unset JARCH CONFARCH ADOPTIUM_ARCH ALPINE_ARCH DEBIAN_ARCH LOONGARCH64_BOOT JDKBOOTDIR
